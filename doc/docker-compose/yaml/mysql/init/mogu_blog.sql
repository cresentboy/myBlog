/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 8.0.22 : Database - mogu_blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`mogu_blog` /*!40100 DEFAULT CHARACTER SET utf8 */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `mogu_blog`;

/*Table structure for table `t_admin` */

DROP TABLE IF EXISTS `t_admin`;

CREATE TABLE `t_admin` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `user_name` varchar(255) NOT NULL COMMENT '用户名',
  `pass_word` varchar(255) NOT NULL COMMENT '密码',
  `gender` varchar(1) DEFAULT NULL COMMENT '性别(1:男2:女)',
  `avatar` varchar(100) DEFAULT NULL COMMENT '个人头像',
  `email` varchar(60) DEFAULT NULL COMMENT '邮箱',
  `birthday` date DEFAULT NULL COMMENT '出生年月日',
  `mobile` varchar(11) DEFAULT NULL COMMENT '手机',
  `valid_code` varchar(50) DEFAULT NULL COMMENT '邮箱验证码',
  `summary` varchar(200) DEFAULT NULL COMMENT '自我简介最多150字',
  `login_count` int unsigned DEFAULT '0' COMMENT '登录次数',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `last_login_ip` varchar(50) DEFAULT '127.0.0.1' COMMENT '最后登录IP',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `nick_name` varchar(255) DEFAULT NULL COMMENT '昵称',
  `qq_number` varchar(255) DEFAULT NULL COMMENT 'QQ号',
  `we_chat` varchar(255) DEFAULT NULL COMMENT '微信号',
  `occupation` varchar(255) DEFAULT NULL COMMENT '职业',
  `github` varchar(255) DEFAULT NULL COMMENT 'github地址',
  `gitee` varchar(255) DEFAULT NULL COMMENT 'gitee地址',
  `role_uid` varchar(32) DEFAULT NULL COMMENT '拥有的角色uid',
  `person_resume` text COMMENT '履历',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='管理员表';

/*Data for the table `t_admin` */

insert  into `t_admin`(`uid`,`user_name`,`pass_word`,`gender`,`avatar`,`email`,`birthday`,`mobile`,`valid_code`,`summary`,`login_count`,`last_login_time`,`last_login_ip`,`status`,`create_time`,`update_time`,`nick_name`,`qq_number`,`we_chat`,`occupation`,`github`,`gitee`,`role_uid`,`person_resume`) values ('0954693eb7ebaa0b693d3c787fb8bab7','测试管理员4','$2a$10$pfAeHdodIHK/4Csa4YmhK.H0YVzklrXXqPHoITmxE9YwWL9tbDx6e','1',NULL,NULL,NULL,NULL,NULL,NULL,0,NULL,'127.0.0.1',0,'2020-12-01 21:57:25','2020-12-01 21:57:25',NULL,NULL,NULL,NULL,NULL,NULL,'ad92f1639508ca405728f4981770793b',NULL),('0d4db862d2bf2d427fce5345acad3fc4','测试管理员','$2a$10$OFGU.KFUns/E1u1M8OVda.eHZCYtl.tGwUUV7BhsNm1s/wIUFm5ni','1',NULL,NULL,NULL,NULL,NULL,NULL,0,NULL,'127.0.0.1',0,'2020-10-07 14:38:37','2020-10-07 14:38:37',NULL,NULL,NULL,NULL,NULL,NULL,'434994947c5a4ee3a710cd277357c7c3',NULL),('1723ad77a1ca06b29a011471036a2dd6','test1','$2a$10$eus6faJ6/X2hNo5Cm.7bK.Z0oP9UQADthoqRaGTwHEdwehnaMj4Lu','1',',70f5b89fe70a28d95e10c19c96bf2e85','1595833114@qq.com',NULL,NULL,NULL,NULL,46,'2020-06-09 18:52:03','192.168.80.1',0,'2020-03-22 10:23:12','2020-07-21 21:09:46','test1',NULL,NULL,NULL,NULL,NULL,'d105da79260f4d6a8a03571e4a2b17bc',NULL),('1f01cd1d2f474743b241d74008b12333','admin','$2a$10$B0n1cVKwXok9fu9WKmw6wuuLriYmtnaUGfpHdch6OCAtFxa8zmljO','1','0713c2bbce1687e07a11a7388a0674fc',NULL,NULL,NULL,NULL,NULL,701,'2021-05-04 00:09:11','103.228.209.39',1,'2020-12-05 14:51:24','2021-05-04 00:09:11','admin',NULL,NULL,NULL,'https://github.com/moxi624/mogu_blog_v2','https://gitee.com/moxi159753/mogu_blog_v2','434994947c5a4ee3a710cd277357c7c3',NULL),('538c1ad9fdc4906a380048b315602dde','测试3','$2a$10$S22QJ4AJbq0CAG7gzz1sZOjbz7ImaR4Jk7WgehqvXKs9zbrP0QrOa','1',NULL,NULL,NULL,NULL,NULL,NULL,0,NULL,'127.0.0.1',0,'2020-10-07 14:39:14','2020-10-07 14:39:14',NULL,NULL,NULL,NULL,NULL,NULL,'ad92f1639508ca405728f4981770793b',NULL),('72346fe9bfc754023e3495f2614bf18f','测试管理员3','$2a$10$NCOOf7ee6UIJ7sxKLbUwJeMuZnz6K6Y.kZPyr3DswWRFM.gUa2uCK','1',NULL,NULL,NULL,NULL,NULL,NULL,0,NULL,'127.0.0.1',0,'2020-10-09 16:19:26','2020-10-09 16:19:26',NULL,NULL,NULL,NULL,NULL,NULL,'434994947c5a4ee3a710cd277357c7c3',NULL),('7621746caa93ce605e2de7143a3787b5','mogu2018','$2a$10$mPlEFU73rmV3rIZD0fMjMua5Gcj.YOiKV.F1uyCvXIB3ajG6oBLGK','1','4f49edaa1e6cef8454309bfe5c31ba1f','1595833114@qq.com',NULL,NULL,NULL,NULL,21,'2021-02-06 16:16:10','122.236.136.91',1,'2020-07-21 22:09:42','2021-02-06 16:16:10','mogu2018',NULL,NULL,NULL,NULL,NULL,'ad92f1639508ca405728f4981770793b','<h2 id=\"测试\">测试</h2>\n'),('ef384a1bd4005b89808e24a301e07963','测试头像','$2a$10$qP7uue.QyC5kJ4gg9kw3.ut8Jys8sEsuVHPWK4gXkqsVd9anqWgaq','1',',63f6ebd934fbeb79c921be787ef8a7f7','1595833114@qq.com',NULL,NULL,NULL,NULL,0,NULL,'127.0.0.1',0,'2020-07-21 21:10:35','2020-07-21 21:29:45','测试昵称',NULL,NULL,NULL,NULL,NULL,'434994947c5a4ee3a710cd277357c7c3',NULL);

/*Table structure for table `t_blog` */

DROP TABLE IF EXISTS `t_blog`;

CREATE TABLE `t_blog` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `title` varchar(200) DEFAULT NULL COMMENT '博客标题',
  `summary` varchar(200) DEFAULT NULL COMMENT '博客简介',
  `content` longtext COMMENT '博客内容',
  `tag_uid` varchar(255) DEFAULT NULL COMMENT '标签uid',
  `click_count` int DEFAULT '0' COMMENT '博客点击数',
  `collect_count` int DEFAULT '0' COMMENT '博客收藏数',
  `file_uid` varchar(255) DEFAULT NULL COMMENT '标题图片uid',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `admin_uid` varchar(32) DEFAULT NULL COMMENT '管理员uid',
  `is_original` varchar(1) DEFAULT '1' COMMENT '是否原创（0:不是 1：是）',
  `author` varchar(255) DEFAULT NULL COMMENT '作者',
  `articles_part` varchar(255) DEFAULT NULL COMMENT '文章出处',
  `blog_sort_uid` varchar(32) DEFAULT NULL COMMENT '博客分类UID',
  `level` tinyint(1) DEFAULT '0' COMMENT '推荐等级(0:正常)',
  `is_publish` varchar(1) DEFAULT '1' COMMENT '是否发布：0：否，1：是',
  `sort` int NOT NULL DEFAULT '0' COMMENT '排序字段',
  `open_comment` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否开启评论(0:否 1:是)',
  `type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '类型【0 博客， 1：推广】',
  `outside_link` varchar(1024) DEFAULT NULL COMMENT '外链【如果是推广，那么将跳转到外链】',
  `oid` int NOT NULL AUTO_INCREMENT COMMENT '唯一oid',
  PRIMARY KEY (`uid`,`oid`),
  KEY `oid` (`oid`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COMMENT='博客表';

/*Data for the table `t_blog` */

insert  into `t_blog`(`uid`,`title`,`summary`,`content`,`tag_uid`,`click_count`,`collect_count`,`file_uid`,`status`,`create_time`,`update_time`,`admin_uid`,`is_original`,`author`,`articles_part`,`blog_sort_uid`,`level`,`is_publish`,`sort`,`open_comment`,`type`,`outside_link`,`oid`) values ('05a627a5f5040b95c604410605a3ac5c','测试','测试','<h2 id=\"测试\">测试</h2>\n<p>测试内容</p>\n','7e0e93ea6cdb44ae92e58f48e6496ed7',1,0,'828227a0f1c736ea393fa4a747b1c5d9',0,'2020-10-06 11:11:27','2020-10-07 16:12:00','7621746caa93ce605e2de7143a3787b5','1','mogu2018mogu2018','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,1),('062ca3475e8193a4a81853a4bf41a8fa','JVM堆','JVM堆','<h1>堆</h1>\n\n<h2>堆的核心概念</h2>\n\n<p>堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。</p>\n\n<p><img alt=\"image-20200706195127740\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724553658.png\" /></p>\n\n<p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</p>\n\n<p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。</p>\n\n<ul>\n	<li>堆内存的大小是可以调节的。</li>\n</ul>\n\n<p>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>\n\n<p>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。</p>\n\n<blockquote>\n<p>-Xms10m：最小堆内存</p>\n\n<p>-Xmx10m：最大堆内存</p>\n</blockquote>\n\n<p>下图就是使用：Java VisualVM查看堆空间的内容，通过 jdk bin提供的插件</p>\n\n<p><img alt=\"image-20200706200739392\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554552.png\" /></p>\n\n<p>《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）</p>\n\n<p>我要说的是：&ldquo;几乎&rdquo;所有的对象实例都在这里分配内存。&mdash;从实际使用角度看的。</p>\n\n<ul>\n	<li>因为还有一些对象是在栈上分配的</li>\n</ul>\n\n<p>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</p>\n\n<p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</p>\n\n<ul>\n	<li>也就是触发了GC的时候，才会进行回收</li>\n	<li>如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word</li>\n</ul>\n\n<p>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</p>\n\n<p><img alt=\"image-20200706201904057\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554636.png\" /></p>\n\n<h3>堆内存细分</h3>\n\n<p>Java 7及之前堆内存逻辑上分为三部分：新生区+养老区+永久区</p>\n\n<ul>\n	<li>Young Generation Space 新生区 Young/New 又被划分为Eden区和Survivor区</li>\n	<li>Tenure generation space 养老区 Old/Tenure</li>\n	<li>Permanent Space永久区 Perm</li>\n</ul>\n\n<p>Java 8及之后堆内存逻辑上分为三部分：新生区养老区+元空间</p>\n\n<ul>\n	<li>Young Generation Space新生区 Young/New 又被划分为Eden区和Survivor区</li>\n	<li>Tenure generation space 养老区 Old/Tenure</li>\n	<li>Meta Space 元空间 Meta</li>\n</ul>\n\n<p>约定：新生区 -&gt; 新生代 -&gt; 年轻代 、 养老区 -&gt; 老年区 -&gt; 老年代、 永久区 -&gt; 永久代</p>\n\n<p><img alt=\"image-20200706203419496\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554718.png\" /></p>\n\n<p>堆空间内部结构，JDK1.8之前从永久代 替换成 元空间</p>\n\n<p><img alt=\"image-20200706203835403\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554846.png\" /></p>\n\n<h2>设置堆内存大小与OOM</h2>\n\n<p>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项&quot;-Xmx&quot;和&quot;-Xms&quot;来进行设置。</p>\n\n<ul>\n	<li>&ldquo;-Xms&quot;用于表示堆区的起始内存，等价于-xx:InitialHeapSize</li>\n	<li>&ldquo;-Xmx&quot;则用于表示堆区的最大内存，等价于-XX:MaxHeapSize</li>\n</ul>\n\n<p>一旦堆区中的内存大小超过&ldquo;-xmx&quot;所指定的最大内存时，将会抛出outofMemoryError异常。</p>\n\n<p>通常会将-Xms和-Xmx两个参数配置相同的值，其目的是<strong>为了能够在ava垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能</strong>。</p>\n\n<p>默认情况下</p>\n\n<ul>\n	<li>\n	<p>初始内存大小：物理电脑内存大小/64</p>\n	</li>\n	<li>\n	<p>最大内存大小：物理电脑内存大小/4</p>\n	</li>\n</ul>\n\n<pre>\n<code class=\"language-java\">/**\n * -Xms 用来设置堆空间（年轻代+老年代）的初始内存大小\n *  -X：是jvm运行参数\n *  ms：memory start\n * -Xmx：用来设置堆空间（年轻代+老年代）的最大内存大小\n *\n * @author: 陌溪\n * @create: 2020-07-06-20:44\n */\npublic class HeapSpaceInitial {\n    public static void main(String[] args) {\n        // 返回Java虚拟机中的堆内存总量\n        long initialMemory = Runtime.getRuntime().totalMemory() / 1024 / 1024;\n        // 返回Java虚拟机试图使用的最大堆内存\n        long maxMemory = Runtime.getRuntime().maxMemory() / 1024 / 1024;\n        System.out.println(\"-Xms:\" + initialMemory + \"M\");\n        System.out.println(\"-Xmx:\" + maxMemory + \"M\");\n    }\n}\n</code></pre>\n\n<p>输出结果</p>\n\n<pre>\n<code>-Xms:245M\n-Xmx:3614M\n</code></pre>\n\n<p>如何查看堆内存的内存分配情况</p>\n\n<pre>\n<code>jps  -&gt;  jstat -gc 进程id\n</code></pre>\n\n<p><img alt=\"image-20200706205756045\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554916.png\" /></p>\n\n<pre>\n<code>-XX:+PrintGCDetails\n</code></pre>\n\n<p><img alt=\"image-20200706205821919\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554956.png\" /></p>\n\n<h3>OutOfMemory举例</h3>\n\n<p><img alt=\"image-20200706205947535\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555016.png\" /></p>\n\n<p><img alt=\"image-20200706210000461\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555079.png\" /></p>\n\n<p>我们简单的写一个OOM例子</p>\n\n<pre>\n<code class=\"language-java\">/**\n * OOM测试\n *\n * @author: 陌溪\n * @create: 2020-07-06-21:11\n */\npublic class OOMTest {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n        while(true) {\n            list.add(999999999);\n        }\n    }\n}\n\n</code></pre>\n\n<p>然后设置启动参数</p>\n\n<pre>\n<code>-Xms10m -Xmx:10m\n</code></pre>\n\n<p>运行后，就出现OOM了，那么我们可以通过 VisualVM这个工具查看具体是什么参数造成的OOM</p>\n\n<p><img alt=\"image-20200706211652779\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555117.png\" /></p>\n\n<h2>年轻代与老年代</h2>\n\n<p>存储在JVM中的Java对象可以被划分为两类：</p>\n\n<ul>\n	<li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速\n	<ul>\n		<li>生命周期短的，及时回收即可</li>\n	</ul>\n	</li>\n	<li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致</li>\n</ul>\n\n<p>Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）</p>\n\n<p>其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）</p>\n\n<p><img alt=\"image-20200707075847954\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555189.png\" /></p>\n\n<p>下面这参数开发中一般不会调：</p>\n\n<p><img alt=\"image-20200707080154039\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555216.png\" /></p>\n\n<ul>\n	<li>Eden：From：to -&gt; 8:1:1</li>\n	<li>新生代：老年代 - &gt; 1 : 2</li>\n</ul>\n\n<p>配置新生代与老年代在堆结构的占比。</p>\n\n<ul>\n	<li>\n	<p>默认-XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3</p>\n	</li>\n	<li>\n	<p>可以修改-XX:NewRatio=4，表示新生代占1，老年代占4，新生代占整个堆的1/5</p>\n	</li>\n</ul>\n\n<blockquote>\n<p>当发现在整个项目中，生命周期长的对象偏多，那么就可以通过调整 老年代的大小，来进行调优</p>\n</blockquote>\n\n<p>在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1当然开发人员可以通过选项&ldquo;-xx:SurvivorRatio&rdquo;调整这个空间比例。比如-xx:SurvivorRatio=8</p>\n\n<p>几乎所有的Java对象都是在Eden区被new出来的。绝大部分的Java对象的销毁都在新生代进行了。（有些大的对象在Eden区无法存储时候，将直接进入老年代）</p>\n\n<blockquote>\n<p>IBM公司的专门研究表明，新生代中80%的对象都是&ldquo;朝生夕死&rdquo;的。</p>\n\n<p>可以使用选项&quot;-Xmn&quot;设置新生代最大内存大小</p>\n\n<p>这个参数一般使用默认值就可以了。</p>\n</blockquote>\n\n<p><img alt=\"image-20200707084208115\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555289.png\" /></p>\n\n<h2>图解对象分配过程</h2>\n\n<h3>概念</h3>\n\n<p>为新对象分配内存是一件非常严谨和复杂的任务，JM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p>\n\n<ul>\n	<li>new的对象先放伊甸园区。此区有大小限制。</li>\n	<li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</li>\n	<li>然后将伊甸园中的剩余对象移动到幸存者0区。</li>\n	<li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li>\n	<li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li>\n	<li>啥时候能去养老区呢？可以设置次数。默认是15次。</li>\n	<li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理</li>\n	<li>若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。</li>\n</ul>\n\n<p>可以设置参数：-Xx:MaxTenuringThreshold= N进行设置</p>\n\n<h3>图解过程</h3>\n\n<p>我们创建的对象，一般都是存放在Eden区的，当我们Eden区满了后，就会触发GC操作，一般被称为 YGC / Minor GC操作</p>\n\n<p><img alt=\"image-20200707084714886\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555316.png\" /></p>\n\n<p>当我们进行一次垃圾收集后，红色的将会被回收，而绿色的还会被占用着，存放在S0(Survivor From)区。同时我们给每个对象设置了一个年龄计数器，一次回收后就是1。</p>\n\n<p>同时Eden区继续存放对象，当Eden区再次存满的时候，又会触发一个MinorGC操作，此时GC将会把 Eden和Survivor From中的对象 进行一次收集，把存活的对象放到 Survivor To区，同时让年龄 + 1</p>\n\n<p><img alt=\"image-20200707085232646\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555379.png\" /></p>\n\n<p>我们继续不断的进行对象生成 和 垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象 晋升到 老年代中</p>\n\n<p><img alt=\"image-20200707085737207\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555416.png\" /></p>\n\n<h3>思考：幸存区区满了后？</h3>\n\n<p>特别注意，在Eden区满了的时候，才会触发MinorGC，而幸存者区满了后，不会触发MinorGC操作</p>\n\n<p>如果Survivor区满了后，将会触发一些特殊的规则，也就是可能直接晋升老年代</p>\n\n<blockquote>\n<p>举例：以当兵为例，正常人的晋升可能是 ： 新兵 -&gt; 班长 -&gt; 排长 -&gt; 连长</p>\n\n<p>但是也有可能有些人因为做了非常大的贡献，直接从 新兵 -&gt; 排长</p>\n</blockquote>\n\n<h3>对象分配的特殊情况</h3>\n\n<p><img alt=\"image-20200707091058346\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555444.png\" /></p>\n\n<h3>代码演示对象分配过程</h3>\n\n<p>我们不断的创建大对象</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 代码演示对象创建过程\n *\n * @author: 陌溪\n * @create: 2020-07-07-9:16\n */\npublic class HeapInstanceTest {\n    byte [] buffer = new byte[new Random().nextInt(1024 * 200)];\n    public static void main(String[] args) throws InterruptedException {\n        ArrayList&lt;HeapInstanceTest&gt; list = new ArrayList&lt;&gt;();\n        while (true) {\n            list.add(new HeapInstanceTest());\n            Thread.sleep(10);\n        }\n    }\n}\n</code></pre>\n\n<p>然后设置JVM参数</p>\n\n<pre>\n<code class=\"language-bash\">-Xms600m -Xmx600m\n</code></pre>\n\n<p>然后cmd输入下面命令，打开VisualVM图形化界面</p>\n\n<pre>\n<code>jvisualvm\n</code></pre>\n\n<p>然后通过执行上面代码，通过VisualGC进行动态化查看</p>\n\n<p><img alt=\"垃圾回收\" src=\"http://localhost:8600//blog/admin/gif/2020/10/15/1602724555783.gif\" /></p>\n\n<p>最终，在老年代和新生代都满了，就出现OOM</p>\n\n<pre>\n<code>Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n	at com.atguigu.java.chapter08.HeapInstanceTest.&lt;init&gt;(HeapInstanceTest.java:13)\n	at com.atguigu.java.chapter08.HeapInstanceTest.main(HeapInstanceTest.java:17)\n</code></pre>\n\n<h3>常用的调优工具</h3>\n\n<ul>\n	<li>JDK命令行</li>\n	<li>Eclipse：Memory Analyzer Tool</li>\n	<li>Jconsole</li>\n	<li>Visual VM（实时监控 推荐~）</li>\n	<li>Jprofiler（推荐~）</li>\n	<li>Java Flight Recorder（实时监控）</li>\n	<li>GCViewer</li>\n	<li>GCEasy</li>\n</ul>\n\n<h3>总结</h3>\n\n<ul>\n	<li>针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to</li>\n	<li>关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集</li>\n	<li>新生代采用复制算法的目的：是为了减少内碎片</li>\n</ul>\n\n<h2>Minor GC，MajorGC、Full GC</h2>\n\n<ul>\n	<li>Minor GC：新生代的GC</li>\n	<li>Major GC：老年代的GC</li>\n	<li>Full GC：整堆收集，收集整个Java堆和方法区的垃圾收集</li>\n</ul>\n\n<blockquote>\n<p>我们都知道，JVM的调优的一个环节，也就是垃圾收集，我们需要尽量的避免垃圾回收，因为在垃圾回收的过程中，容易出现STW的问题</p>\n\n<p>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上</p>\n</blockquote>\n\n<p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）</p>\n\n<p>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：</p>\n\n<ul>\n	<li>新生代收集（MinorGC/YoungGC）：只是新生代的垃圾收集</li>\n	<li>老年代收集（MajorGC/o1dGC）：只是老年代的圾收集。\n	<ul>\n		<li>目前，只有CMSGC会有单独收集老年代的行为。</li>\n		<li>注意，很多时候Major GC会和Fu11GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</li>\n	</ul>\n	</li>\n	<li>混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。\n	<ul>\n		<li>目前，只有G1 GC会有这种行为</li>\n	</ul>\n	</li>\n</ul>\n\n<p>整堆收集（FullGC）：收集整个java堆和方法区的垃圾收集。</p>\n\n<h3>Minor GC</h3>\n\n<p>当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存。）</p>\n\n<p>因为Java对象大多都具备 <strong>朝生夕灭</strong> 的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</p>\n\n<p>Minor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行</p>\n\n<blockquote>\n<p>STW：stop the word</p>\n</blockquote>\n\n<p><img alt=\"image-20200707095606813\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555516.png\" /></p>\n\n<h3>Major GC</h3>\n\n<p>指发生在老年代的GC，对象从老年代消失时，我们说 &ldquo;Major Gc&rdquo; 或 &ldquo;Full GC&rdquo; 发生了</p>\n\n<p>出现了MajorGc，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程）</p>\n\n<ul>\n	<li>也就是在老年代空间不足时，会先尝试触发MinorGc。如果之后空间还不足，则触发Major GC</li>\n</ul>\n\n<p>Major GC的速度一般会比MinorGc慢1e倍以上，STW的时间更长，如果Major GC后，内存还不足，就报OOM了</p>\n\n<h3>Full GC</h3>\n\n<p>触发Fu11GC执行的情况有如下五种：</p>\n\n<ul>\n	<li>调用System.gc（）时，系统建议执行Fu11GC，但是不必然执行</li>\n	<li>老年代空间不足</li>\n	<li>方法区空间不足</li>\n	<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li>\n	<li>由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li>\n</ul>\n\n<p>说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些</p>\n\n<h3>GC 举例</h3>\n\n<p>我们编写一个OOM的异常，因为我们在不断的创建字符串，是存放在元空间的</p>\n\n<pre>\n<code class=\"language-java\">/**\n * GC测试\n *\n * @author: 陌溪\n * @create: 2020-07-07-10:01\n */\npublic class GCTest {\n    public static void main(String[] args) {\n        int i = 0;\n        try {\n            List&lt;String&gt; list = new ArrayList&lt;&gt;();\n            String a = \"mogu blog\";\n            while(true) {\n                list.add(a);\n                a = a + a;\n                i++;\n            }\n        }catch (Exception e) {\n            e.getStackTrace();\n        }\n    }\n}\n</code></pre>\n\n<p>设置JVM启动参数</p>\n\n<pre>\n<code class=\"language-bash\">-Xms10m -Xmx10m -XX:+PrintGCDetails\n</code></pre>\n\n<p>打印出的日志</p>\n\n<pre>\n<code>[GC (Allocation Failure) [PSYoungGen: 2038K-&gt;500K(2560K)] 2038K-&gt;797K(9728K), 0.3532002 secs] [Times: user=0.01 sys=0.00, real=0.36 secs] \n[GC (Allocation Failure) [PSYoungGen: 2108K-&gt;480K(2560K)] 2405K-&gt;1565K(9728K), 0.0014069 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2288K-&gt;0K(2560K)] [ParOldGen: 6845K-&gt;5281K(7168K)] 9133K-&gt;5281K(9728K), [Metaspace: 3482K-&gt;3482K(1056768K)], 0.0058675 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 5281K-&gt;5281K(9728K), 0.0002857 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] [ParOldGen: 5281K-&gt;5263K(7168K)] 5281K-&gt;5263K(9728K), [Metaspace: 3482K-&gt;3482K(1056768K)], 0.0058564 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 2560K, used 60K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0f138,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 7168K, used 5263K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 73% used [0x00000000ff600000,0x00000000ffb23cf0,0x00000000ffd00000)\n Metaspace       used 3514K, capacity 4498K, committed 4864K, reserved 1056768K\n  class space    used 388K, capacity 390K, committed 512K, reserved 1048576K\n  \n  Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n	at java.util.Arrays.copyOfRange(Arrays.java:3664)\n	at java.lang.String.&lt;init&gt;(String.java:207)\n	at java.lang.StringBuilder.toString(StringBuilder.java:407)\n	at com.atguigu.java.chapter08.GCTest.main(GCTest.java:20)\n</code></pre>\n\n<p>触发OOM的时候，一定是进行了一次Full GC，因为只有在老年代空间不足时候，才会爆出OOM异常</p>\n\n<h2>堆空间分代思想</h2>\n\n<p>为什么要把Java堆分代？不分代就不能正常工作了吗？经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。</p>\n\n<blockquote>\n<p>新生代：有Eden、两块大小相同的survivor（又称为from/to，s0/s1）构成，to总为空。 老年代：存放新生代中经历多次GC仍然存活的对象。</p>\n</blockquote>\n\n<p><img alt=\"image-20200707101511025\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555544.png\" /></p>\n\n<p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储&ldquo;朝生夕死&rdquo;对象的区域进行回收，这样就会腾出很大的空间出来。</p>\n\n<p><img alt=\"image-20200707101543871\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555572.png\" /></p>\n\n<h2>内存分配策略</h2>\n\n<p>如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代</p>\n\n<p>对象晋升老年代的年龄阀值，可以通过选项-xx:MaxTenuringThreshold来设置</p>\n\n<p>针对不同年龄段的对象分配原则如下所示：</p>\n\n<ul>\n	<li>优先分配到Eden\n	<ul>\n		<li>开发中比较长的字符串或者数组，会直接存在老年代，但是因为新创建的对象 都是 朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发Major GC的次数比 Minor GC要更少，因此可能回收起来就会比较慢</li>\n	</ul>\n	</li>\n	<li>大对象直接分配到老年代\n	<ul>\n		<li>尽量避免程序中出现过多的大对象</li>\n	</ul>\n	</li>\n	<li>长期存活的对象分配到老年代</li>\n	<li>动态对象年龄判断\n	<ul>\n		<li>如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold 中要求的年龄。</li>\n	</ul>\n	</li>\n</ul>\n\n<p>空间分配担保： -Xx:HandlePromotionFailure</p>\n\n<ul>\n	<li>也就是经过Minor GC后，所有的对象都存活，因为Survivor比较小，所以就需要将Survivor无法容纳的对象，存放到老年代中。</li>\n</ul>\n\n<h2>为对象分配内存：TLAB</h2>\n\n<h3>问题：堆空间都是共享的么？</h3>\n\n<p>不一定，因为还有TLAB这个概念，在堆中划分出一块区域，为每个线程所独占</p>\n\n<h3>为什么有TLAB？</h3>\n\n<p>TLAB：Thread Local Allocation Buffer，也就是为每个线程单独分配了一个缓冲区</p>\n\n<p>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</p>\n\n<p>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</p>\n\n<p>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</p>\n\n<h3>什么是TLAB</h3>\n\n<p>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。</p>\n\n<p>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。</p>\n\n<p>据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</p>\n\n<p><img alt=\"image-20200707103547712\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555600.png\" /></p>\n\n<p>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但JVM确实是将TLAB作为内存分配的首选。</p>\n\n<p>在程序中，开发人员可以通过选项&ldquo;-Xx:UseTLAB&rdquo;设置是否开启TLAB空间。</p>\n\n<p>默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1，当然我们可以通过选项&ldquo;-Xx:TLABWasteTargetPercent&rdquo;设置TLAB空间所占用Eden空间的百分比大小。</p>\n\n<p>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。</p>\n\n<h3>TLAB分配过程</h3>\n\n<p>对象首先是通过TLAB开辟空间，如果不能放入，那么需要通过Eden来进行分配</p>\n\n<p><img alt=\"image-20200707104253530\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555628.png\" /></p>\n\n<h2>小结：堆空间的参数设置</h2>\n\n<ul>\n	<li>\n	<p>-XX：+PrintFlagsInitial：查看所有的参数的默认初始值</p>\n	</li>\n	<li>\n	<p>-XX：+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值）</p>\n	</li>\n	<li>\n	<p>-Xms：初始堆空间内存（默认为物理内存的1/64）</p>\n	</li>\n	<li>\n	<p>-Xmx：最大堆空间内存（默认为物理内存的1/4）</p>\n	</li>\n	<li>\n	<p>-Xmn：设置新生代的大小。（初始值及最大值）</p>\n	</li>\n	<li>\n	<p>-XX:NewRatio：配置新生代与老年代在堆结构的占比</p>\n	</li>\n	<li>\n	<p>-XX:SurvivorRatio：设置新生代中Eden和S0/S1空间的比例</p>\n	</li>\n	<li>\n	<p>-XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄</p>\n	</li>\n	<li>\n	<p>-XX：+PrintGCDetails：输出详细的GC处理日志</p>\n\n	<ul>\n		<li>打印gc简要信息：①-Xx：+PrintGC ② - verbose:gc</li>\n	</ul>\n	</li>\n	<li>\n	<p>-XX:HandlePromotionFalilure：是否设置空间分配担保</p>\n	</li>\n</ul>\n\n<p>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。I</p>\n\n<ul>\n	<li>如果大于，则此次Minor GC是安全的</li>\n	<li>如果小于，则虚拟机会查看-xx:HandlePromotionFailure设置值是否允担保失败。\n	<ul>\n		<li>如果HandlePromotionFailure=true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。</li>\n		<li>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</li>\n		<li>如果小于，则改为进行一次FullGC。</li>\n		<li>如果HandlePromotionFailure=false，则改为进行一次Ful1 Gc。</li>\n	</ul>\n	</li>\n</ul>\n\n<p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。</p>\n\n<h2>堆是分配对象的唯一选择么？</h2>\n\n<h3>逃逸分析</h3>\n\n<p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：</p>\n\n<p>随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么&ldquo;绝对&rdquo;了。</p>\n\n<p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p>\n\n<p>此外，前面提到的基于openJDk深度定制的TaoBaovm，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p>\n\n<p>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</p>\n\n<p>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。逃逸分析的基本行为就是分析对象动态作用域：</p>\n\n<ul>\n	<li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li>\n	<li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li>\n</ul>\n\n<h4>逃逸分析举例</h4>\n\n<p>没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧，也就是发生逃逸分析</p>\n\n<pre>\n<code class=\"language-java\">public void my_method() {\n    V v = new V();\n    // use v\n    // ....\n    v = null;\n}\n</code></pre>\n\n<p>针对下面的代码</p>\n\n<pre>\n<code class=\"language-java\">public static StringBuffer createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n</code></pre>\n\n<p>如果想要StringBuffer sb不发生逃逸，可以这样写</p>\n\n<pre>\n<code class=\"language-java\">public static String createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n</code></pre>\n\n<p>完整的逃逸分析代码举例</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 逃逸分析\n * 如何快速的判断是否发生了逃逸分析，大家就看new的对象是否在方法外被调用。\n * @author: 陌溪\n * @create: 2020-07-07-20:05\n */\npublic class EscapeAnalysis {\n\n    public EscapeAnalysis obj;\n\n    /**\n     * 方法返回EscapeAnalysis对象，发生逃逸\n     * @return\n     */\n    public EscapeAnalysis getInstance() {\n        return obj == null ? new EscapeAnalysis():obj;\n    }\n\n    /**\n     * 为成员属性赋值，发生逃逸\n     */\n    public void setObj() {\n        this.obj = new EscapeAnalysis();\n    }\n\n    /**\n     * 对象的作用于仅在当前方法中有效，没有发生逃逸\n     */\n    public void useEscapeAnalysis() {\n        EscapeAnalysis e = new EscapeAnalysis();\n    }\n\n    /**\n     * 引用成员变量的值，发生逃逸\n     */\n    public void useEscapeAnalysis2() {\n        EscapeAnalysis e = getInstance();\n        // getInstance().XXX  发生逃逸\n    }\n}\n</code></pre>\n\n<h4>参数设置</h4>\n\n<p>在JDK 1.7 版本之后，HotSpot中默认就已经开启了逃逸分析</p>\n\n<p>如果使用的是较早的版本，开发人员则可以通过：</p>\n\n<ul>\n	<li>选项&ldquo;-xx：+DoEscapeAnalysis&quot;显式开启逃逸分析</li>\n	<li>通过选项&ldquo;-xx：+PrintEscapeAnalysis&quot;查看逃逸分析的筛选结果</li>\n</ul>\n\n<h4>结论</h4>\n\n<p>开发中能使用局部变量的，就不要使用在方法外定义。</p>\n\n<p>使用逃逸分析，编译器可以对代码做如下优化：</p>\n\n<ul>\n	<li>栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配</li>\n	<li>同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li>\n	<li>分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</li>\n</ul>\n\n<h3>栈上分配</h3>\n\n<p>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p>\n\n<p>常见的栈上分配的场景</p>\n\n<blockquote>\n<p>在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。</p>\n</blockquote>\n\n<h4>举例</h4>\n\n<p>我们通过举例来说明 开启逃逸分析 和 未开启逃逸分析时候的情况</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 栈上分配\n * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n * @author: 陌溪\n * @create: 2020-07-07-20:23\n */\nclass User {\n    private String name;\n    private String age;\n    private String gender;\n    private String phone;\n}\npublic class StackAllocation {\n    public static void main(String[] args) throws InterruptedException {\n        long start = System.currentTimeMillis();\n        for (int i = 0; i &lt; 100000000; i++) {\n            alloc();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"花费的时间为：\" + (end - start) + \" ms\");\n\n        // 为了方便查看堆内存中对象个数，线程sleep\n        Thread.sleep(10000000);\n    }\n\n    private static void alloc() {\n        User user = new User();\n    }\n}\n</code></pre>\n\n<p>设置JVM参数，表示未开启逃逸分析</p>\n\n<pre>\n<code>-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n</code></pre>\n\n<p>运行结果，同时还触发了GC操作</p>\n\n<pre>\n<code>花费的时间为：664 ms\n</code></pre>\n\n<p>然后查看内存的情况，发现有大量的User存储在堆中</p>\n\n<p><img alt=\"image-20200707203038615\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555657.png\" /></p>\n\n<p>我们在开启逃逸分析</p>\n\n<pre>\n<code>-Xmx1G -Xms1G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails\n</code></pre>\n\n<p>然后查看运行时间，我们能够发现花费的时间快速减少，同时不会发生GC操作</p>\n\n<pre>\n<code>花费的时间为：5 ms\n</code></pre>\n\n<p>然后在看内存情况，我们发现只有很少的User对象，说明User发生了逃逸，因为他们存储在栈中，随着栈的销毁而消失</p>\n\n<p><img alt=\"image-20200707203441718\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555684.png\" /></p>\n\n<h3>同步省略</h3>\n\n<p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p>\n\n<p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。</p>\n\n<p>例如下面的代码</p>\n\n<pre>\n<code class=\"language-java\">public void f() {\n    Object hellis = new Object();\n    synchronized(hellis) {\n        System.out.println(hellis);\n    }\n}\n</code></pre>\n\n<p>代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：</p>\n\n<pre>\n<code class=\"language-java\">public void f() {\n    Object hellis = new Object();\n	System.out.println(hellis);\n}\n</code></pre>\n\n<p>我们将其转换成字节码</p>\n\n<p><img alt=\"image-20200707205634266\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555745.png\" /></p>\n\n<h3>分离对象和标量替换</h3>\n\n<p>标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p>\n\n<p>相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p>\n\n<p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过J工T优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p>\n\n<pre>\n<code class=\"language-java\">public static void main(String args[]) {\n    alloc();\n}\nclass Point {\n    private int x;\n    private int y;\n}\nprivate static void alloc() {\n    Point point = new Point(1,2);\n    System.out.println(\"point.x\" + point.x + \";point.y\" + point.y);\n}\n</code></pre>\n\n<p>以上代码，经过标量替换后，就会变成</p>\n\n<pre>\n<code class=\"language-java\">private static void alloc() {\n    int x = 1;\n    int y = 2;\n    System.out.println(\"point.x = \" + x + \"; point.y=\" + y);\n}\n</code></pre>\n\n<p>可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个聚合量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。 标量替换为栈上分配提供了很好的基础。</p>\n\n<h3>代码优化之标量替换</h3>\n\n<p>上述代码在主函数中进行了1亿次alloc。调用进行对象创建，由于User对象实例需要占据约16字节的空间，因此累计分配空间达到将近1.5GB。如果堆空间小于这个值，就必然会发生GC。使用如下参数运行上述代码：</p>\n\n<pre>\n<code class=\"language-bash\">-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations\n</code></pre>\n\n<p>这里设置参数如下：</p>\n\n<ul>\n	<li>参数-server：启动Server模式，因为在server模式下，才可以启用逃逸分析。</li>\n	<li>参数-XX:+DoEscapeAnalysis：启用逃逸分析</li>\n	<li>参数-Xmx10m：指定了堆空间最大为10MB</li>\n	<li>参数-XX:+PrintGC：将打印Gc日志。</li>\n	<li>参数一xx：+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配</li>\n</ul>\n\n<h3>逃逸分析的不足</h3>\n\n<p>关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟的。</p>\n\n<p>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。 一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p>\n\n<p>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JvM设计者的选择。据我所知，oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。</p>\n\n<p>目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</p>\n\n<h2>小结</h2>\n\n<p>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</p>\n\n<p>老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。</p>\n\n<p>当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</p>\n','5626932d452c2ad863d9b3cb0b69d22d',4,0,'608e9648a6e902bafaf30a8392f16b6d',1,'2020-10-15 09:16:54','2020-12-11 20:37:59','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,2),('11e0cace2148383e201439a682432d59','【JVM】垃圾回收器','【JVM】垃圾回收器','<h1>垃圾回收器</h1>\n\n<h2>GC分类与性能指标</h2>\n\n<p>垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。</p>\n\n<p>由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。</p>\n\n<p>从不同角度分析垃圾收集器，可以将GC分为不同的类型。</p>\n\n<blockquote>\n<p>Java不同版本新特性</p>\n\n<ul>\n	<li>语法层面：Lambda表达式、switch、自动拆箱装箱、enum</li>\n	<li>API层面：Stream API、新的日期时间、Optional、String、集合框架</li>\n	<li>底层优化：JVM优化、GC的变化、元空间、静态域、字符串常量池位置变化</li>\n</ul>\n</blockquote>\n\n<h3>垃圾收集器分类</h3>\n\n<h4><strong>按线程数分</strong></h4>\n\n<p><strong>按线程数分</strong>（垃圾回收线程数），可以分为串行垃圾回收器和并行垃圾回收器。</p>\n\n<p><img alt=\"image-20200713083030867\" src=\"http://image.moguit.cn/e2af28473690473aa86e591a970251a2\" /></p>\n\n<p>串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。</p>\n\n<ul>\n	<li>在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，串行回收默认被应用在客户端的Client模式下的JVM中</li>\n	<li>在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器。</li>\n</ul>\n\n<p>和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了&ldquo;stop-the-world&rdquo;机制。</p>\n\n<h4>按工作模式分</h4>\n\n<p>按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。</p>\n\n<ul>\n	<li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li>\n	<li>独占式垃圾回收器（Stop the world）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</li>\n</ul>\n\n<p><img alt=\"image-20200713083443486\" src=\"http://image.moguit.cn/f5376dafb6574023b68f4e3d85690e35\" /></p>\n\n<h4>按碎片处理方式分</h4>\n\n<p>按碎片处理方式分，可分为压缩武垃圾回收器和非压缩式垃圾回收器。</p>\n\n<ul>\n	<li>压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。</li>\n	<li>非压缩式的垃圾回收器不进行这步操作。</li>\n</ul>\n\n<p>按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。</p>\n\n<h3>评估GC的性能指标</h3>\n\n<ul>\n	<li><strong>吞吐量</strong>：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）</li>\n	<li><strong>垃圾收集开销</strong>：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。</li>\n	<li><strong>暂停时间</strong>：执行垃圾收集时，程序的工作线程被暂停的时间。</li>\n	<li><strong>收集频率</strong>：相对于应用程序的执行，收集操作发生的频率。</li>\n	<li><strong>内存占用</strong>：Java堆区所占的内存大小。</li>\n	<li><strong>快速</strong>：一个对象从诞生到被回收所经历的时间。</li>\n</ul>\n\n<p>吞吐量、暂停时间、内存占用 这三者共同构成一个&ldquo;不可能三角&rdquo;。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。 这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。 简单来说，主要抓住两点：</p>\n\n<p>这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。 简单来说，主要抓住两点：</p>\n\n<ul>\n	<li>吞吐量</li>\n	<li>暂停时间</li>\n</ul>\n\n<h3>性能指标：吞吐量</h3>\n\n<p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 /（运行用户代码时间+垃圾收集时间）</p>\n\n<blockquote>\n<p>比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>\n</blockquote>\n\n<p>这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的</p>\n\n<p>吞吐量优先，意味着在单位时间内，STW的时间最短：0.2+0.2=e.4</p>\n\n<p><img alt=\"image-20200713084726176\" src=\"http://image.moguit.cn/5c7132f313c9475aa7248135ba301003\" /></p>\n\n<h3>性能指标：暂停时间</h3>\n\n<p>&ldquo;暂停时间&rdquo;是指一个时间段内应用程序线程暂停，让Gc线程执行的状态</p>\n\n<p>例如，GC期间1ee毫秒的暂停时间意味着在这1e0毫秒期间内没有应用程序线程是活动的。暂停时间优先，意味着尽可能让单次STW的时间最短：0.1+0.1 + 0.1+ 0.1+ 0.1=0.5</p>\n\n<p><img alt=\"image-20200713085306400\" src=\"http://image.moguit.cn/b18aee33c11d4977a93a3dfe37ef6cf4\" /></p>\n\n<h3>吞吐量vs暂停时间</h3>\n\n<p>高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做&ldquo;生产性&rdquo;工作。直觉上，吞吐量越高程序运行越快。</p>\n\n<p>低暂停时间（低延迟）较好因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。因此，具有低的较大暂停时间是非常重要的，特别是对于一个交互式应用程序。</p>\n\n<p>不幸的是&rdquo;高吞吐量&rdquo;和&rdquo;低暂停时间&rdquo;是一对相互竞争的目标（矛盾）。</p>\n\n<p>因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致GC需要更长的暂停时间来执行内存回收。</p>\n\n<p>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</p>\n\n<p>在设计（或使用）GC算法时，我们必须确定我们的目标：一个GC算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。</p>\n\n<p>现在标准：<strong>在最大吞吐量优先的情况下，降低停顿时间</strong></p>\n\n<h2>不同的垃圾回收器概述</h2>\n\n<p>垃圾收集机制是Java的招牌能力，极大地提高了开发效率。这当然也是面试的热点。</p>\n\n<p>那么，Java常见的垃圾收集器有哪些？</p>\n\n<blockquote>\n<p>GC垃圾收集器是和JVM一脉相承的，它是和JVM进行搭配使用，在不同的使用场景对应的收集器也是有区别</p>\n</blockquote>\n\n<h3>垃圾回收器发展史</h3>\n\n<p>有了虚拟机，就一定需要收集垃圾的机制，这就是Garbage Collection，对应的产品我们称为Garbage Collector。</p>\n\n<ul>\n	<li>1999年随JDK1.3.1一起来的是串行方式的serialGc，它是第一款GC。ParNew垃圾收集器是Serial收集器的多线程版本</li>\n	<li>2002年2月26日，Parallel GC和Concurrent Mark Sweep GC跟随JDK1.4.2一起发布&middot;</li>\n	<li>Parallel GC在JDK6之后成为HotSpot默认GC。</li>\n	<li>2012年，在JDK1.7u4版本中，G1可用。</li>\n	<li>2017年，JDK9中G1变成默认的垃圾收集器，以替代CMS。</li>\n	<li>2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</li>\n	<li>2018年9月，JDK11发布。引入Epsilon 垃圾回收器，又被称为 &quot;No-Op(无操作)&ldquo; 回收器。同时，引入ZGC：可伸缩的低延迟垃圾回收器（Experimental）</li>\n	<li>2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC：低停顿时间的GC（Experimental）。&middot;2019年9月，JDK13发布。增强zGC，自动返回未用堆内存给操作系统。</li>\n	<li>2020年3月，JDK14发布。删除cMs垃圾回收器。扩展zGC在macos和Windows上的应用</li>\n</ul>\n\n<h3>7种经典的垃圾收集器</h3>\n\n<ul>\n	<li>串行回收器：Serial、Serial old</li>\n	<li>并行回收器：ParNew、Parallel Scavenge、Parallel old</li>\n	<li>并发回收器：CMS、G11</li>\n</ul>\n\n<p><img alt=\"image-20200713093551365\" src=\"http://image.moguit.cn/b20873e989cd4337913a0330d42969e9\" /></p>\n\n<h3>7款经典收集器与垃圾分代之间的关系</h3>\n\n<p><img alt=\"image-20200713093757644\" src=\"http://image.moguit.cn/c81063d5dc684c4b9e06c7707c3e1200\" /></p>\n\n<p>新生代收集器：Serial、ParNew、Paralle1 Scavenge；</p>\n\n<p>老年代收集器：Serial old、Parallel old、CMS；</p>\n\n<p>整堆收集器：G1；</p>\n\n<h3>垃圾收集器的组合关系</h3>\n\n<p><img alt=\"image-20200713094745366\" src=\"http://image.moguit.cn/a0bc661006244119af70fab4ae876f71\" /></p>\n\n<ul>\n	<li>两个收集器间有连线，表明它们可以搭配使用：Serial/Serial old、Serial/CMS、ParNew/Serial old、ParNew/CMS、Parallel Scavenge/Serial 0ld、Parallel Scavenge/Parallel 01d、G1；</li>\n	<li>其中Serial o1d作为CMs出现&quot;Concurrent Mode Failure&quot;失败的后备预案。</li>\n	<li>（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214），即：移除。</li>\n	<li>（绿色虚线）JDK14中：弃用Paralle1 Scavenge和Serialold GC组合（JEP366）</li>\n	<li>（青色虚线）JDK14中：删除CMs垃圾回收器（JEP363）</li>\n</ul>\n\n<p>为什么要有很多收集器，一个不够吗？因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。</p>\n\n<p>虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以我们选择的只是对具体应用最合适的收集器。</p>\n\n<h3>如何查看默认垃圾收集器</h3>\n\n<p>-XX:+PrintcommandLineFlags：查看命令行相关参数（包含使用的垃圾收集器）</p>\n\n<p>使用命令行指令：jinfo -flag 相关垃圾回收器参数 进程ID</p>\n\n<h2>Serial回收器：串行回收</h2>\n\n<p>Serial收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3之前回收新生代唯一的选择。</p>\n\n<p>Serial收集器作为HotSpot中client模式下的默认新生代垃圾收集器。</p>\n\n<p>Serial收集器采用复制算法、串行回收和&quot;stop-the-World&quot;机制的方式执行内存回收。</p>\n\n<p>除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial old收集器。Serial old收集器同样也采用了串行回收和&quot;stop the World&quot;机制，只不过内存回收算法使用的是标记-压缩算法。</p>\n\n<ul>\n	<li>Serial old是运行在Client模式下默认的老年代的垃圾回收器</li>\n	<li>Serial 0ld在Server模式下主要有两个用途：\n	<ul>\n		<li>与新生代的Parallel scavenge配合使用</li>\n		<li>作为老年代CMS收集器的后备垃圾收集方案</li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"image-20200713100703799\" src=\"http://image.moguit.cn/c9a3ac2f93ff431dae0a5396dec54667\" /></p>\n\n<p>这个收集器是一个单线程的收集器，但它的&ldquo;单线程&rdquo;的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束（Stop The World）</p>\n\n<p>优势：简单而高效（与其他收集器的单线程比），对于限定单个cPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</p>\n\n<p>运行在client模式下的虚拟机是个不错的选择。</p>\n\n<p>在用户的桌面应用场景中，可用内存一般不大（几十MB至一两百MB），可以在较短时间内完成垃圾收集（几十ms至一百多ms），只要不频繁发生，使用串行回收器是可以接受的。</p>\n\n<p>在HotSpot虚拟机中，使用-XX：+UseSerialGC参数可以指定年轻代和老年代都使用串行收集器。</p>\n\n<p>等价于新生代用Serial GC，且老年代用Serial old GC</p>\n\n<h3>总结</h3>\n\n<p>这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核cpu才可以用。现在都不是单核的了。</p>\n\n<p>对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java web应用程序中是不会采用串行垃圾收集器的。</p>\n\n<h2>ParNew回收器：并行回收</h2>\n\n<p>如果说serialGC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是serial收集器的多线程版本。</p>\n\n<ul>\n	<li>Par是Parallel的缩写，New：只能处理的是新生代</li>\n</ul>\n\n<p>ParNew 收集器除了采用并行回收的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是采用复制算法、&quot;stop-the-World&quot;机制。</p>\n\n<p>ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器。</p>\n\n<p><img alt=\"image-20200713102030127\" src=\"http://image.moguit.cn/7956256d195d42c882ea2efb9bd9078b\" /></p>\n\n<ul>\n	<li>对于新生代，回收次数频繁，使用并行方式高效。</li>\n	<li>对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）</li>\n</ul>\n\n<p>由于ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比serial收集器更高效？</p>\n\n<p>因为除Serial外，目前只有ParNew GC能与CMS收集器配合工作</p>\n\n<p>在程序中，开发人员可以通过选项&quot;-XX：+UseParNewGC&quot;手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p>\n\n<p>-XX:ParallelGCThreads限制线程数量，默认开启和CPU数据相同的线程数。</p>\n\n<h2>Parallel回收器：吞吐量优先</h2>\n\n<p>HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallel Scavenge收集器同样也采用了复制算法、并行回收和&quot;Stop the World&quot;机制。</p>\n\n<p>那么Parallel 收集器的出现是否多此一举？</p>\n\n<ul>\n	<li>和ParNew收集器不同，ParallelScavenge收集器的目标则是达到一个可控制的吞吐量（Throughput），它也被称为吞吐量优先的垃圾收集器。</li>\n	<li>自适应调节策略也是Paralle1 Scavenge与ParNew一个重要区别。</li>\n</ul>\n\n<p>高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。因此，常见在服务器环境中使用。例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</p>\n\n<p>Paralle1收集器在JDK1.6时提供了用于执行老年代垃圾收集的Paralle1o1d收集器，用来代替老年代的serialold收集器。</p>\n\n<p>Parallel old收集器采用了标记-压缩算法，但同样也是基于并行回收和&quot;stop-the-World&quot;机制。</p>\n\n<p><img alt=\"image-20200713110359441\" src=\"http://image.moguit.cn/df20d6f88ba744faa9f2eb12c5c4bb55\" /></p>\n\n<p>在程序吞吐量优先的应用场景中，IParalle1收集器和Parallel old收集器的组合，在server模式下的内存回收性能很不错。在Java8中，默认是此垃圾收集器。</p>\n\n<h3>参数配置</h3>\n\n<p>-XX：+UseParallelGC 手动指定年轻代使用Paralle1并行收集器执行内存回收任务。</p>\n\n<p>-XX：+UseParalleloldcc 手动指定老年代都是使用并行回收收集器。</p>\n\n<ul>\n	<li>分别适用于新生代和老年代。默认jdk8是开启的。</li>\n	<li>上面两个参数，默认开启一个，另一个也会被开启。（互相激活）</li>\n</ul>\n\n<p>-XX:ParallelGcrhreads设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。</p>\n\n<p>在默认情况下，当CPU数量小于8个，ParallelGcThreads的值等于CPU数量。</p>\n\n<p>当CPU数量大于8个，ParallelGCThreads的值等于3+[5*CPU Count]/8]</p>\n\n<p>-XX:MaxGCPauseMillis 设置垃圾收集器最大停顿时间（即STw的时间）。单位是毫秒。</p>\n\n<p>为了尽可能地把停顿时间控制在MaxGCPauseMi11s以内，收集器在工作时会调整Java堆大小或者其他一些参数。 对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。该参数使用需谨慎。</p>\n\n<p>-XX:GCTimeRatio垃圾收集时间占总时间的比例（=1/（N+1））。用于衡量吞吐量的大小。</p>\n\n<p>取值范围（0，100）。默认值99，也就是垃圾回收时间不超过1。</p>\n\n<p>与前一个-xx:MaxGCPauseMillis参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。</p>\n\n<p>-XX:+UseAdaptivesizepplicy 设置Parallel scavenge收集器具有自适应调节策略</p>\n\n<p>在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</p>\n\n<p>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMil1s），让虚拟机自己完成调优工作。</p>\n\n<h2>CMS回收器：低延迟</h2>\n\n<p>在JDK1.5时期，Hotspot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：cMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，<strong>它第一次实现了让垃圾收集线程与用户线程同时工作</strong>。</p>\n\n<p>CMS收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。</p>\n\n<p>目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。</p>\n\n<p>CMS的垃圾收集算法采用标记-清除算法，并且也会&quot;stop-the-world&quot;</p>\n\n<p>不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p>\n\n<p>在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。</p>\n\n<p><img alt=\"image-20200713205154007\" src=\"http://image.moguit.cn/68b528d2d17a4aaca3550358d35380e7\" /></p>\n\n<p>CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及STW的阶段主要是：初始标记 和 重新标记)</p>\n\n<ul>\n	<li><strong>初始标记</strong>（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为&ldquo;stop-the-world&rdquo;机制而出现短暂的暂停，这个阶段的主要任务仅仅只是<strong>标记出GCRoots能直接关联到的对象</strong>。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。</li>\n	<li><strong>并发标记</strong>（Concurrent-Mark）阶段：从Gc Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li>\n	<li><strong>重新标记</strong>（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</li>\n	<li><strong>并发清除</strong>（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</li>\n</ul>\n\n<p>尽管CMS收集器采用的是并发回收（非独占式），但是在其初始化标记和再次标记这两个阶段中仍然需要执行&ldquo;Stop-the-World&rdquo;机制暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要&ldquo;stop-the-World&rdquo;，只是尽可能地缩短暂停时间。</p>\n\n<p>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</p>\n\n<p>另外，由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次&ldquo;Concurrent Mode Failure&rdquo; 失败，这时虚拟机将启动后备预案：临时启用Serial old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p>\n\n<p>CMS收集器的垃圾收集算法采用的是<strong>标记清除算法</strong>，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会产生一些内存碎片。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。</p>\n\n<p><img alt=\"image-20200713212230352\" src=\"http://image.moguit.cn/e69c5c84ce8846ce8af5f0af10060c34\" /></p>\n\n<h3>CMS为什么不使用标记整理算法？</h3>\n\n<p>答案其实很简答，因为当并发清除的时候，用Compact整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact更适合&ldquo;stop the world&rdquo; 这种场景下使用</p>\n\n<h3>优点</h3>\n\n<ul>\n	<li>并发收集</li>\n	<li>低延迟</li>\n</ul>\n\n<h3>缺点</h3>\n\n<ul>\n	<li>会产生内存碎片，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发FullGC。</li>\n	<li>CMS收集器对CPU资源非常敏感。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li>\n	<li>CMS收集器无法处理浮动垃圾。可能出现&ldquo;Concurrent Mode Failure&quot;失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行GC时释放这些之前未被回收的内存空间。</li>\n</ul>\n\n<h3>设置的参数</h3>\n\n<ul>\n	<li>-XX：+UseConcMarkSweepGC手动指定使用CMS收集器执行内存回收任务。</li>\n</ul>\n\n<p>开启该参数后会自动将-xx：+UseParNewGC打开。即：ParNew（Young区用）+CMS（01d区用）+Serial old的组合。</p>\n\n<ul>\n	<li>-XX:CMSInitiatingoccupanyFraction 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。</li>\n</ul>\n\n<p>JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次cMs回收。JDK6及以上版本默认值为92%</p>\n\n<p>如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Ful1Gc的执行次数。</p>\n\n<ul>\n	<li>-XX：+UseCMSCompactAtFullCollection用于指定在执行完Ful1</li>\n</ul>\n\n<p>GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。</p>\n\n<ul>\n	<li>-XX:CMSFullGCsBeforecompaction 设置在执行多少次Ful1GC后对内存空间进行压缩整理。</li>\n	<li>-XX:ParallelcMSThreads 设置cMs的线程数量。</li>\n</ul>\n\n<p>CMs默认启动的线程数是（Paralle1GCThreads+3）/4，ParallelGCThreads是年轻代并行收集器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。</p>\n\n<h3>小结</h3>\n\n<p>HotSpot有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC这三个Gc有什么不同呢？</p>\n\n<p>请记住以下口令：</p>\n\n<ul>\n	<li>如果你想要最小化地使用内存和并行开销，请选Serial GC；</li>\n	<li>如果你想要最大化应用程序的吞吐量，请选Parallel GC；</li>\n	<li>如果你想要最小化GC的中断或停顿时间，请选CMs GC。</li>\n</ul>\n\n<h3>JDK后续版本中CMS的变化</h3>\n\n<p><strong>JDK9新特性</strong>：CMS被标记为eprecate了（JEP291）&gt;如果对JDK9及以上版本的HotSpot虚拟机使用参数-XX： +UseConcMarkSweepGC来开启CMS收集器的话，用户会收到一个警告信息，提示CMS未来将会被废弃。</p>\n\n<p>JDK14新特性：删除CMs垃圾回收器（JEP363）移除了CMS垃圾收集器，如果在JDK14中使用 XX：+UseConcMarkSweepGC的话，JVM不会报错，只是给出一个warning信息，但是不会exit。JVM会自动回退以默认GC方式启动JVM</p>\n\n<h2>G1回收器：区域化分代式</h2>\n\n<h3>既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First（G1）？</h3>\n\n<p>原因就在于应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序正常进行，而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。G1（Garbage-First）垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。</p>\n\n<p>与此同时，为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。</p>\n\n<p><strong>官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起&ldquo;全功能收集器&rdquo;的重任与期望</strong>。</p>\n\n<h3>为什么名字叫 Garbage First(G1)呢？</h3>\n\n<p>因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的Region来表示Eden、幸存者0区，幸存者1区，老年代等。</p>\n\n<p>G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。</p>\n\n<p>由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First）。</p>\n\n<p>G1（Garbage-First）是一款面向服务端应用的垃圾收集器，主要针对配备多核CPU及大容量内存的机器，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。</p>\n\n<p>在JDK1.7版本正式启用，移除了Experimenta1的标识，是JDK9以后的默认垃圾回收器，取代了CMS回收器以及Paralle1+Parallel old组合。被orac1e官方称为&ldquo;全功能的垃圾收集器&rdquo;。</p>\n\n<p>与此同时，CMS已经在JDK9中被标记为废弃（deprecated）。在jdk8中还不是默认的垃圾回收器，需要使用-xx：+UseG1GC来启用。</p>\n\n<h3>G1垃圾收集器的优点</h3>\n\n<p>与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：</p>\n\n<p><strong>并行与并发</strong></p>\n\n<ul>\n	<li>并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW</li>\n	<li>并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况</li>\n</ul>\n\n<p><strong>分代收集</strong></p>\n\n<ul>\n	<li>从分代上看，G1依然属于分代型垃圾回收器，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。</li>\n	<li>将堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代。</li>\n	<li>和之前的各类回收器不同，它同时兼顾年轻代和老年代。对比其他回收器，或者工作在年轻代，或者工作在老年代；</li>\n</ul>\n\n<p>G1所谓的分代，已经不是下面这样的了</p>\n\n<p><img alt=\"image-20200713215105293\" src=\"http://image.moguit.cn/e12a1513700d43ce9829d852ca322b28\" /></p>\n\n<p>而是这样的一个区域</p>\n\n<p><img alt=\"image-20200713215133839\" src=\"http://image.moguit.cn/5328b852ef4e4218b72bbd2604f0ebc5\" /></p>\n\n<p><strong>空间整合</strong></p>\n\n<ul>\n	<li>CMS：&ldquo;标记-清除&rdquo;算法、内存碎片、若干次Gc后进行一次碎片整理</li>\n	<li>G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。Region之间是复制算法，但整体上实际可看作是标记-压缩（Mark-Compact）算法，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。</li>\n</ul>\n\n<p><strong>可预测的停顿时间模型（即：软实时soft real-time）</strong> 这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p>\n\n<ul>\n	<li>由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。</li>\n	<li>G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</li>\n	<li>相比于CMSGC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。</li>\n</ul>\n\n<h3>G1垃圾收集器的缺点</h3>\n\n<p>相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（overload）都要比CMS要高。</p>\n\n<p>从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。</p>\n\n<h3>G1参数设置</h3>\n\n<ul>\n	<li>-XX:+UseG1GC：手动指定使用G1垃圾收集器执行内存回收任务</li>\n	<li>-XX:G1HeapRegionSize设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。</li>\n	<li>-XX:MaxGCPauseMillis 设置期望达到的最大Gc停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms</li>\n	<li>-XX:+ParallelGcThread 设置STW工作线程数的值。最多设置为8</li>\n	<li>-XX:ConcGCThreads 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGcThreads）的1/4左右。</li>\n	<li>-XX:InitiatingHeapoccupancyPercent 设置触发并发Gc周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。</li>\n</ul>\n\n<h3>G1收集器的常见操作步骤</h3>\n\n<p>G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：</p>\n\n<ul>\n	<li>第一步：开启G1垃圾收集器</li>\n	<li>第二步：设置堆的最大内存</li>\n	<li>第三步：设置最大的停顿时间</li>\n</ul>\n\n<p>G1中提供了三种垃圾回收模式：YoungGC、Mixed GC和Fu11GC，在不同的条件下被触发。</p>\n\n<h3>G1收集器的适用场景</h3>\n\n<p>面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）</p>\n\n<p>最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案；</p>\n\n<p>如：在堆大小约6GB或更大时，可预测的暂停时间可以低于e.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次Gc停顿时间不会过长）。 用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用61可能比CMS好：</p>\n\n<ul>\n	<li>超过5e%的Java堆被活动数据占用；</li>\n	<li>对象分配频率或年代提升频率变化很大；</li>\n	<li>GC停顿时间过长（长于e.5至1秒）</li>\n</ul>\n\n<p>HotSpot垃圾收集器里，除了61以外，其他的垃圾收集器使用内置的JVM线程执行Gc的多线程操作，而G1GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</p>\n\n<h3>分区Region：化整为零</h3>\n\n<p>使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过</p>\n\n<p>XX:G1HeapRegionsize设定。所有的Region大小相同，且在JVM生命周期内不会被改变。</p>\n\n<p>虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。通过Region的动态分配方式实现逻辑上的连续。</p>\n\n<p><img alt=\"image-20200713223244886\" src=\"http://image.moguit.cn/0f3195e8412a4c04ae9f5ad301dc588a\" /></p>\n\n<p>一个region有可能属于Eden，Survivor或者old/Tenured内存区域。但是一个region只可能属于一个角色。图中的E表示该region属于Eden内存区域，s表示属于survivor内存区域，o表示属于01d内存区域。图中空白的表示未使用的内存空间。</p>\n\n<p>G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。主要用于存储大对象，如果超过1.5个region，就放到H。</p>\n\n<p>**设置H的原因：**对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。为了能找到连续的H区，有时候不得不启动Fu11Gc。G1的大多数行为都把H区作为老年代的一部分来看待。</p>\n\n<p>每个Region都是通过指针碰撞来分配空间</p>\n\n<p><img alt=\"image-20200713223509993\" src=\"http://image.moguit.cn/c06aadcef53c4becb21da57be83d1ba0\" /></p>\n\n<h3>G1垃圾回收器的回收过程</h3>\n\n<p>G1GC的垃圾回收过程主要包括如下三个环节：</p>\n\n<ul>\n	<li>年轻代GC（Young GC）</li>\n	<li>老年代并发标记过程（Concurrent Marking）</li>\n	<li>混合回收（Mixed GC）</li>\n</ul>\n\n<p>（如果需要，单线程、独占式、高强度的Fu11GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。）</p>\n\n<p><img alt=\"image-20200713224113996\" src=\"http://image.moguit.cn/5c542594ac9444b48043f4b23c2ec44c\" /></p>\n\n<p>顺时针，young gc-&gt;young gc+concurrent mark-&gt;Mixed GC顺序，进行垃圾回收。</p>\n\n<p>应用程序分配内存，当年轻代的Eden区用尽时开始年轻代回收过程；G1的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。</p>\n\n<p>当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。</p>\n\n<p>标记完成马上开始混合回收过程。对于一个混合回收期，G1GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了。同时，这个老年代Region是和年轻代一起被回收的。</p>\n\n<p>举个例子：一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。</p>\n\n<h3>Remembered Set（记忆集）</h3>\n\n<p>一个对象被不同区域引用的问题</p>\n\n<p>一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？</p>\n\n<p>在其他的分代收集器，也存在这样的问题（而G1更突出）回收新生代也不得不同时扫描老年代？这样的话会降低MinorGC的效率；</p>\n\n<p><strong>解决方法：</strong></p>\n\n<p>无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：</p>\n\n<p>每个Region都有一个对应的Remembered Set；每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作；</p>\n\n<p>然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象）；如果不同，通过cardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。</p>\n\n<p><img alt=\"image-20200713224716715\" src=\"http://image.moguit.cn/42f3aad6f049435381badb4c052fe176\" /></p>\n\n<h3>G1回收过程-年轻代GC</h3>\n\n<p>JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。</p>\n\n<p>YGC时，首先G1停止应用程序的执行（stop-The-Wor1d），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。</p>\n\n<p><img alt=\"image-20200713225100632\" src=\"http://image.moguit.cn/3713efc8ca9d49f288f57a13de3ba121\" /></p>\n\n<p>然后开始如下回收过程：</p>\n\n<ul>\n	<li>第一阶段，扫描根</li>\n</ul>\n\n<p>根是指static变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同RSet记录的外部引用作为扫描存活对象的入口。</p>\n\n<ul>\n	<li>第二阶段，更新RSet</li>\n</ul>\n\n<p>处理dirty card queue（见备注）中的card，更新RSet。此阶段完成后，RSet可以准确的反映老年代对所在的内存分段中对象的引用。</p>\n\n<ul>\n	<li>第三阶段，处理RSet</li>\n</ul>\n\n<p>识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。</p>\n\n<ul>\n	<li>第四阶段，复制对象。</li>\n</ul>\n\n<p>此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到o1d区中空的内存分段。如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。</p>\n\n<ul>\n	<li>第五阶段，处理引用</li>\n</ul>\n\n<p>处理Soft，Weak，Phantom，Final，JNI Weak 等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。</p>\n\n<h3>G1回收过程-并发标记过程</h3>\n\n<ul>\n	<li>初始标记阶段：标记从根节点直接可达的对象。这个阶段是sTw的，并且会触发一次年轻代GC。</li>\n	<li>根区域扫描（Root Region Scanning）：G1 Gc扫描survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在youngGC之前完成。</li>\n	<li>并发标记（Concurrent Marking）：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被youngGC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。</li>\n	<li>再次标记（Remark）：由于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的初始快照算法：snapshot-at-the-beginning（SATB）。</li>\n	<li>独占清理（cleanup，STW）：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是sTw的。这个阶段并不会实际上去做垃圾的收集</li>\n	<li>并发清理阶段：识别并清理完全空闲的区域。</li>\n</ul>\n\n<h3>G1回收过程 - 混合回收</h3>\n\n<p>当越来越多的对象晋升到老年代o1d region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个old GC，除了回收整个Young Region，还会回收一部分的old Region。这里需要注意：<strong>是一部分老年代，而不是全部老年代</strong>。可以选择哪些o1d Region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC并不是Full GC。</p>\n\n<p><img alt=\"image-20200713225810871\" src=\"http://image.moguit.cn/127776c15dce4bc185787acf451c9f59\" /></p>\n\n<p>并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次（可以通过-XX:G1MixedGCCountTarget设置）被回收</p>\n\n<p>混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。</p>\n\n<p>由于老年代中的内存分段默认分8次回收，G1会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，</p>\n\n<p>XX:G1MixedGCLiveThresholdPercent，默认为65%，意思是垃圾占内存分段比例要达到65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。</p>\n\n<p>混合回收并不一定要进行8次。有一个阈值-XX:G1HeapWastePercent，默认值为1e%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于1e%，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。</p>\n\n<h3>G1回收可选的过程4 - Full GC</h3>\n\n<p>G1的初衷就是要避免Fu11GC的出现。但是如果上述方式不能正常工作，G1会停止应用程序的执行（stop-The-world），使用单线程的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。</p>\n\n<p>要避免Fu11GC的发生，一旦发生需要进行调整。什么时候会发生Ful1GC呢？比如堆内存太小，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到ful1gc，这种情况可以通过增大内存解决。 导致61Fu11GC的原因可能有两个：</p>\n\n<ul>\n	<li>EVacuation的时候没有足够的to-space来存放晋升的对象；</li>\n	<li>并发处理过程完成之前空间耗尽。</li>\n</ul>\n\n<h3>G1回收的优化建议</h3>\n\n<p>从oracle官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分Region，停顿时间是用户可控制的，所以并不迫切去实现，而选择把这个特性放到了G1之后出现的低延迟垃圾收集器（即ZGC）中。另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。</p>\n\n<p>年轻代大小</p>\n\n<ul>\n	<li>避免使用-Xmn或-XX:NewRatio等相关选项显式设置年轻代大小</li>\n	<li>固定年轻代的大小会覆盖</li>\n</ul>\n\n<p>暂停时间目标暂停时间目标不要太过严苛</p>\n\n<ul>\n	<li>G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间</li>\n	<li>评估G1GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。</li>\n</ul>\n\n<h2>垃圾回收器总结</h2>\n\n<p>截止JDK1.8，一共有7款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。</p>\n\n<p><img alt=\"image-20200714075738203\" src=\"http://image.moguit.cn/7bbd145aeb3e47ffbf9ef6cd472a2cc7\" /></p>\n\n<p>GC发展阶段：Seria l=&gt; Parallel（并行）=&gt; CMS（并发）=&gt; G1 =&gt; ZGC</p>\n\n<p>不同厂商、不同版本的虚拟机实现差距比较大。HotSpot虚拟机在JDK7/8后所有收集器及组合如下图</p>\n\n<p><img alt=\"image-20200714080151020\" src=\"http://image.moguit.cn/827e304bf1194104a3e824a4ab9dc384\" /></p>\n\n<h3>怎么选择垃圾回收器</h3>\n\n<p>Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。怎么选择垃圾收集器？</p>\n\n<ul>\n	<li>优先调整堆的大小让JVM自适应完成。</li>\n	<li>如果内存小于100M，使用串行收集器</li>\n	<li>如果是单核、单机程序，并且没有停顿时间的要求，串行收集器</li>\n	<li>如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择</li>\n	<li>如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器</li>\n	<li>官方推荐G1，性能高。现在互联网的项目，基本都是使用G1。</li>\n</ul>\n\n<p>最后需要明确一个观点：</p>\n\n<ul>\n	<li>没有最好的收集器，更没有万能的收集</li>\n	<li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li>\n</ul>\n\n<h3>面试</h3>\n\n<p>对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。 这里较通用、基础性的部分如下：</p>\n\n<p>垃圾收集的算法有哪些？如何判断一个对象是否可以回收？</p>\n\n<p>垃圾收集器工作的基本流程。</p>\n\n<p>另外，大家需要多关注垃圾回收器这一章的各种常用的参数</p>\n\n<h2>GC日志分析</h2>\n\n<p>通过阅读Gc日志，我们可以了解Java虚拟机内存分配与回收策略。 内存分配与垃圾回收的参数列表</p>\n\n<ul>\n	<li>-XX:+PrintGc输出GC日志。类似：-verbose:gc</li>\n	<li>-XX:+PrintGcDetails输出Gc的详细日志</li>\n	<li>-XX:+PrintGcTimestamps 输出Gc的时间戳（以基准时间的形式）</li>\n	<li>-XX:+PrintGCDatestamps 输出Gc的时间戳（以日期的形式，如2013-05-04T21：53：59.234+0800）</li>\n	<li>-XX:+PrintHeapAtGC在进行Gc的前后打印出堆的信息</li>\n	<li>-Xloggc:../logs/gc.1og日志文件的输出路径</li>\n</ul>\n\n<h3>verbose:gc</h3>\n\n<p>打开GC日志</p>\n\n<pre>\n<code class=\"language-bash\">-verbose:gc\n\n</code></pre>\n\n<p>这个只会显示总的GC堆的变化，如下：</p>\n\n<p><img alt=\"image-20200714081610474\" src=\"http://image.moguit.cn/6554517157554a5f956c14ab5256a8d2\" /></p>\n\n<p>参数解析</p>\n\n<p><img alt=\"image-20200714081622526\" src=\"http://image.moguit.cn/49ed4aad0976462d95fe69a111554d57\" /></p>\n\n<h3>PrintGCDetails</h3>\n\n<p>打开GC日志</p>\n\n<pre>\n<code class=\"language-bash\">-verbose:gc -XX:+PrintGCDetails\n\n</code></pre>\n\n<p>输入信息如下</p>\n\n<p><img alt=\"image-20200714081909309\" src=\"http://image.moguit.cn/e52e549d02b54a379a9e2b01860620b8\" /></p>\n\n<p>参数解析</p>\n\n<p><img alt=\"image-20200714081925767\" src=\"http://image.moguit.cn/564fb80c36a74ead8da0d084d78d60f3\" /></p>\n\n<h3>补充</h3>\n\n<ul>\n	<li>[GC&quot;和&quot;[Fu11GC&quot;说明了这次垃圾收集的停顿类型，如果有&quot;Fu11&quot;则说明GC发生了&quot;stop The World&quot;</li>\n	<li>使用Seria1收集器在新生代的名字是Default New Generation，因此显示的是&quot;[DefNew&quot;</li>\n	<li>使用ParNew收集器在新生代的名字会变成&quot;[ParNew&quot;，意思是&quot;Parallel New Generation&quot;</li>\n	<li>使用Paralle1 scavenge收集器在新生代的名字是&rdquo;[PSYoungGen&quot;</li>\n	<li>老年代的收集和新生代道理一样，名字也是收集器决定的</li>\n	<li>使用G1收集器的话，会显示为&quot;garbage-first heap&quot;</li>\n</ul>\n\n<p>Allocation Failure表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。</p>\n\n<p>[PSYoungGen：5986K-&gt;696K（8704K）]5986K-&gt;704K（9216K）中括号内：GC回收前年轻代大小，回收后大小，（年轻代总大小）括号外：GC回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</p>\n\n<p>user代表用户态回收耗时，sys内核态回收耗时，rea实际耗时。由于多核的原因，时间总和可能会超过rea1时间</p>\n\n<h3>Young GC图片</h3>\n\n<p><img alt=\"image-20200714082555688\" src=\"http://image.moguit.cn/1d27507cd71e45aeb9a7bd66afe03115\" /></p>\n\n<h3>FullGC图片、</h3>\n\n<p><img alt=\"image-20200714082714690\" src=\"http://image.moguit.cn/810ab4da1ff94137a22e288b83ec76a0\" /></p>\n\n<h3>GC回收举例</h3>\n\n<p>我们编写一个程序，用来说明GC收集的过程</p>\n\n<pre>\n<code class=\"language-java\">/**\n * GC垃圾收集过程\n * @author: 陌溪\n * @create: 2020-07-14-8:35\n */\npublic class GCUseTest {\n    static final Integer _1MB = 1024 * 1024;\n    public static void main(String[] args) {\n        byte [] allocation1, allocation2, allocation3, allocation4;\n        allocation1 = new byte[2 *_1MB];\n        allocation2 = new byte[2 *_1MB];\n        allocation3 = new byte[2 *_1MB];\n        allocation4 = new byte[4 *_1MB];\n    }\n}\n\n</code></pre>\n\n<p>我们设置JVM启动参数</p>\n\n<pre>\n<code class=\"language-bash\">-Xms10m -Xmx10m -XX:+PrintGCDetails\n\n</code></pre>\n\n<p>首先我们会将3个2M的数组存放到Eden区，然后后面4M的数组来了后，将无法存储，因为Eden区只剩下2M的剩余空间了，那么将会进行一次Young GC操作，将原来Eden区的内容，存放到Survivor区，但是Survivor区也存放不下，那么就会直接晋级存入Old 区</p>\n\n<p><img alt=\"image-20200714083332238\" src=\"http://image.moguit.cn/05329144e4a848539a196a911210cac2\" /></p>\n\n<p>然后我们将4M对象存入到Eden区中</p>\n\n<p><img alt=\"image-20200714083526790\" src=\"http://image.moguit.cn/bfe9a7aa4fe44611a4225ffa5907d175\" /></p>\n\n<p>可以用一些工具去分析这些GC日志</p>\n\n<p>常用的日志分析工具有：GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat等</p>\n\n<p><strong>GCViewer</strong></p>\n\n<p><img alt=\"image-20200714084921184\" src=\"http://image.moguit.cn/58a5e03f426e40378c368fcad3ad7fb0\" /></p>\n\n<p><strong>GC easy</strong></p>\n\n<p><img alt=\"image-20200714084726824\" src=\"http://image.moguit.cn/ba907d5d7e2a4cf2b359bc2ee8b8f58a\" /></p>\n\n<h2>垃圾回收器的新发展</h2>\n\n<p>GC仍然处于飞速发展之中，目前的默认选项G1GC在不断的进行改进，很多我们原来认为的缺点，例如串行的Fu11GC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK10以后，Fu11GC已经是并行运行，在很多场景下，其表现还略优于ParallelGC的并行Ful1GC实现。</p>\n\n<p>即使是SerialGC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，在serverless等新的应用场景下，Serial Gc找到了新的舞台。</p>\n\n<p>比较不幸的是CMSGC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK9中已经被标记为废弃，并在JDK14版本中移除</p>\n\n<p>Epsilon:A No-Op GarbageCollector（Epsilon垃圾回收器，&quot;No-Op（无操作）&quot;回收器）<a href=\"http://openidk.iava.net/iep\">http://openidk.iava.net/iep</a> s/318</p>\n\n<p>ZGC:A Scalable Low-Latency Garbage Collector（Experimental）（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）</p>\n\n<p>现在G1回收器已成为默认回收器好几年了。我们还看到了引入了两个新的收集器：ZGC（JDK11出现）和Shenandoah（Open JDK12）</p>\n\n<blockquote>\n<p>主打特点：低停顿时间</p>\n</blockquote>\n\n<h3>Open JDK12的Shenandoash GC</h3>\n\n<p>Open JDK12的shenandoash GC：低停顿时间的GC（实验性）</p>\n\n<p>Shenandoah，无疑是众多GC中最孤独的一个。是第一款不由oracle公司团队领导开发的Hotspot垃圾收集器。不可避免的受到官方的排挤。比如号称openJDK和OracleJDk没有区别的Oracle公司仍拒绝在oracleJDK12中支持Shenandoah。</p>\n\n<p>Shenandoah垃圾回收器最初由RedHat进行的一项垃圾收集器研究项目Pauseless GC的实现，旨在针对JVM上的内存回收实现低停顿的需求。在2014年贡献给OpenJDK。</p>\n\n<p>Red Hat研发Shenandoah团队对外宣称，Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。</p>\n\n<p><img alt=\"image-20200714090608807\" src=\"http://image.moguit.cn/cfd6595a3f3249ec986ee9e45f1fed13\" /></p>\n\n<p>这是RedHat在2016年发表的论文数据，测试内容是使用Es对200GB的维基百科数据进行索引。从结果看：</p>\n\n<blockquote>\n<p>停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。 而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。</p>\n</blockquote>\n\n<p>总结</p>\n\n<ul>\n	<li>shenandoah Gc的弱项：高运行负担下的吞吐量下降。</li>\n	<li>shenandoah GC的强项：低延迟时间。</li>\n</ul>\n\n<h3>革命性的ZGC</h3>\n\n<p>zGC与shenandoah目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。</p>\n\n<p>《深入理解Java虚拟机》一书中这样定义zGC：2GC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-压缩算法的，以低延迟为首要目标的一款垃圾收集器。</p>\n\n<p>ZGC的工作过程可以分为4个阶段：<strong>并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射</strong> 等。</p>\n\n<p>ZGC几乎在所有地方并发执行的，除了初始标记的是STw的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。</p>\n\n<p><img alt=\"image-20200714091201073\" src=\"http://image.moguit.cn/77e579af05784c5caa5bac520e0ccfa9\" /></p>\n\n<p>停顿时间对比</p>\n\n<p><img alt=\"image-20200714091401511\" src=\"http://image.moguit.cn/83965f8a8afc4b05a22cabde793e3526\" /></p>\n\n<p>虽然ZGC还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用&ldquo;令人震惊、革命性&rdquo;来形容，不为过。 未来将在服务端、大内存、低延迟应用的首选垃圾收集器。</p>\n\n<p><img alt=\"image-20200714093243028\" src=\"http://image.moguit.cn/f7d81d6e33424719af53019e80a519de\" /></p>\n\n<p>JDK14之前，2GC仅Linux才支持。</p>\n\n<p>尽管许多使用zGc的用户都使用类Linux的环境，但在Windows和macos上，人们也需要zGC进行开发部署和测试。许多桌面应用也可以从ZGC中受益。因此，2GC特性被移植到了Windows和macos上。</p>\n\n<p>现在mac或Windows上也能使用zGC了，示例如下：</p>\n\n<pre>\n<code class=\"language-bash\">-XX:+UnlockExperimentalVMOptions-XX：+UseZGC\n\n</code></pre>\n\n<h3>AliGC</h3>\n\n<p>AliGC是阿里巴巴JVM团队基于G1算法，面向大堆（LargeHeap）应用场景。指定场景下的对比：</p>\n\n<p><img alt=\"image-20200714093604012\" src=\"http://image.moguit.cn/35fa2d414f1a4507aa434422f87737cc\" /></p>\n\n<p>当然，其它厂商也提供了各种别具一格的GC实现，例如比较有名的低延迟GC Zing</p>\n','7e0e93ea6cdb44ae92e58f48e6496ed7,15721a34adba068763b5a2fb1991fc57,5626932d452c2ad863d9b3cb0b69d22d',36,1,'da6da0c71bd31dba89de83a392eb7101',1,'2020-08-18 00:57:36','2020-12-11 20:37:24','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','db0d64ea7df409de5d2d747927cfa1a5',0,'1',0,1,0,NULL,3),('33f5cafa9191688952105f11bc9a9f9d','默认标题1','默认简介1','<h1 id=\"Gin内容介绍\">Gin内容介绍</h1>\n<h2 id=\"参考\">参考</h2>\n<p>参考博客和文档：</p>\n<ul>\n<li><a href=\"https://www.liwenzhou.com/posts/Go/Gin_framework/\">Gin框架介绍及使用</a></li>\n<li><a href=\"https://gin-gonic.com/zh-cn/docs/\">Gin中文文档</a></li>\n</ul>\n<h2 id=\"主要内容\">主要内容</h2>\n<p>本教程主要从下面几个方面来进行讲解</p>\n<ul>\n<li>Gin框架基本使用</li>\n<li>GORM基本使用</li>\n<li>Web开发项目实战</li>\n</ul>\n<h2 id=\"关于Web\">关于Web</h2>\n<ul>\n<li>Web是基于HTTP协议进行交互的应用网络</li>\n<li>Web就是通过使用浏览器/APP访问的各种资源</li>\n</ul>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821565137.png\" alt=\"image-20200913201627904\" />一个请求对应一个响应，以淘宝网为例，我们输入一个url，就会返回一个页面</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566129.png\" alt=\"image-20200913201929752\" /></p>\n<h2 id=\"创建项目\">创建项目</h2>\n<p>首先我们使用Goland创建一个Go项目</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566179.png\" alt=\"image-20200913202119089\" /></p>\n<p>创建完成后，打开命令窗口，输入下面的命令，创建一个依赖管理</p>\n<pre><code class=\"language-bash\">go mod init gin_demo\n\n</code></pre>\n<p>然后打开setting页面，勾选这个选项【不勾选会导致go.mod依赖爆红】</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566378.png\" alt=\"image-20200913210316077\" /></p>\n<p>我们创建一个main.go文件，然后使用go代码实现一个请求和响应</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;fmt&quot;\n	&quot;net/http&quot;\n)\n\n// http.ResponseWriter：代表响应，传递到前端的\n// *http.Request：表示请求，从前端传递过来的\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n	_, _ = fmt.Fprintln(w, &quot;hello Golang!&quot;);\n}\n\nfunc main() {\n	http.HandleFunc(&quot;/hello&quot;, sayHello)\n	err := http.ListenAndServe(&quot;:9090&quot;, nil)\n	if err != nil {\n		fmt.Println(&quot;http server failed, err:%v \\n&quot;, err)\n		return\n	}\n}\n\n</code></pre>\n<p>在浏览器访问如下地址</p>\n<pre><code class=\"language-bash\">http://localhost:9090/hello\n\n</code></pre>\n<p>就能打开我们的hello golang页面了</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566240.png\" alt=\"image-20200913203807251\" /></p>\n<p>我们可以给文字添加色彩</p>\n<pre><code class=\"language-bash\">// http.ResponseWriter：代表响应，传递到前端的\n// *http.Request：表示请求，从前端传递过来的\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n	_, _ = fmt.Fprintln(w, &quot;&lt;h1 style=\'color:red\'&gt;hello Golang!&lt;h1&gt;&quot;);\n}\n\n</code></pre>\n<p>然后重启后，在刷新</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566300.png\" alt=\"image-20200913203922973\" /></p>\n<p>我们还可以把里面的字符串放在一个文件里，我们定义一个 hello.html文件</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;title&gt;hello golang&lt;/title&gt;\n    &lt;body&gt;\n        &lt;h1 style=\'color:red\'&gt;\n            hello Golang!\n        &lt;/h1&gt;\n        &lt;h1&gt;\n            hello gin!\n        &lt;/h1&gt;\n        &lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1600011052622&amp;di=9aeee5de695a40c8d469f0c3980c2d48&amp;imgtype=0&amp;src=http%3A%2F%2Fa4.att.hudong.com%2F22%2F59%2F19300001325156131228593878903.jpg&quot;&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n\n</code></pre>\n<p>然后修改刚刚的main.go，使用 ioutil解析文件</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;fmt&quot;\n	&quot;io/ioutil&quot;\n	&quot;net/http&quot;\n)\n\n// http.ResponseWriter：代表响应，传递到前端的\n// *http.Request：表示请求，从前端传递过来的\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n	html, _ := ioutil.ReadFile(&quot;./template/hello.html&quot;)\n	_, _ = fmt.Fprintln(w, string(html));\n}\n\nfunc main() {\n	http.HandleFunc(&quot;/hello&quot;, sayHello)\n	err := http.ListenAndServe(&quot;:9090&quot;, nil)\n	if err != nil {\n		fmt.Println(&quot;http server failed, err:%v \\n&quot;, err)\n		return\n	}\n}\n\n</code></pre>\n<p>最后刷新我们的页面，就出来这样的效果了，这就是我们通过golang开发的一个Web页面</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566328.png\" alt=\"image-20200913204456513\" /></p>\n<h2 id=\"为什么要用框架\">为什么要用框架</h2>\n<p>我们通过上面的http包，就能够实现一个web的开发，那为什么还要用gin呢？</p>\n<p>其实框架的好处，就是别人帮我们搭建了一个舞台，同时提供了很多现成的轮子，让我们专注于业务的开发，同时让开发效率更高。</p>\n<h2 id=\"Gin框架介绍\">Gin框架介绍</h2>\n<p><code>Gin</code>是一个用Go语言编写的web框架。它是一个类似于 <code>martini</code>但拥有更好性能的API框架, 由于使用了 <code>httprouter</code>，速度提高了近40倍。 如果你是性能和高效的追求者, 你会爱上 <code>Gin</code>。</p>\n<p>Go世界里最流行的Web框架，<a href=\"https://github.com/gin-gonic/gin\">Github</a>上有 <code>32K+</code>star。 基于<a href=\"https://github.com/julienschmidt/httprouter\">httprouter</a>开发的Web框架。 <a href=\"https://gin-gonic.com/zh-cn/docs/\">中文文档</a>齐全，简单易用的轻量级框架。</p>\n<h2 id=\"Gin框架安装与使用\">Gin框架安装与使用</h2>\n<h3 id=\"安装\">安装</h3>\n<p>下载并安装 <code>Gin</code>:</p>\n<pre><code class=\"language-bash\">go get -u github.com/gin-gonic/gin\n\n</code></pre>\n<h3 id=\"第一个Gin示例-\">第一个Gin示例：</h3>\n<pre><code class=\"language-golang\">package main\n\nimport (\n	&quot;github.com/gin-gonic/gin&quot;\n)\n\nfunc main() {\n	// 创建一个默认的路由引擎\n	r := gin.Default()\n	// GET：请求方式；/hello：请求的路径\n	// 当客户端以GET方法请求/hello路径时，会执行后面的匿名函数\n	r.GET(&quot;/hello&quot;, func(c *gin.Context) {\n		// c.JSON：返回JSON格式的数据\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;Hello world!&quot;,\n		})\n	})\n	// 启动HTTP服务，默认在0.0.0.0:8080启动服务\n	r.Run()\n}\n\n</code></pre>\n<p>将上面的代码保存并编译执行，然后使用浏览器打开 <code>127.0.0.1:8080/hello</code>就能看到一串JSON字符串。</p>\n<h2 id=\"RESTful-API\">RESTful API</h2>\n<p>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”或“表现层状态转化”。</p>\n<p>推荐阅读<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\">阮一峰 理解RESTful架构</a></p>\n<p>简单来说，REST的含义就是客户端与Web服务器之间进行交互的时候，使用HTTP协议中的4个请求方法代表不同的动作。</p>\n<ul>\n<li><code>GET</code>用来获取资源</li>\n<li><code>POST</code>用来新建资源</li>\n<li><code>PUT</code>用来更新资源</li>\n<li><code>DELETE</code>用来删除资源。</li>\n</ul>\n<p>只要API程序遵循了REST风格，那就可以称其为RESTful API。目前在前后端分离的架构中，前后端基本都是通过RESTful API来进行交互。</p>\n<p>例如，我们现在要编写一个管理书籍的系统，我们可以查询对一本书进行查询、创建、更新和删除等操作，我们在编写程序的时候就要设计客户端浏览器与我们Web服务端交互的方式和路径。按照经验我们通常会设计成如下模式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">请求方法</th>\n<th align=\"center\">URL</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">GET</td>\n<td align=\"center\">/book</td>\n<td align=\"center\">查询书籍信息</td>\n</tr>\n<tr>\n<td align=\"center\">POST</td>\n<td align=\"center\">/create_book</td>\n<td align=\"center\">创建书籍记录</td>\n</tr>\n<tr>\n<td align=\"center\">POST</td>\n<td align=\"center\">/update_book</td>\n<td align=\"center\">更新书籍信息</td>\n</tr>\n<tr>\n<td align=\"center\">POST</td>\n<td align=\"center\">/delete_book</td>\n<td align=\"center\">删除书籍信息</td>\n</tr>\n</tbody>\n</table>\n<p>同样的需求我们按照RESTful API设计如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">请求方法</th>\n<th align=\"center\">URL</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">GET</td>\n<td align=\"center\">/book</td>\n<td align=\"center\">查询书籍信息</td>\n</tr>\n<tr>\n<td align=\"center\">POST</td>\n<td align=\"center\">/book</td>\n<td align=\"center\">创建书籍记录</td>\n</tr>\n<tr>\n<td align=\"center\">PUT</td>\n<td align=\"center\">/book</td>\n<td align=\"center\">更新书籍信息</td>\n</tr>\n<tr>\n<td align=\"center\">DELETE</td>\n<td align=\"center\">/book</td>\n<td align=\"center\">删除书籍信息</td>\n</tr>\n</tbody>\n</table>\n<p>Gin框架支持开发RESTful API的开发。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	r.GET(&quot;/book&quot;, func(c *gin.Context) {\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;GET&quot;,\n		})\n	})\n\n	r.POST(&quot;/book&quot;, func(c *gin.Context) {\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;POST&quot;,\n		})\n	})\n\n	r.PUT(&quot;/book&quot;, func(c *gin.Context) {\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;PUT&quot;,\n		})\n	})\n\n	r.DELETE(&quot;/book&quot;, func(c *gin.Context) {\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;DELETE&quot;,\n		})\n	})\n  \n   	// 启动HTTP服务，默认在0.0.0.0:8080启动服务\n	r.Run()\n}\n\n</code></pre>\n<p>开发RESTful API的时候我们通常使用<a href=\"https://www.getpostman.com/\">Postman</a>来作为客户端的测试工具。</p>\n<h2 id=\"Gin渲染\">Gin渲染</h2>\n<h3 id=\"HTML渲染\">HTML渲染</h3>\n<p>我们首先定义一个存放模板文件的 <code>templates</code>文件夹，然后在其内部按照业务分别定义一个 <code>posts</code>文件夹和一个 <code>users</code>文件夹。 <code>posts/index.html</code>文件的内容如下：</p>\n<pre><code class=\"language-template\">{{define &quot;posts/index.html&quot;}}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;posts/index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {{.title}}\n&lt;/body&gt;\n&lt;/html&gt;\n{{end}}\n\n</code></pre>\n<p><code>users/index.html</code>文件的内容如下：</p>\n<pre><code class=\"language-template\">{{define &quot;users/index.html&quot;}}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;users/index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {{.title}}\n&lt;/body&gt;\n&lt;/html&gt;\n{{end}}\n\n</code></pre>\n<p>Gin框架中使用 <code>LoadHTMLGlob()</code>或者 <code>LoadHTMLFiles()</code>方法进行HTML模板渲染。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	r.LoadHTMLGlob(&quot;templates/**/*&quot;)\n	//r.LoadHTMLFiles(&quot;templates/posts/index.html&quot;, &quot;templates/users/index.html&quot;)\n	r.GET(&quot;/posts/index&quot;, func(c *gin.Context) {\n		c.HTML(http.StatusOK, &quot;posts/index.html&quot;, gin.H{\n			&quot;title&quot;: &quot;posts/index&quot;,\n		})\n	})\n\n	r.GET(&quot;users/index&quot;, func(c *gin.Context) {\n		c.HTML(http.StatusOK, &quot;users/index.html&quot;, gin.H{\n			&quot;title&quot;: &quot;users/index&quot;,\n		})\n	})\n\n	r.Run(&quot;:8080&quot;)\n}\n\n</code></pre>\n<h3 id=\"自定义模板函数\">自定义模板函数</h3>\n<p>定义一个不转义相应内容的 <code>safe</code>模板函数如下：</p>\n<pre><code class=\"language-go\">func main() {\n	router := gin.Default()\n	router.SetFuncMap(template.FuncMap{\n		&quot;safe&quot;: func(str string) template.HTML{\n			return template.HTML(str)\n		},\n	})\n	router.LoadHTMLFiles(&quot;./index.tmpl&quot;)\n\n	router.GET(&quot;/index&quot;, func(c *gin.Context) {\n		c.HTML(http.StatusOK, &quot;index.tmpl&quot;, &quot;&lt;a href=\'https://liwenzhou.com\'&gt;李文周的博客&lt;/a&gt;&quot;)\n	})\n\n	router.Run(&quot;:8080&quot;)\n}\n\n</code></pre>\n<p>在 <code>index.tmpl</code>中使用定义好的 <code>safe</code>模板函数：</p>\n<pre><code class=\"language-template\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;title&gt;修改模板引擎的标识符&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;{{ . | safe }}&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>\n<p>为了让index.tmpl文件有语法显示，我们还需要配置一下</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566450.png\" alt=\"image-20200913213156919\" /></p>\n<p>然后我们加入 *.tmpl，保存即可</p>\n<h3 id=\"静态文件处理\">静态文件处理</h3>\n<p>当我们渲染的HTML文件中引用了静态文件时，我们只需要按照以下方式在渲染页面前调用 <code>gin.Static</code>方法即可。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	r.Static(&quot;/static&quot;, &quot;./static&quot;)\n	r.LoadHTMLGlob(&quot;templates/**/*&quot;)\n   // ...\n	r.Run(&quot;:8080&quot;)\n}\n\n</code></pre>\n<h3 id=\"使用模板继承\">使用模板继承</h3>\n<p>Gin框架默认都是使用单模板，如果需要使用 <code>block template</code>功能，可以通过 <code>&quot;github.com/gin-contrib/multitemplate&quot;</code>库实现，具体示例如下：</p>\n<p>首先，假设我们项目目录下的templates文件夹下有以下模板文件，其中 <code>home.tmpl</code>和 <code>index.tmpl</code>继承了 <code>base.tmpl</code>：</p>\n<pre><code class=\"language-bash\">templates\n├── includes\n│   ├── home.tmpl\n│   └── index.tmpl\n├── layouts\n│   └── base.tmpl\n└── scripts.tmpl\n\n</code></pre>\n<p>然后我们定义一个 <code>loadTemplates</code>函数如下：</p>\n<pre><code class=\"language-go\">func loadTemplates(templatesDir string) multitemplate.Renderer {\n	r := multitemplate.NewRenderer()\n	layouts, err := filepath.Glob(templatesDir + &quot;/layouts/*.tmpl&quot;)\n	if err != nil {\n		panic(err.Error())\n	}\n	includes, err := filepath.Glob(templatesDir + &quot;/includes/*.tmpl&quot;)\n	if err != nil {\n		panic(err.Error())\n	}\n	// 为layouts/和includes/目录生成 templates map\n	for _, include := range includes {\n		layoutCopy := make([]string, len(layouts))\n		copy(layoutCopy, layouts)\n		files := append(layoutCopy, include)\n		r.AddFromFiles(filepath.Base(include), files...)\n	}\n	return r\n}\n\n</code></pre>\n<p>我们在 <code>main</code>函数中</p>\n<pre><code class=\"language-go\">func indexFunc(c *gin.Context){\n	c.HTML(http.StatusOK, &quot;index.tmpl&quot;, nil)\n}\n\nfunc homeFunc(c *gin.Context){\n	c.HTML(http.StatusOK, &quot;home.tmpl&quot;, nil)\n}\n\nfunc main(){\n	r := gin.Default()\n	r.HTMLRender = loadTemplates(&quot;./templates&quot;)\n	r.GET(&quot;/index&quot;, indexFunc)\n	r.GET(&quot;/home&quot;, homeFunc)\n	r.Run()\n}\n\n</code></pre>\n<h3 id=\"补充文件路径处理\">补充文件路径处理</h3>\n<p>关于模板文件和静态文件的路径，我们需要根据公司/项目的要求进行设置。可以使用下面的函数获取当前执行程序的路径。</p>\n<pre><code class=\"language-go\">func getCurrentPath() string {\n	if ex, err := os.Executable(); err == nil {\n		return filepath.Dir(ex)\n	}\n	return &quot;./&quot;\n}\n\n</code></pre>\n<h3 id=\"JSON渲染\">JSON渲染</h3>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n\n	// gin.H 是map[string]interface{}的缩写\n	r.GET(&quot;/someJSON&quot;, func(c *gin.Context) {\n		// 方式一：自己拼接JSON\n		c.JSON(http.StatusOK, gin.H{&quot;message&quot;: &quot;Hello world!&quot;})\n	})\n	r.GET(&quot;/moreJSON&quot;, func(c *gin.Context) {\n		// 方法二：使用结构体\n		var msg struct {\n			Name    string `json:&quot;user&quot;`\n			Message string\n			Age     int\n		}\n		msg.Name = &quot;小王子&quot;\n		msg.Message = &quot;Hello world!&quot;\n		msg.Age = 18\n		c.JSON(http.StatusOK, msg)\n	})\n	r.Run(&quot;:8080&quot;)\n}\n\n</code></pre>\n<h3 id=\"XML渲染\">XML渲染</h3>\n<p>注意需要使用具名的结构体类型。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	// gin.H 是map[string]interface{}的缩写\n	r.GET(&quot;/someXML&quot;, func(c *gin.Context) {\n		// 方式一：自己拼接JSON\n		c.XML(http.StatusOK, gin.H{&quot;message&quot;: &quot;Hello world!&quot;})\n	})\n	r.GET(&quot;/moreXML&quot;, func(c *gin.Context) {\n		// 方法二：使用结构体\n		type MessageRecord struct {\n			Name    string\n			Message string\n			Age     int\n		}\n		var msg MessageRecord\n		msg.Name = &quot;小王子&quot;\n		msg.Message = &quot;Hello world!&quot;\n		msg.Age = 18\n		c.XML(http.StatusOK, msg)\n	})\n	r.Run(&quot;:8080&quot;)\n}\n\n</code></pre>\n<h3 id=\"YMAL渲染\">YMAL渲染</h3>\n<pre><code class=\"language-go\">r.GET(&quot;/someYAML&quot;, func(c *gin.Context) {\n	c.YAML(http.StatusOK, gin.H{&quot;message&quot;: &quot;ok&quot;, &quot;status&quot;: http.StatusOK})\n})\n\n</code></pre>\n<h3 id=\"protobuf渲染\">protobuf渲染</h3>\n<pre><code class=\"language-go\">r.GET(&quot;/someProtoBuf&quot;, func(c *gin.Context) {\n	reps := []int64{int64(1), int64(2)}\n	label := &quot;test&quot;\n	// protobuf 的具体定义写在 testdata/protoexample 文件中。\n	data := &amp;protoexample.Test{\n		Label: &amp;label,\n		Reps:  reps,\n	}\n	// 请注意，数据在响应中变为二进制数据\n	// 将输出被 protoexample.Test protobuf 序列化了的数据\n	c.ProtoBuf(http.StatusOK, data)\n})\n\n</code></pre>\n<h2 id=\"获取参数\">获取参数</h2>\n<h3 id=\"获取querystring参数\">获取querystring参数</h3>\n<p><code>querystring</code>指的是URL中 <code>?</code>后面携带的参数，例如：<code>/user/search?username=小王子&amp;address=沙河</code>。 获取请求的querystring参数的方法如下：</p>\n<pre><code class=\"language-go\">func main() {\n	//Default返回一个默认的路由引擎\n	r := gin.Default()\n	r.GET(&quot;/user/search&quot;, func(c *gin.Context) {\n        // 可以添加默认值\n		username := c.DefaultQuery(&quot;username&quot;, &quot;小王子&quot;)\n		//username := c.Query(&quot;username&quot;)\n		address := c.Query(&quot;address&quot;)\n		//输出json结果给调用方\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;:  &quot;ok&quot;,\n			&quot;username&quot;: username,\n			&quot;address&quot;:  address,\n		})\n	})\n	r.Run()\n}\n\n</code></pre>\n<p>我们输入对应的URL，就能获取到对应的参数了</p>\n<pre><code class=\"language-bash\">http://localhost:9090/web?username=小王子&amp;address=沙河\n\n</code></pre>\n<h3 id=\"获取form参数\">获取form参数</h3>\n<p>请求的数据通过form表单来提交，例如向 <code>/user/search</code>发送一个POST请求，获取请求数据的方式如下：</p>\n<pre><code class=\"language-go\">func main() {\n	//Default返回一个默认的路由引擎\n	r := gin.Default()\n	r.POST(&quot;/user/search&quot;, func(c *gin.Context) {\n		// DefaultPostForm取不到值时会返回指定的默认值\n		//username := c.DefaultPostForm(&quot;username&quot;, &quot;小王子&quot;)\n		username := c.PostForm(&quot;username&quot;)\n		address := c.PostForm(&quot;address&quot;)\n		//输出json结果给调用方\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;:  &quot;ok&quot;,\n			&quot;username&quot;: username,\n			&quot;address&quot;:  address,\n		})\n	})\n	r.Run(&quot;:8080&quot;)\n}\n\n</code></pre>\n<h3 id=\"获取path参数\">获取path参数</h3>\n<p>请求的参数通过URL路径传递，例如：<code>/user/search/小王子/沙河</code>。 获取请求URL路径中的参数的方式如下。</p>\n<pre><code class=\"language-go\">func main() {\n	//Default返回一个默认的路由引擎\n	r := gin.Default()\n	r.GET(&quot;/user/search/:username/:address&quot;, func(c *gin.Context) {\n		username := c.Param(&quot;username&quot;)\n		address := c.Param(&quot;address&quot;)\n		//输出json结果给调用方\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;:  &quot;ok&quot;,\n			&quot;username&quot;: username,\n			&quot;address&quot;:  address,\n		})\n	})\n\n	r.Run(&quot;:8080&quot;)\n}\n\n</code></pre>\n<h3 id=\"参数绑定\">参数绑定</h3>\n<p>为了能够更方便的获取请求相关参数，提高开发效率，我们可以基于请求的 <code>Content-Type</code>识别请求数据类型并利用反射机制自动提取请求中 <code>QueryString</code>、<code>form表单</code>、<code>JSON</code>、<code>XML</code>等参数到结构体中。 下面的示例代码演示了 <code>.ShouldBind()</code>强大的功能，它能够基于请求自动提取 <code>JSON</code>、<code>form表单</code>和 <code>QueryString</code>类型的数据，并把值绑定到指定的结构体对象。</p>\n<pre><code class=\"language-go\">// Binding from JSON\ntype Login struct {\n	User     string `form:&quot;user&quot; json:&quot;user&quot; binding:&quot;required&quot;`\n	Password string `form:&quot;password&quot; json:&quot;password&quot; binding:&quot;required&quot;`\n}\n\nfunc main() {\n	router := gin.Default()\n\n	// 绑定JSON的示例 ({&quot;user&quot;: &quot;q1mi&quot;, &quot;password&quot;: &quot;123456&quot;})\n	router.POST(&quot;/loginJSON&quot;, func(c *gin.Context) {\n		var login Login\n\n		if err := c.ShouldBind(&amp;login); err == nil {\n			fmt.Printf(&quot;login info:%#v\\n&quot;, login)\n			c.JSON(http.StatusOK, gin.H{\n				&quot;user&quot;:     login.User,\n				&quot;password&quot;: login.Password,\n			})\n		} else {\n			c.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: err.Error()})\n		}\n	})\n\n	// 绑定form表单示例 (user=q1mi&amp;password=123456)\n	router.POST(&quot;/loginForm&quot;, func(c *gin.Context) {\n		var login Login\n		// ShouldBind()会根据请求的Content-Type自行选择绑定器\n		if err := c.ShouldBind(&amp;login); err == nil {\n			c.JSON(http.StatusOK, gin.H{\n				&quot;user&quot;:     login.User,\n				&quot;password&quot;: login.Password,\n			})\n		} else {\n			c.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: err.Error()})\n		}\n	})\n\n	// 绑定QueryString示例 (/loginQuery?user=q1mi&amp;password=123456)\n	router.GET(&quot;/loginForm&quot;, func(c *gin.Context) {\n		var login Login\n		// ShouldBind()会根据请求的Content-Type自行选择绑定器\n		if err := c.ShouldBind(&amp;login); err == nil {\n			c.JSON(http.StatusOK, gin.H{\n				&quot;user&quot;:     login.User,\n				&quot;password&quot;: login.Password,\n			})\n		} else {\n			c.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: err.Error()})\n		}\n	})\n\n	// Listen and serve on 0.0.0.0:8080\n	router.Run(&quot;:8080&quot;)\n}\n\n</code></pre>\n<p><code>ShouldBind</code>会按照下面的顺序解析请求中的数据完成绑定：</p>\n<ol>\n<li>如果是<code>GET</code> 请求，只使用<code>Form</code> 绑定引擎（<code>query</code>）。</li>\n<li>如果是<code>POST</code> 请求，首先检查<code>content-type</code> 是否为<code>JSON</code> 或<code>XML</code>，然后再使用<code>Form</code>（<code>form-data</code>）。</li>\n</ol>\n<h2 id=\"文件上传\">文件上传</h2>\n<h3 id=\"单个文件上传\">单个文件上传</h3>\n<p>文件上传前端页面代码：</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;title&gt;上传文件示例&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;f1&quot;&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>\n<p>后端gin框架部分代码：</p>\n<pre><code class=\"language-go\">func main() {\n	router := gin.Default()\n	// 处理multipart forms提交文件时默认的内存限制是32 MiB\n	// 可以通过下面的方式修改\n	// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB\n	router.POST(&quot;/upload&quot;, func(c *gin.Context) {\n		// 单个文件\n		file, err := c.FormFile(&quot;f1&quot;)\n		if err != nil {\n			c.JSON(http.StatusInternalServerError, gin.H{\n				&quot;message&quot;: err.Error(),\n			})\n			return\n		}\n\n		log.Println(file.Filename)\n		dst := fmt.Sprintf(&quot;C:/tmp/%s&quot;, file.Filename)\n		// 上传文件到指定的目录\n		c.SaveUploadedFile(file, dst)\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;: fmt.Sprintf(&quot;\'%s\' uploaded!&quot;, file.Filename),\n		})\n	})\n	router.Run()\n}\n\n</code></pre>\n<h3 id=\"多个文件上传\">多个文件上传</h3>\n<pre><code class=\"language-go\">func main() {\n	router := gin.Default()\n	// 处理multipart forms提交文件时默认的内存限制是32 MiB\n	// 可以通过下面的方式修改\n	// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB\n	router.POST(&quot;/upload&quot;, func(c *gin.Context) {\n		// Multipart form\n		form, _ := c.MultipartForm()\n		files := form.File[&quot;file&quot;]\n\n		for index, file := range files {\n			log.Println(file.Filename)\n			dst := fmt.Sprintf(&quot;C:/tmp/%s_%d&quot;, file.Filename, index)\n			// 上传文件到指定的目录\n			c.SaveUploadedFile(file, dst)\n		}\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;: fmt.Sprintf(&quot;%d files uploaded!&quot;, len(files)),\n		})\n	})\n	router.Run()\n}\n\n</code></pre>\n<h2 id=\"重定向\">重定向</h2>\n<h3 id=\"HTTP重定向\">HTTP重定向</h3>\n<p>HTTP 重定向很容易。 内部、外部重定向均支持。</p>\n<pre><code class=\"language-go\">r.GET(&quot;/test&quot;, func(c *gin.Context) {\n	c.Redirect(http.StatusMovedPermanently, &quot;http://www.sogo.com/&quot;)\n})\n\n</code></pre>\n<h3 id=\"路由重定向\">路由重定向</h3>\n<p>路由重定向，使用 <code>HandleContext</code>：</p>\n<pre><code class=\"language-go\">r.GET(&quot;/test&quot;, func(c *gin.Context) {\n    // 指定重定向的URL\n    c.Request.URL.Path = &quot;/test2&quot;\n    r.HandleContext(c)\n})\nr.GET(&quot;/test2&quot;, func(c *gin.Context) {\n    c.JSON(http.StatusOK, gin.H{&quot;hello&quot;: &quot;world&quot;})\n})\n\n</code></pre>\n<h2 id=\"Gin路由\">Gin路由</h2>\n<h3 id=\"普通路由\">普通路由</h3>\n<pre><code class=\"language-go\">r.GET(&quot;/index&quot;, func(c *gin.Context) {...})\nr.GET(&quot;/login&quot;, func(c *gin.Context) {...})\nr.POST(&quot;/login&quot;, func(c *gin.Context) {...})\n\n</code></pre>\n<p>此外，还有一个可以匹配所有请求方法的 <code>Any</code>方法如下：</p>\n<pre><code class=\"language-go\">r.Any(&quot;/test&quot;, func(c *gin.Context) {...})\n\n</code></pre>\n<p>为没有配置处理函数的路由添加处理程序，默认情况下它返回404代码，下面的代码为没有匹配到路由的请求都返回 <code>views/404.html</code>页面。</p>\n<pre><code class=\"language-go\">r.NoRoute(func(c *gin.Context) {\n		c.HTML(http.StatusNotFound, &quot;views/404.html&quot;, nil)\n	})\n\n</code></pre>\n<h3 id=\"路由组\">路由组</h3>\n<p>我们可以将拥有共同URL前缀的路由划分为一个路由组。习惯性一对 <code>{}</code>包裹同组的路由，这只是为了看着清晰，你用不用 <code>{}</code>包裹功能上没什么区别。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	userGroup := r.Group(&quot;/user&quot;)\n	{\n		userGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n		userGroup.GET(&quot;/login&quot;, func(c *gin.Context) {...})\n		userGroup.POST(&quot;/login&quot;, func(c *gin.Context) {...})\n\n	}\n	shopGroup := r.Group(&quot;/shop&quot;)\n	{\n		shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n		shopGroup.GET(&quot;/cart&quot;, func(c *gin.Context) {...})\n		shopGroup.POST(&quot;/checkout&quot;, func(c *gin.Context) {...})\n	}\n	r.Run()\n}\n\n</code></pre>\n<p>路由组也是支持嵌套的，例如：</p>\n<pre><code class=\"language-go\">shopGroup := r.Group(&quot;/shop&quot;)\n	{\n		shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n		shopGroup.GET(&quot;/cart&quot;, func(c *gin.Context) {...})\n		shopGroup.POST(&quot;/checkout&quot;, func(c *gin.Context) {...})\n		// 嵌套路由组\n		xx := shopGroup.Group(&quot;xx&quot;)\n		xx.GET(&quot;/oo&quot;, func(c *gin.Context) {...})\n	}\n\n</code></pre>\n<p>通常我们将路由分组用在划分业务逻辑或划分API版本时。</p>\n<h3 id=\"路由原理\">路由原理</h3>\n<p>Gin框架中的路由使用的是<a href=\"https://github.com/julienschmidt/httprouter\">httprouter</a>这个库。</p>\n<p>其基本原理就是构造一个路由地址的前缀树。</p>\n<h2 id=\"Gin中间件\">Gin中间件</h2>\n<p>Gin框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。</p>\n<h3 id=\"定义中间件\">定义中间件</h3>\n<p>Gin中的中间件必须是一个 <code>gin.HandlerFunc</code>类型。例如我们像下面的代码一样定义一个统计请求耗时的中间件。</p>\n<pre><code class=\"language-go\">// StatCost 是一个统计耗时请求耗时的中间件\nfunc StatCost() gin.HandlerFunc {\n	return func(c *gin.Context) {\n		start := time.Now()\n		c.Set(&quot;name&quot;, &quot;小王子&quot;) // 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值\n		// 调用该请求的剩余处理程序\n		c.Next()\n		// 不调用该请求的剩余处理程序\n		// c.Abort()\n		// 计算耗时\n		cost := time.Since(start)\n		log.Println(cost)\n	}\n}\n\n</code></pre>\n<h3 id=\"注册中间件\">注册中间件</h3>\n<p>在gin框架中，我们可以为每个路由添加任意数量的中间件。</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566511.png\" alt=\"image-20200917210942305\" /></p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566528.png\" alt=\"image-20200917211033323\" /></p>\n<p>中间的这个通过 Abort() 可以阻止执行</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821566589.png\" alt=\"image-20200917211259531\" /></p>\n<h4 id=\"为全局路由注册\">为全局路由注册</h4>\n<pre><code class=\"language-go\">func main() {\n	// 新建一个没有任何默认中间件的路由\n	r := gin.New()\n	// 注册一个全局中间件\n	r.Use(StatCost())\n\n	r.GET(&quot;/test&quot;, func(c *gin.Context) {\n		name := c.MustGet(&quot;name&quot;).(string) // 从上下文取值\n		log.Println(name)\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;: &quot;Hello world!&quot;,\n		})\n	})\n	r.Run()\n}\n\n</code></pre>\n<h4 id=\"为某个路由单独注册\">为某个路由单独注册</h4>\n<pre><code class=\"language-go\">// 给/test2路由单独注册中间件（可注册多个）\n	r.GET(&quot;/test2&quot;, StatCost(), func(c *gin.Context) {\n		name := c.MustGet(&quot;name&quot;).(string) // 从上下文取值\n		log.Println(name)\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;: &quot;Hello world!&quot;,\n		})\n	})\n\n</code></pre>\n<h4 id=\"为路由组注册中间件\">为路由组注册中间件</h4>\n<p>为路由组注册中间件有以下两种写法。</p>\n<p>写法1：</p>\n<pre><code class=\"language-go\">shopGroup := r.Group(&quot;/shop&quot;, StatCost())\n{\n    shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n    ...\n}\n\n</code></pre>\n<p>写法2：</p>\n<pre><code class=\"language-go\">shopGroup := r.Group(&quot;/shop&quot;)\nshopGroup.Use(StatCost())\n{\n    shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n    ...\n}\n\n</code></pre>\n<h3 id=\"中间件注意事项\">中间件注意事项</h3>\n<h4 id=\"gin默认中间件\">gin默认中间件</h4>\n<p><code>gin.Default()</code>默认使用了 <code>Logger</code>和 <code>Recovery</code>中间件，其中：</p>\n<ul>\n<li><code>Logger</code>中间件将日志写入<code>gin.DefaultWriter</code>，即使配置了<code>GIN_MODE=release</code>。</li>\n<li><code>Recovery</code>中间件会recover任何<code>panic</code>。如果有panic的话，会写入500响应码。</li>\n</ul>\n<p>如果不想使用上面两个默认的中间件，可以使用 <code>gin.New()</code>新建一个没有任何默认中间件的路由。</p>\n<h4 id=\"gin中间件中使用goroutine\">gin中间件中使用goroutine</h4>\n<p>当在中间件或 <code>handler</code>中启动新的 <code>goroutine</code>时，<strong>不能使用</strong>原始的上下文（c *gin.Context），必须使用其只读副本（<code>c.Copy()</code>）。</p>\n<h2 id=\"运行多个服务\">运行多个服务</h2>\n<p>我们可以在多个端口启动服务，例如：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;log&quot;\n	&quot;net/http&quot;\n	&quot;time&quot;\n\n	&quot;github.com/gin-gonic/gin&quot;\n	&quot;golang.org/x/sync/errgroup&quot;\n)\n\nvar (\n	g errgroup.Group\n)\n\nfunc router01() http.Handler {\n	e := gin.New()\n	e.Use(gin.Recovery())\n	e.GET(&quot;/&quot;, func(c *gin.Context) {\n		c.JSON(\n			http.StatusOK,\n			gin.H{\n				&quot;code&quot;:  http.StatusOK,\n				&quot;error&quot;: &quot;Welcome server 01&quot;,\n			},\n		)\n	})\n\n	return e\n}\n\nfunc router02() http.Handler {\n	e := gin.New()\n	e.Use(gin.Recovery())\n	e.GET(&quot;/&quot;, func(c *gin.Context) {\n		c.JSON(\n			http.StatusOK,\n			gin.H{\n				&quot;code&quot;:  http.StatusOK,\n				&quot;error&quot;: &quot;Welcome server 02&quot;,\n			},\n		)\n	})\n\n	return e\n}\n\nfunc main() {\n	server01 := &amp;http.Server{\n		Addr:         &quot;:8080&quot;,\n		Handler:      router01(),\n		ReadTimeout:  5 * time.Second,\n		WriteTimeout: 10 * time.Second,\n	}\n\n	server02 := &amp;http.Server{\n		Addr:         &quot;:8081&quot;,\n		Handler:      router02(),\n		ReadTimeout:  5 * time.Second,\n		WriteTimeout: 10 * time.Second,\n	}\n   // 借助errgroup.Group或者自行开启两个goroutine分别启动两个服务\n	g.Go(func() error {\n		return server01.ListenAndServe()\n	})\n\n	g.Go(func() error {\n		return server02.ListenAndServe()\n	})\n\n	if err := g.Wait(); err != nil {\n		log.Fatal(err)\n	}\n}\n\n</code></pre>\n','7e0e93ea6cdb44ae92e58f48e6496ed7',1,0,'ffe1c088d99304a0c3e40e8421ccffbd',0,'2020-09-23 08:39:29','2020-10-07 16:28:33','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','db0d64ea7df409de5d2d747927cfa1a5',0,'1',0,1,0,NULL,4),('34eb1b938fa734a52ce0f18a1b849685','【阿里云】云服务器双11狂欢特惠，1核2G 最低仅需84.97元/年 ','【阿里云】云服务器双11狂欢特惠，1核2G 最低仅需84.97元/年 ','<p>【阿里云】云服务器双11狂欢特惠，1核2G 最低仅需84.97元/年&nbsp; <a href=\"https://www.aliyun.com/1111/home?userCode=w7aungxw\" target=\"_blank\">点我传送</a></p>\n','5626932d452c2ad863d9b3cb0b69d22d',6,0,'0051cb722bb1bd89e1ec57b5f970c287',1,'2020-09-01 11:09:10','2021-02-06 16:20:18','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','337806254f9c42999043de5c5ee09e77',2,'1',2,1,1,'https://www.aliyun.com/1111/home?userCode=w7aungxw',5),('3be04b35f76468aa2e5990afbfc9932a','测试波尔克2','测试博客2','<p>测试博客2</p>\n','5626932d452c2ad863d9b3cb0b69d22d',0,0,'dca06b7785df4434091e70a0527fd9a4',0,'2020-10-13 09:12:03','2020-10-13 09:27:36','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,6),('4137035efd12042f37b05450f095dd8f','go测试','go测试','<p>go测试</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;context&quot;\n	&quot;fmt&quot;\n	&quot;go.etcd.io/etcd/clientv3&quot;\n	&quot;time&quot;\n)\n\nfunc main() {\n	cli, err := clientv3.New(clientv3.Config {\n		Endpoints: []string{&quot;127.0.0.1:2379&quot;}, // etcd的节点，可以传入多个\n		DialTimeout: 5*time.Second, // 连接超时时间\n	})\n\n	if err != nil {\n		fmt.Printf(&quot;connect to etcd failed, err: %v \\n&quot;, err)\n		return\n	}\n	fmt.Println(&quot;connect to etcd success&quot;)\n\n	// 延迟关闭\n	defer cli.Close()\n\n	// put操作  设置1秒超时\n	ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n	_, err = cli.Put(ctx, &quot;moxi&quot;, &quot;lalala&quot;)\n	cancel()\n	if err != nil {\n		fmt.Printf(&quot;put to etcd failed, err:%v \\n&quot;, err)\n		return\n	}\n\n	// get操作，设置1秒超时\n	ctx, cancel = context.WithTimeout(context.Background(), time.Second)\n	resp, err := cli.Get(ctx, &quot;q1mi&quot;)\n	cancel()\n	if err != nil {\n		fmt.Printf(&quot;get from etcd failed, err:%v \\n&quot;, err)\n		return\n	}\n	fmt.Println(resp)\n}\n</code></pre>\n','5626932d452c2ad863d9b3cb0b69d22d',1,0,'dca06b7785df4434091e70a0527fd9a4',0,'2020-09-11 18:28:57','2020-09-14 10:33:02','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,7),('635fc430e3378403a7d3f1e2a4e726a9','测试','测试','<ul>\n	<li>不错</li>\n	<li>代办事项</li>\n	<li>代办事项三</li>\n</ul>\n\n<h1>测试</h1>\n\n<p>今天是个好日志</p>\n','5626932d452c2ad863d9b3cb0b69d22d',4,0,'5fae676476807d3e821423ffbc4583ef',1,'2020-10-17 15:02:23','2020-12-11 16:02:47','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,8),('7135efc7f536769efd0d0483c687ba07','蘑菇博客Sentinel安装指南','蘑菇博客Sentinel安装指南','<h1>蘑菇博客Sentinel安装指南</h1>\n\n<h2>前言</h2>\n\n<p>Sentinel被称为分布式系统的流量防卫兵，相当于Hystrix</p>\n\n<p>Hystrix存在的问题</p>\n\n<ul>\n	<li>需要我们程序员自己手工搭建监控平台</li>\n	<li>没有一套web界面可以给我们进行更加细粒度化的配置，流量控制，速率控制，服务熔断，服务降级。。</li>\n</ul>\n\n<p>这个时候Sentinel运营而生</p>\n\n<ul>\n	<li>单独一个组件，可以独立出来</li>\n	<li>直接界面化的细粒度统一配置</li>\n</ul>\n\n<p>更详细的介绍可以参考这篇博客，这里只是讲解一下Sentinel的安装过程</p>\n\n<p><a href=\"http://moguit.cn/#/info?blogUid=408e9c889ebf96a66af2adfdc258ba5f\">【SpringCloud】使用Sentinel实现熔断和限流</a></p>\n\n<h2>安装Sentinel</h2>\n\n<p>首先我们到Sentinel的<a href=\"https://github.com/alibaba/Sentinel/releases\">Github官网</a>，下载对应的jar包</p>\n\n<p><img alt=\"image-20200814152203586\" src=\"http://image.moguit.cn/a5b21f63ab4e4d03bdb4ca5cbd58a784\" /></p>\n\n<p>下载完成后，放到我们的Sentinel文件夹下</p>\n\n<p><img alt=\"image-20200814152301259\" src=\"http://image.moguit.cn/ee9315ea26c2415a8f473f840951a1ec\" /></p>\n\n<p>我们可以通过 java -jar命令来启动，但是每次输入命令也挺麻烦的，因此我们可以制作一个bat脚本，点击启动</p>\n\n<p>我们创建一个startup.bat脚本，然后写入以下内容，指定端口号为 8070</p>\n\n<pre>\n<code class=\"language-bash\">start java -jar sentinel-dashboard-1.6.3.jar --server.port=8070\n\n</code></pre>\n\n<p><img alt=\"image-20200814152808028\" src=\"http://image.moguit.cn/8b696ca582024c0da84ba15d759d658d\" /></p>\n\n<p>然后我们输入URL： http://localhost:8070/，然后输入默认的账号和密码</p>\n\n<blockquote>\n<p>账号：sentinel</p>\n\n<p>密码：sentinel</p>\n</blockquote>\n\n<p><img alt=\"image-20200814152900162\" src=\"http://image.moguit.cn/47be08b668284e50b04ab9eef81d5beb\" /></p>\n\n<p>进入后，因为我们的项目还没有启动，所以看不到对应的配置信息</p>\n\n<p><img alt=\"image-20200814153013010\" src=\"http://image.moguit.cn/56e18bf430204fc7b13886eabe774c87\" /></p>\n\n<p>到这里为止，Sentinel流控就已经安装完成了，后续的操作我们可以参考下面的博客进行</p>\n\n<p><a href=\"http://moguit.cn/#/info?blogUid=082ca226cf2e4103b0ffa6e6c13d7b14\">window环境下配置蘑菇博客环境</a></p>\n\n<blockquote>\n<p>因为我们将Eureka替换成Nacos，所以我们只需要启动服务为</p>\n\n<p>mogu-sms、mogu-picture、mogu-admin、mogu-web</p>\n</blockquote>\n\n<p><img alt=\"image-20200814154038280\" src=\"http://image.moguit.cn/18c469a48e104b08b7aec0629a02a1ed\" /></p>\n\n<p>然后在启动前端服务后，再次查看Sentinel，我们就看到了三个微服务被监控了</p>\n\n<p><img alt=\"image-20200814154404812\" src=\"http://image.moguit.cn/12ffd3a1805e4224acc546edf4d3f8f3\" /></p>\n\n<p>然后我们打开 mogu-web，点击系统规则，然后新增系统规则</p>\n\n<p><img alt=\"image-20200814154515420\" src=\"http://image.moguit.cn/9920ddf718cd4388958f3a38953fd128\" /></p>\n\n<p>我们设置一个入口QPS为 30，也就是每秒30个请求</p>\n\n<p><img alt=\"image-20200814155422571\" src=\"http://image.moguit.cn/9fea49c6b1ce4d1fb78663ad478bfcfe\" /></p>\n\n<p>然后我们打开首页 http://localhost:9527/，发现能够正常的访问，但是如果我们反复的刷新该页面，当超过对应的QPS数后，就会出现500页面了</p>\n\n<p><img alt=\"image-20200814155402193\" src=\"http://image.moguit.cn/e55920035780427d91586398fb90a4b3\" /></p>\n\n<p>到这里为止，Sentinel的安装就完成了，如果想要了解更加复杂的规则，可以参考上面提到的<a href=\"http://moguit.cn/#/info?blogUid=408e9c889ebf96a66af2adfdc258ba5f\">那篇博客</a></p>\n','e81bc2dca42c4031be7d66fef4a71e16',36,2,'f771d483f23dcc8ff4cb5d406ef91d3c',1,'2020-08-19 06:20:31','2021-02-18 11:02:33','1f01cd1d2f474743b241d74008b12333','1','admin','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',2,1,0,NULL,9),('780199d24cf5a46e18ca9f4ac7fc1312','默认标题1','默认简介1','<p>我是一个table</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>9</td>\n</tr>\n<tr>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n','7e0e93ea6cdb44ae92e58f48e6496ed7',2,0,'d134bdfe255b9aa8c2ce44da8297f6a6',0,'2020-09-06 17:08:45','2020-10-07 16:31:58','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',2,'1',0,1,0,NULL,10),('7a7ad19472d53147150eb7fdb0978bb2','【腾讯云】双十一活动2核4G 100G盘700元/3年','【腾讯云】双十一活动2核4G 100G盘700元/3年','<p>【腾讯云】双十一活动2核4G 100G盘700元/3年&nbsp; <a href=\"https://cloud.tencent.com/act/seckill?from=double11\" target=\"_blank\">点我传送</a></p>\n','1d1fd6d26c8e40a38637ef6126c45cd0',16,0,'51435e2fa2c45d5c4203278f958f8f52',1,'2020-08-24 13:25:28','2021-02-06 16:20:18','1f01cd1d2f474743b241d74008b12333','1','admin','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',2,'1',1,1,1,'https://cloud.tencent.com/act/seckill?from=double11',11),('7ae21f92398d6bbb1dfb4738ef5a1e8b','测试2','测试2','<p>测试2</p>\n','5626932d452c2ad863d9b3cb0b69d22d',0,0,'cc9952f52c84dfa51d74ee35a1dc5367',0,'2020-10-13 09:19:53','2020-10-13 09:23:35','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,12),('80d3eae77c16cea10e119b9f1a1da4c8','蘑菇博客QQ小程序发布指南','蘑菇博客QQ小程序发布指南','<h1>蘑菇博客QQ小程序发布指南</h1>\n\n<h2>前言</h2>\n\n<p>这阵子使用 <a href=\"https://uniapp.dcloud.io/\">uniapp</a> 和 <a href=\"https://github.com/weilanwl/ColorUI\">ColorUI</a> 搭建了蘑菇博客的移动端应用，uniapp是使用vue.js开发的前端应用框架，可以做到开发一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台，下面演示一下uniapp打包成QQ小程序后的效果图。</p>\n\n<p><img alt=\"uniapp\" src=\"http://image.moguit.cn/86b526dc728645a6a8823a0041308d70\" /></p>\n\n<h2>下载HbuildX</h2>\n\n<p>我们首先下载uniapp推荐的编辑器 <a href=\"https://www.dcloud.io/hbuilderx.html\">HbuildX</a></p>\n\n<h2>导入项目</h2>\n\n<p>下载完成后，我们将uniapp_mogu_web项目导入到我们的HbuildX编辑器中，然后点击上方的发布按钮</p>\n\n<p><img alt=\"image-20200814161009006\" src=\"http://image.moguit.cn/7fe82b54e5034fc08621efe460532727\" /></p>\n\n<p>然后选择 chrome，等待一段时间后，就会弹出页面</p>\n\n<blockquote>\n<p>tip：需要注意，我们启动uniapp项目的时候，必须确保我们的后台服务已经成功启动了</p>\n\n<p>同时我们还需要打开 index/ index页面</p>\n</blockquote>\n\n<p>运行成功后的页面如下所示</p>\n\n<p><img alt=\"image-20200814161424623\" src=\"http://image.moguit.cn/269c0a228dd0490595fa22d375c9fae9\" /></p>\n\n<p>这个时候，我们就需要打开F12的页面，然后点击手机端，这个时候就能够看到项目已经成功运行了</p>\n\n<p><img alt=\"image-20200814161914608\" src=\"http://image.moguit.cn/5688c92f57dc42aaa34807913160b0d0\" /></p>\n\n<h2>QQ小程序</h2>\n\n<p>uniapp可以打包成QQ小程序、微信小程序、APP等，但是因为微信小程序需要交费 300元，本着省钱的原则，决定就发布成QQ小程序，因为小程序支持个人发布</p>\n\n<h3>下载QQ小程序开发者工具</h3>\n\n<p>因为uniapp需要转换成QQ小程序的代码，因此我们首先需要下载 <a href=\"https://q.qq.com/wiki/tools/devtool/\">QQ小程序开发工具</a></p>\n\n<p><img alt=\"image-20200814164442612\" src=\"http://image.moguit.cn/7ffee65b92ed4712b5c4a2ac8e469f3c\" /></p>\n\n<h3>修改配置</h3>\n\n<p>如果我们发布一个QQ小程序体验版本，这个时候就可以使用 IP+端口的方式，如下我们首先找到config文件，修改里面的配置，改成自己的线上的ip</p>\n\n<pre>\n<code class=\"language-js\">export const appConfig = {\n\n    tokenKey: \'Authorization\',\n\n	// 开发环境\n    // WEB_API: \'http://localhost:8603\',\n	// PICTURE_API: \'http://localhost:8602\',\n\n	// 演示环境\n	WEB_API: \'http://120.78.126.96:8603\',\n	PICTURE_API: \'http://120.78.126.96:8602\',\n\n	// 正式环境\n	// WEB_API: \'https://apiweb.moguit.cn\',\n	// PICTURE_API: \'https://apipicture.moguit.cn\',\n}\n\n</code></pre>\n\n<p>如果你想发布项目的话，那么就需要拥有域名 和 配置对应的https了，关于如何配置，可以参考这篇博客</p>\n\n<p>Linux下通过nginx配置https</p>\n\n<h3>打包</h3>\n\n<p>下载完成后，我们回到HbuildX页面，然后点击 发行 -&gt; 小程序-QQ</p>\n\n<p><img alt=\"image-20200814164605313\" src=\"http://image.moguit.cn/e533d9135bb545fdaa407cfb02d7992b\" /></p>\n\n<p>然后填写小程序名称和小程序AppID</p>\n\n<p><img alt=\"image-20200814164729544\" src=\"http://image.moguit.cn/4104a372ab124f0fa64aaa683f82f06e\" /></p>\n\n<p>关于AppId的获取，我们需要到 <a href=\"https://q.qq.com/\">https://q.qq.com/</a> 页面进行申请，然后完成后，我们找到AppID</p>\n\n<p><img alt=\"image-20200814165006063\" src=\"http://image.moguit.cn/8141d2fc947f456cb0519a2adb3b08f0\" /></p>\n\n<p>复制到对应的AppID到我们的HbuildX中，点击发行</p>\n\n<p><img alt=\"image-20200814165139237\" src=\"http://image.moguit.cn/bc56586c627c4e0f95814ec1dcfd2f06\" /></p>\n\n<p>下面就得到了我们QQ小程序开发工具，然后打开我们的上面路径中的程序</p>\n\n<p><img alt=\"image-20200814165321545\" src=\"http://image.moguit.cn/d90c8c8633a447699dbeec1e78c49cb9\" /></p>\n\n<p>打开程序后，我们选择详情，然后点击不校验域名</p>\n\n<p><img alt=\"image-20200814165614236\" src=\"http://image.moguit.cn/4f3f807786a74795b48bb32fae4aec9a\" /></p>\n\n<p>然后在看左边的项目，就能够成功运行项目了</p>\n\n<p><img alt=\"image-20200814165649487\" src=\"http://image.moguit.cn/b685eed936114d4fb011ad9566279caf\" /></p>\n\n<p>这个时候，我们就需要点击右上角的上传</p>\n\n<p><img alt=\"image-20200814165747527\" src=\"http://image.moguit.cn/c3dbdccdc3bb452181edbf5eba5b97c9\" /></p>\n\n<p>然后在到我们的QQ小程序页面，找到刚刚的QQ小程序页面，选择设为体验版本，扫描即可进行体验</p>\n\n<p><img alt=\"image-20200814165838142\" src=\"http://image.moguit.cn/37a921a5b59b4f278018a5eb3b292680\" /></p>\n\n<h2>发布QQ小程序</h2>\n\n<p>我们点击开发版本上的提交审核按钮，即可发布小程序。但是在发布小程序的时候，我也遇到了好几个坑，首先是第一次发布的时候</p>\n\n<p><img alt=\"image-20200814172123614\" src=\"http://image.moguit.cn/b5ae28a089a447b09798de2d8b17e6c7\" /></p>\n\n<p>也就是因为申请的是个人小程序，因此不支持打赏和评论的功能，所以为了解决这个问题，我们将增加开关语句用来控制小程序的评论和打赏模块的显示，我们到 系统配置 -&gt; 网站配置 -&gt; 评论&amp;打赏</p>\n\n<p><img alt=\"image-20200814172412680\" src=\"http://image.moguit.cn/1ac0e38319474158ada493e53459cd68\" /></p>\n\n<p>然后在看我们的小程序端，这个时候就没有评论和打赏相关功能了</p>\n\n<p><img alt=\"image-20200814172448046\" src=\"http://image.moguit.cn/ba1ddd905d594da0a026a99376416eae\" /></p>\n\n<p>我们对比之前的页面，发现已经将评论和打赏功能给关闭了，达到审核的要求</p>\n\n<p><img alt=\"image-20200814172640019\" src=\"http://image.moguit.cn/220e1b0bb4c0423ea664966ac9e8952b\" /></p>\n\n<p>当我修改完上述的问题后，再次提交代码</p>\n\n<p><img alt=\"image-20200814173026185\" src=\"http://image.moguit.cn/1ba29e06bd6e4b0c82ebbb95591ed574\" /></p>\n\n<p>提示小程序还需要支持QQ授权登录，这个时候我们就需要去申请QQ授权，我们到<a href=\"https://connect.qq.com/\">QQ互联</a></p>\n\n<p>然后创建我们的小程序，在这之前，我们需要进行审核，按照要求完成QQ互联的审核即可</p>\n\n<p><img alt=\"image-20200814173203070\" src=\"http://image.moguit.cn/75803ae22b9840f1aed45a71cd0512fc\" /></p>\n\n<p>然后我们点击查看按钮，点击申请unionid</p>\n\n<p><img alt=\"image-20200814173328196\" src=\"http://image.moguit.cn/dd469c8eb42b40168e7a0f14dbc821fe\" /></p>\n\n<p>完成这一系列的操作后，我们回到QQ小程序页面</p>\n\n<p><img alt=\"image-20200814173521763\" src=\"http://image.moguit.cn/fa6a671efba641f08b6145b76ea87221\" /></p>\n\n<p>最后到我们的nacos页面，http://localhost:8848/nacos/#/login，找到 mogu-web-dev.yaml配置，然后修改 appid 和 secret，也就是上面我们复制的</p>\n\n<pre>\n<code class=\"language-bash\"># uniapp相关配置\nuniapp:\n  qq:\n    appid: XXXXXXXXXXXXXX  # 改成自己的\n    secret: XXXXXXXXXXXXXX  # 改成自己的\n    grant_type: authorization_code\n\n</code></pre>\n\n<p>修改完成后，我们到我们的小程序登录页面，进行QQ一键登录</p>\n\n<p><img alt=\"image-20200814173940059\" src=\"http://image.moguit.cn/1f12640a5b2e4df4ab1a649bb23335f5\" /></p>\n\n<p>如果能够成功登录，代表配置已经正常</p>\n\n<p><img alt=\"image-20200814173917783\" src=\"http://image.moguit.cn/c811f49b0e85435fbe8503ea0b12fe22\" /></p>\n\n<p>这个时候我们就可以重新打包程序了，然后点击发布，最后在提交审核</p>\n','7e0e93ea6cdb44ae92e58f48e6496ed7',47,1,'1014089311fa1cc9c7ebcce97e74d2b7',1,'2020-08-19 06:35:24','2020-12-11 16:03:29','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',1,1,0,NULL,13),('8100dcb585fff77e3fa25eed50e3708e','使用Docker快速搭建蘑菇博客（Nacos分支）','使用Docker快速搭建蘑菇博客（Nacos分支）','<h1>使用Docker快速搭建蘑菇博客（Nacos分支）</h1>\n\n<p>最近几天一直在研究怎么样才能够快速搭建蘑菇博客项目，对了，我的服务器是阿里云购买的云服务器ECS，配置是 1核2G ，学生优惠价，100多一年。。。 嗯，这应该是搭建蘑菇博客的最低配置了，内存少于2G的话，可能会启动不起来，本来2G也是不够用的，我是把所有的微服务和solr都放到一个tomcat中，才勉强跑起来的。 目前为了更加方便大家的部署，我已经修改成jar包的方式进行部署启动了，tomcat仅用于作为solr启动的web容器。</p>\n\n<p>如果你的服务器内存也是2G的话，请务必先配置一下交换内存：<a href=\"http://www.moguit.cn/#/info?blogUid=36ee5efa56314807a9b6f1c1db508871\">CentOS如何增加虚拟内存</a></p>\n\n<p>如果你也拥有对应的域名并且备案了的话，可以给蘑菇博客配置域名的方式访问：<a href=\"http://moguit.cn/#/info?blogUid=06565868c0e86fe8125a9d55430cd266\">蘑菇博客配置域名解析</a></p>\n\n<p>如果你的服务器带宽只有1M，可以使用免费的百度云加速，加快页面渲染速度：<a href=\"http://www.moguit.cn/#/info?blogUid=af053959672343f8a139ec27fd534c6c\">如何使用百度云加速提升网站访问速度</a></p>\n\n<blockquote>\n<p>tip：特别注意，因为镜像中的代码可能不是最新版本，因此推荐在按照本篇博客，安装好docker环境后，需要在参考下面蘑菇博客部署阿里云这篇博客，重新将前后端代码都重新部署一遍，同时也记得把doc中的两个SQL文件也重新导入，确保服务器为最新代码</p>\n</blockquote>\n\n<p>如果你之前安装好了蘑菇博客的docker环境，修改的博客的源码，想要重新发布到自己服务器上：<a href=\"http://moguit.cn/#/info?blogUid=89defe3f4a3f317cba9aa0cdb9ff879e\">蘑菇博客如何部署到阿里云服务器</a></p>\n\n<p>因为配置那些环境比较麻烦，（主要包括Nginx，Solr，Redis，Tomcat，Mysql，RabbitMQ）当然如果小伙伴喜欢自己配置的话，也可以不使用我搭建好的镜像，可以参考下面几篇博客哦，希望你也能够配置成功的~！（想直接通过Docker部署的，可以忽略下面几步..）</p>\n\n<p>1、<a href=\"http://www.moguit.cn/#/info?blogUid=e8d3e38ba35b4765ae128256eb44e341\">CentOS下如何安装Nginx</a></p>\n\n<p>2、<a href=\"http://www.moguit.cn/#/info?blogUid=d0e2c4337d7a4a85b176834c8c674fdf\">CentOS下Rdeis的安装和部署</a></p>\n\n<p>3、<a href=\"http://www.moguit.cn/#/info?blogUid=7c7404c456904be5b7736238f28d2515\">CentOS下Solr的安装和部署</a>（可选）</p>\n\n<p>4、<a href=\"http://www.moguit.cn/#/info?blogUid=d5b6dff48e5d42b1afcbf6ab591bdab1\">CentOS下Mariadb的安装和部署</a></p>\n\n<p>5、<a href=\"http://www.moguit.cn/#/info?blogUid=f346267364024e78844d459be2f6f528\">CentOS7下RabbitMQ的安装步骤</a></p>\n\n<p>6、<a href=\"http://moguit.cn/#/info?blogUid=ee342088a5d0f5b96bcb4582d9b563aa\">CentOS下ElasticSearch的安装和部署</a>（可选）</p>\n\n<p>7、<a href=\"http://moguit.cn/#/info?blogUid=ee342088a5d0f5b96bcb4582d9b563aa\">Elasticsearch介绍和安装</a>（可选）</p>\n\n<p>8、<a href=\"http://moguit.cn/#/info?blogUid=7a7ad19472d53147150eb7fdb0978bb2\">CentOS下安装Nacos</a>（Nacos分支需要）</p>\n\n<p>9、<a href=\"http://moguit.cn/#/info?blogUid=b100fde21ac0b61414dbaa74d2db7192\">CentOS下安装Sentinel</a>（Nacos分支需要）</p>\n\n<p>好了。下面我介绍的是用Docker快速搭建蘑菇博客。话不多说，下面我就直接进入正题。</p>\n\n<h2>注册Docker账号</h2>\n\n<p>首先大家先去DockerHub注册账号，用于拉取Docker镜像和存储镜像</p>\n\n<p>注意：注册DockerHub的目的，是为了能够方便以后大家把自己的镜像上传上去，如果DockerHub无法访问，或者不想上传镜像的话，可以忽略这一步，同时在3步 也忽略 docker login，直接进行Docker pull 拉取我的镜像即可</p>\n\n<p>DockerHub官网：<a href=\"https://hub.docker.com/\">点我传送</a></p>\n\n<p>关于更多docker命令和介绍，可以看这篇博客：<a href=\"http://www.moguit.cn/#/info?blogUid=8974a6ce5bae4bf68f1aa37f07c96d0f\">Docker常用命令</a></p>\n\n<h2>Docker安装和启动</h2>\n\n<p>注册成功后，进入我们的CentOS系统中（如果是Ubuntu的话，可能安装docker的方式不同，请自行百度安装）</p>\n\n<p>下面介绍的是使用yum方式安装docker</p>\n\n<h3>配置docker的阿里云yum源</h3>\n\n<pre>\n<code>cat &gt;&gt;/etc/yum.repos.d/docker.repo&lt;&lt;EOF\n[docker-ce-edge]\nname=Docker CE Edge - \\$basearch\nbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/\\$basearch/edge\nenabled=1\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg\nEOF\n</code></pre>\n\n<h3>安装docker</h3>\n\n<pre>\n<code># yum安装\nyum -y install docker-ce\n\n#查看docker版本\ndocker --version  \n\n# 设置开机自启\nsystemctl enable docker\n\n# 启动docker\nsystemctl start docker\n</code></pre>\n\n<p>启动完成后，因为需要到Dockerhub拉取镜像，而DockerHub部署在国外，大家还可以配置一下阿里的Docker国内源，这样可以达到加速的效果~</p>\n\n<h2>Docker login登录</h2>\n\n<p>使用Docker login命令登录，需要输入刚刚注册的账号和密码（ps：如果不想发布镜像到dockerhub，可以忽略）</p>\n\n<pre>\n<code># 登录dockerhub\ndocker login\n</code></pre>\n\n<h2>拉取蘑菇博客的镜像</h2>\n\n<p>Nacos版本使用下面命令：</p>\n\n<pre>\n<code class=\"language-bash\">docker pull moxi/mogu_blog_nacos\n</code></pre>\n\n<p>因为镜像有点大，所以拉取的话，可能会有点慢，所以耐下等待下</p>\n\n<p>如果拉取失败，或者出现超时的情况、或者拉取过慢，可以尝试使用下面的方法： <a href=\"http://www.moguit.cn/#/info?blogUid=5296cfe28b35caa808a5387ff95734c7\">CentOS7中Docker拉取镜像失败的解决方法</a></p>\n\n<p>如果还是拉取速度很慢的话，推荐在早上的时候拉取镜像，因为DockerHub是国外的网站，早上的时候，他们美国这边都已经到了晚间了，基本不占用太多带宽，拉取速度会更快一些~</p>\n\n<h2>查看镜像</h2>\n\n<p>拉取成功后，使用命令查看已经拉取的镜像</p>\n\n<pre>\n<code>docker images\n</code></pre>\n\n<p><img alt=\"image-20200903160432721\" src=\"http://image.moguit.cn/d737b804a63247bc80868df01073771c\" /></p>\n\n<p>好了，能看到刚刚拉取的镜像，大概有3.97G，因为这里面包含了项目完整的运行环境。</p>\n\n<h2>制作蘑菇博客docker容器</h2>\n\n<p>Nacos版本使用下面的命令：</p>\n\n<pre>\n<code class=\"language-bash\">docker run --privileged -d -it -h mogu_blog_2 --name mogu_blog_2 -v /etc/localtime:/etc/localtime:ro -p 11122:22 -p 15672:15672 -p 8600:8600 -p 9527:9527 -p 9528:9528 -p 6379:6379 -p 3306:3306 -p 80:80 -p 8080:8080 -p 8601:8601 -p 8602:8602 -p 8603:8603 -p 8604:8604 -p 8605:8605 -p 8606:8606 -p 8607:8607 -p 5601:5601 -p 9411:9411 -p 465:465 -p 8848:8848 -p 8070:8070 moxi/mogu_blog_nacos /usr/sbin/init\n</code></pre>\n\n<p>使用下面的命令，就能够制作成一个docker容器了，他会将上面写的一些端口号都映射到宿主机中，所以宿主机那些端口号不能别占用了哦。</p>\n\n<p>当然同时，宿主机的那些端口号也必须开放，如果是使用阿里云的小伙伴，必须在 阿里云的官网，配置相应的安全组，不然外面是没办法访问的。</p>\n\n<p>关于安全组的配置，在云服务器ECS的管理页面</p>\n\n<p><img alt=\"image-20200209125847329\" src=\"http://image.moguit.cn/87afbd80f53241bf88643371e5d4fa07\" /></p>\n\n<p>在点击配置规则</p>\n\n<p><img alt=\"image-20200209125905430\" src=\"http://image.moguit.cn/02e85ef9931e4d0cb633a0b93831beac\" /></p>\n\n<p>然后点击右上角按钮，把需要用到的端口号都导入进去</p>\n\n<p><img alt=\"image-20200209125919324\" src=\"http://image.moguit.cn/8d33bf7bcc6548109e931e8f687c6c2f\" /></p>\n\n<p>安装下面的规则，把每一个添加进去即可, 需要添加的端口号有：</p>\n\n<pre>\n<code class=\"language-bash\">蘑菇Docker内部容器SSH连接：11122\nRabbitMQ消息队列：15672\nZipkin链路追踪: 9411\n发Email端口：465   \n图片资源：8600   \n前端Web页面:9527    \n后端Admin页面：9528  \nRedis:6379   \nMysql:3306   \nTomcat(里面部署的solr):8080\nHTTP端口：80\nKibana端口：5601\nmogu_admin端口：8601\nmogu_picture端口：8602\nmogu_web端口：8603\nmogu_sms端口：8604\nmogu_search端口：8605\nmogu_monitor端口：8606\nmogu_gateway端口：8607\nnacos端口: 8848\nsentinel端口: 8070\n</code></pre>\n\n<p><img alt=\"image-20200209125938397\" src=\"http://image.moguit.cn/f9632cf3b2b9452194eaa5c7e0a3c0de\" /></p>\n\n<h2>查看容器状态</h2>\n\n<p>好了，回到刚刚的内容，我们在执行第六步的时候，已经制作好了容器了，使用下面的命令，查看容器状态</p>\n\n<pre>\n<code># 查看容器状态\ndocker ps -a\n</code></pre>\n\n<p><img alt=\"image-20200209125953803\" src=\"http://image.moguit.cn/c9a8a60c6dc94ef8b81db576bb3398c0\" /></p>\n\n<h2>打开XShell，连接</h2>\n\n<p><img alt=\"image-20200209130011043\" src=\"http://image.moguit.cn/f8ee8df900ff44e58529778ffe5f1829\" /></p>\n\n<p>输入用户名： root</p>\n\n<p><img alt=\"image-20200209130023427\" src=\"http://image.moguit.cn/6cde2e182f7640c2a5c2ec086044320e\" /></p>\n\n<p>输入密码：mogu2018</p>\n\n<p><img alt=\"image-20200209130036402\" src=\"http://image.moguit.cn/6693ea998f514121bee50b1e23bed041\" /></p>\n\n<p>成功进入系统，下面我们就需要把对应的服务都开启</p>\n\n<p>注意：该密码是docker镜像的初始密码，如果需要更改的话，可以使用下列命令更改密码</p>\n\n<pre>\n<code>passwd\n</code></pre>\n\n<h2>启动对应的服务</h2>\n\n<h3>启动Nginx</h3>\n\n<pre>\n<code># 进入nginx的安装目录下\ncd /soft/nginx/sbin/\n\n# 启动nginx\n./nginx\n</code></pre>\n\n<p>好吧，启动报错</p>\n\n<p><img alt=\"image-20200209130104979\" src=\"http://image.moguit.cn/0a2713041ad14c63bee0ba26d74f38cd\" /></p>\n\n<p>看问题需要创建一个目录，那么就开始创建吧</p>\n\n<pre>\n<code>mkdir -p /var/run/nginx\n</code></pre>\n\n<p>再次使用启动命令，启动成功</p>\n\n<p><img alt=\"image-20200209130124155\" src=\"http://image.moguit.cn/88fe50aad73449958de74bdf0560e463\" /></p>\n\n<p>我们在使用命令 ，查看已经启动的端口号</p>\n\n<pre>\n<code>netstat -tunlp\n</code></pre>\n\n<p>我们已经看到了，现在已经开机自启了 RabbitMQ的 5672 15672 ， mysql的 3306， 其他的一些就是项目的端口，现在我们还需要启动 redis的 6379 和 tomcat的 8080</p>\n\n<p><img alt=\"image-20200209130139403\" src=\"http://image.moguit.cn/2276f331273c434b90b446f79a3f2d37\" /></p>\n\n<p>注意：如果我们查看端口号没有RabbitMQ，我们需要手动启动对应的服务</p>\n\n<p>新开一个xshell连接，启动rabbitmq：</p>\n\n<pre>\n<code># 后台启动RabbitMQ\nrabbitmq-server -detached\n</code></pre>\n\n<h3>启动redis</h3>\n\n<pre>\n<code># 进入redis的安装目录\ncd /soft/redis/bin/\n\n# 后台启动redis\n./redis-server redis.conf\n\n# 查看启动端口号\nnetstat -tunlp\n</code></pre>\n\n<p>我们看到redis已经正常启动了</p>\n\n<p><img alt=\"image-20200209130156442\" src=\"http://image.moguit.cn/3384caf9ab99427a960c34a0bd726ff1\" /></p>\n\n<h3>启动tomcat中的solr（可选）</h3>\n\n<p>tip：如果配置了Solr作为全文检索，那么需要启动Solr，否则可以忽略这一步（默认使用的是SQL搜索）</p>\n\n<pre>\n<code># 进入tomcat目录\ncd /soft/tomcat/bin\n\n# 启动\n./startup.sh\n\n# 查看启动信息\ntail -f ../logs/catalina.out\n</code></pre>\n\n<h3>启动Nacos</h3>\n\n<p>Nacos是由SpringCloudAlibaba开发的服务注册和配置中心，关于更多的操作可以查看这两篇博客</p>\n\n<ul>\n	<li><a href=\"http://moguit.cn/#/info?blogUid=e6e619349d31dded928c9265c5a9c672\">【SpringCloud】使用Nacos实现服务注册发现以及配置中心等功能</a></li>\n	<li><a href=\"http://moguit.cn/#/info?blogUid=7a7ad19472d53147150eb7fdb0978bb2\">CentOS下安装Nacos</a></li>\n</ul>\n\n<p>下面我们只需要进入Nacos的目录下，然后启动即可</p>\n\n<pre>\n<code class=\"language-bash\"># 进入nacos目录\ncd /soft/nacos/bin\n# 启动Nacos\n./startup.sh -m standalone\n</code></pre>\n\n<p>启动后，会有如下提示</p>\n\n<p><img alt=\"image-20200903161239748\" src=\"http://image.moguit.cn/e35db8d846f94198b9cb53ae71613f91\" /></p>\n\n<p>我们可以通过查看日志进行判断nacos是否启动成功</p>\n\n<p><img alt=\"image-20200903161406977\" src=\"http://image.moguit.cn/da043c4c0f894b778c8211367d92f075\" /></p>\n\n<p>如果没有报错信息，说明Nacos已经启动成功了，下面我们可以进入到Nacos的图形化管理页面</p>\n\n<pre>\n<code class=\"language-bash\">http://your_ip:8848/nacos\n</code></pre>\n\n<p>打开后，输入默认账号密码：nacos nacos，即可进入系统，查看到项目的配置</p>\n\n<p><img alt=\"image-20200903161619843\" src=\"http://image.moguit.cn/6b5028c5baeb43bdbc27f01bfcd302bb\" /></p>\n\n<p>如果需要更改配置，以后到这里完成就可以了，修改配置后，重启服务即可生效</p>\n\n<h3>启动Sentinel（可选）</h3>\n\n<p>Sentinel是用来做服务的熔断、雪崩、限流，相当于原来的Hystrix，但是提供了更加强大的功能，如果想要了解Sentinel的更多操作，可以参考这两篇博客</p>\n\n<ul>\n	<li><a href=\"http://moguit.cn/#/info?blogUid=408e9c889ebf96a66af2adfdc258ba5f\">【SpringCloud】使用Sentinel实现熔断和限流</a></li>\n	<li><a href=\"http://moguit.cn/#/info?blogUid=b100fde21ac0b61414dbaa74d2db7192\">CentOS下安装Sentinel</a></li>\n</ul>\n\n<p>首先进入到Sentinel的启动目录下进行启动</p>\n\n<pre>\n<code class=\"language-bash\"># 进入到sentinel目录\ncd /soft/sentinel\n# 启动Sentinel\n./startup.sh\n# 查看日志\n</code></pre>\n\n<p>然后进入到Sentinel的图形化界面</p>\n\n<pre>\n<code class=\"language-bash\">http://your_ip:8070\n</code></pre>\n\n<p>输入默认账号密码：sentinel sentinel，进入到管理界面，更多关于Sentinel的操作，可以查看<a href=\"http://moguit.cn/#/info?blogUid=408e9c889ebf96a66af2adfdc258ba5f\">这篇博客</a></p>\n\n<p><img alt=\"image-20200903162631281\" src=\"http://image.moguit.cn/1486759c1c194743a0ba47d556e431d8\" /></p>\n\n<h3>启动微服务</h3>\n\n<p>启动 mogu_picture &amp; mogu_sms &amp; mogu_admin &amp; mogu_web</p>\n\n<pre>\n<code>#进入到项目目录\ncd /home/mogu_blog\n</code></pre>\n\n<p>我们查看项目结构，有以下几个文件夹</p>\n\n<p><img alt=\"image-20200903163514966\" src=\"http://image.moguit.cn/6d1ce7fe90ab45068da2995227176da0\" /></p>\n\n<p>下面说明每个文件夹的作用</p>\n\n<pre>\n<code>mogu_admin：admin端API接口服务\nmogu_data：存在蘑菇博客的图片资源\nmogu_monitor：服务监控\nmogu_picture: 图片服务器，用于图片上传和下载\nmogu_sms: 消息发送服务器，用于邮件和短信发送\nmogu_web：web端API接口服务\nmogu_zipkin：链路追踪模块\nvue_mogu_admin：VUE的后台管理页面\nvue_mogu_web：VUE的门户网站\n</code></pre>\n\n<h4>启动Admin后台服务</h4>\n\n<p>首先进入mogu_admin目录下</p>\n\n<p>我们查看一下目录结构</p>\n\n<p><img alt=\"image-20200209130224724\" src=\"http://image.moguit.cn/e3cfe89eb47e44acba9c2a20686b9a30\" /></p>\n\n<pre>\n<code>./startup.sh  #启动脚本\n./shutdown.sh #关闭脚本\nmogu_admin***.jar #springboot打包的可执行jar包\n/config #外部配置文件\ncatalina.out #启动脚本后，生成的日志文件\n</code></pre>\n\n<p>然后我们使用下面的命令进行启动</p>\n\n<pre>\n<code># 进入mogu_admin目录\ncd mogu_admin\n# 启动项目\n./startup.sh\n</code></pre>\n\n<blockquote>\n<p>tip：因为镜像中的代码可能不是最新版本，因此推荐在按照本篇博客，安装好docker环境后，需要在参考下面蘑菇博客部署阿里云这篇博客，重新将前后端代码都重新部署一遍，同时也记得把doc中的三个SQL文件也重新导入，确保服务器为最新代码~</p>\n</blockquote>\n\n<h3>mogu_web修改配置</h3>\n\n<p>我们进入到nacos配置文件管理界面，找到的 mogu_web_prod.yaml文件</p>\n\n<p><img alt=\"image-20200903164514073\" src=\"http://image.moguit.cn/95308e71b99846a5998efc4983fa2a9f\" /></p>\n\n<p>我们需要将下面的域名，改成自己的</p>\n\n<pre>\n<code>data:\n  # 门户页面\n  webSite:\n    url: http://101.132.122.175/:9527/#/\n    # 有域名可以改成如下\n    # url: http://www.moguit.cn/#/\n    \n  # mogu_web网址，用于第三方登录回调\n  web:\n    url: http://101.132.122.175/:8603\n</code></pre>\n\n<p>同时在配置文件的最下面，还需要修改第三方注册需要的 clientId 和 ClientSecret：如果不清楚如何获取的小伙伴，可以查看我的这篇博客，在后面部分对ID的获取有相关介绍：<a href=\"http://moguit.cn/#/info?blogUid=8cbadb54967257f12d6cc7eb1a58a361\">SpringBoot+Vue如何集成第三方登录JustAuth</a></p>\n\n<pre>\n<code class=\"language-yml\"># 第三方登录\njustAuth:\n  clientId:\n    gitee: XXXXXXXXXXXXXXXXXXXXXX\n    github: XXXXXXXXXXXXXXXXXXXXXX\n  clientSecret:\n    gitee: XXXXXXXXXXXXXXXXXXXXXX\n    github: XXXXXXXXXXXXXXXXXXXXXX\n</code></pre>\n\n<p>修改完成后，启动项目</p>\n\n<pre>\n<code class=\"language-bash\"># 进入mogu_web目录\ncd mogu_web\n# 启动项目\n./startup.sh\n</code></pre>\n\n<h3>mogu_sms修改配置</h3>\n\n<p>我们进入到nacos配置文件管理界面，找到的 mogu_sms_prod.yaml文件</p>\n\n<p><img alt=\"image-20200903164316451\" src=\"http://image.moguit.cn/4f8f8ad92d3b47f1b28768f02167a334\" /></p>\n\n<p>在mogu_sms中，主要修改的就是邮箱的配置，我们将发送邮件的信息改成自己的</p>\n\n<pre>\n<code class=\"language-yml\">#mail\nmail:\n    username: XXXXXXX@163.com\n    password: XXXXXXX #授权码开启SMTP服务里设置\n</code></pre>\n\n<p>注意，上面的password是授权码，授权码不是密码，以163邮箱为例，我们需要开启SMTP服务，然后设置授权码</p>\n\n<p><img alt=\"image-20200722090457339\" src=\"http://image.moguit.cn/c1f29c98397442c385cfb151ae5a76fc\" /></p>\n\n<p>修改完成后，我们启动对应的项目即可，最终我们需要启动的项目有： mogu_picture, mogu_sms, mogu_admin, mogu_web</p>\n\n<p><strong>tip:（用于以后使用图形化客户端进行连接）</strong></p>\n\n<p>mysql的账号和密码是 root mogu2018</p>\n\n<p>redis的密码是 mogu2018</p>\n\n<h2>验证是否后台是否启动成功</h2>\n\n<p>等服务器都启动完成后，下面我们验证一下后台是否正常启动，回到我们的Nacos管理界面</p>\n\n<pre>\n<code>http://your_ip:8848/nacos\n</code></pre>\n\n<p>如果我们看到下面四个服务都注册到eureka中，那说明启动成功</p>\n\n<p><img alt=\"image-20200903165638594\" src=\"http://image.moguit.cn/509f9f106f664a728e2ac3522e75892b\" /></p>\n\n<p>我们在通过访问下列swagger接口，测试接口是否正常</p>\n\n<pre>\n<code>http://your_ip:8601/swagger-ui.html\nhttp://your_ip:8603/swagger-ui.html\n</code></pre>\n\n<p>如果能够进入下面页面的话，说明后台是没有问题的了，下面我们可以验证一下接口</p>\n\n<p><img alt=\"image-20200209130313977\" src=\"http://image.moguit.cn/994ecf0c0a9040b6b717be2caa5e508f\" /></p>\n\n<p>验证登录</p>\n\n<p><img alt=\"image-20200209130324333\" src=\"http://image.moguit.cn/c4f2f21cc03849cea6eae28248e6911f\" /></p>\n\n<p>登录功能正常使用，我们把token复制到来，然后在swagger页面的右上角，有一个authorize的按钮，点击后，将token粘贴进去，即可操作全部接口进行测试了~</p>\n\n<p><img alt=\"image-20200209130336478\" src=\"http://image.moguit.cn/ce79f64b7c04464eb7626cc1373fd7f7\" /></p>\n\n<h2>修改前端项目配置</h2>\n\n<p>我们现在需要修改两个地方的配置，分别是：vue_mogu_admin 和 vue_mogu_web\\</p>\n\n<blockquote>\n<p>tip：以下配置的修改，需要在我们本地的编辑器下进行修改，修改完成后在打包发送到服务器,也就是我们下载的源码目录，注意不是在linux服务器下的dist文件夹内！！！</p>\n</blockquote>\n\n<p>下面我们到 vue_mogu_web/config/目录下，修改prod.env.js文件</p>\n\n<p><img alt=\"image-20200903165911938\" src=\"http://image.moguit.cn/6ebf5b1512ea46a79e4faf89bb55a307\" /></p>\n\n<p>把里面的ip地址换成你主机的地址即可</p>\n\n<pre>\n<code>//配置线上环境\nVUE_MOGU_WEB: \'\"http://101.132.122.175:9527\"\',\nPICTURE_API: \'\"http://101.132.122.175:8602\"\',\nWEB_API: \'\"http://101.132.122.175:8603\"\',\nELASTICSEARCH: \'\"http://101.132.122.175:8605\"\',\n</code></pre>\n\n<p>同理，在修改 vue_mogu_admin下的地址，把里面的ip地址，换成你服务器的ip即可</p>\n\n<p><img alt=\"image-20200903165947652\" src=\"http://image.moguit.cn/eab30c98aa20408e8b088d60bf704ade\" /></p>\n\n<p>修改完成后，需要进行重新编译~ 打包~ 部署~</p>\n\n<p>我们首先在 vue_mogu_admin 目录下，执行下列命令进行打包（打包过程中.....可能会遇到一些语法规范错误，请无视~）</p>\n\n<pre>\n<code># 安装依赖\nnpm install --registry=https://registry.npm.taobao.org\n\n# 打包\nnpm run build\n</code></pre>\n\n<p>打包完成后，会生成一个dist目录，我们将整个dist目录，压缩成 zip格式</p>\n\n<p><img alt=\"image-20200209130425874\" src=\"http://image.moguit.cn/7eef98a3bf804b93ac7547ab12300f18\" /></p>\n\n<p>然后使用xftp工具，丢入到我们的前端目录下，目录在 /home/mogu_blog/vue_mogu_admin</p>\n\n<p><img alt=\"image-20200209130438506\" src=\"http://image.moguit.cn/acbcb43c40b8475197a4736f09cb1ece\" /></p>\n\n<p>注意：如果该文件夹下存在 dist文件夹，我们需要将其删除，然后在解压</p>\n\n<p>然后使用下面命令进行解压</p>\n\n<pre>\n<code>unzip dist.zip\n</code></pre>\n\n<p>同理的操作，在执行一下上述操作，将vue_mogu_web项目也进行打包，部署到 /home/mogu_blog/vue_mogu_web目录下即可</p>\n\n<h2>访问蘑菇博客项目</h2>\n\n<h3>访问前端项目</h3>\n\n<p>例如： 192.168.1.101:9527</p>\n\n<p><img alt=\"image-20200209130524162\" src=\"../../杂记/Docker搭建蘑菇博客/images/image-20200209130524162.png\" /></p>\n\n<p>tip：需要注意的是，如果图片无法正常显示，请先登录后台管理页面，然后修改对应的域名</p>\n\n<p>关于具体的配置，参考这篇博客：<a href=\"http://www.moguit.cn/#/info?blogUid=735ed389c4ad1efd321fed9ac58e646b\">蘑菇博客配置七牛云存储</a></p>\n\n<p><img alt=\"image-20200903170244575\" src=\"http://image.moguit.cn/ed45cff257e744eda9a170d1c15ddd56\" /></p>\n\n<h3>访问后端项目</h3>\n\n<p>ip地址:9528 用户名和密码是： admin mogu2018</p>\n\n<p><img alt=\"image-20200209130547785\" src=\"http://image.moguit.cn/a4c7917cd4524c1d9334b7e071db8da0\" /></p>\n\n<h2>总结：</h2>\n\n<p>好了，到目前为止，蘑菇博客已经搭建完成。当然小伙伴并不是拉取来就能直接用的， 如果ip地址不一样的话，是不能直接使用的，后面的话，需要拉取源码后，修改对应的配置信息后，然后在打包部署，才能够使用的。</p>\n','7e0e93ea6cdb44ae92e58f48e6496ed7,ebf63989f11741bc89494c52fc6bae4c',6,0,'c7782d374ed2d4bff8e43164ece9244d',0,'2020-09-04 09:56:24','2020-10-07 16:32:38','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',1,'1',4,1,0,NULL,14),('81641369c197c49ad1155327655653c4','Go语言中的变量和常量','Go语言中的变量和常量','<h1>Go语言中的变量和常量</h1>\n\n<h2>Go语言中变量的声明</h2>\n\n<p>Go语言变量是由字母、数字、下划线组成，其中首个字符不能为数字。Go语言中关键字和保留字都不能用作变量名</p>\n\n<p>Go语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p>\n\n<p>变量声明后，没有初始化，打印出来的是空</p>\n\n<h2>如何定义变量</h2>\n\n<h3>方式1：</h3>\n\n<pre>\n<code class=\"language-go\">var name = \"zhangsan\"\n</code></pre>\n\n<h3>方式2：带类型</h3>\n\n<pre>\n<code class=\"language-go\">var name string = \"zhangsan\"\n</code></pre>\n\n<h3>方式3：类型推导方式定义变量</h3>\n\n<p>a在函数内部，可以使用更简略的 := 方式声明并初始化变量</p>\n\n<p>注意：短变量只能用于声明局部变量，不能用于全局变量声明</p>\n\n<pre>\n<code class=\"language-go\">变量名 := 表达式\n</code></pre>\n\n<h3>方式4：声明多个变量</h3>\n\n<p>类型都是一样的变量</p>\n\n<pre>\n<code class=\"language-go\">var 变量名称， 变量名称 类型\n</code></pre>\n\n<p>类型不一样的变量</p>\n\n<pre>\n<code class=\"language-go\">var (\n	变量名称 类型\n    变量名称 类型\n)\n</code></pre>\n\n<p>案例</p>\n\n<pre>\n<code class=\"language-go\">var a1, a2 string\na1 = \"123\"\na2 = \"123\"\nfmt.Printf(a1)\nfmt.Printf(a2)\n</code></pre>\n\n<h3>总结</h3>\n\n<p>全部的定义方式</p>\n\n<pre>\n<code class=\"language-go\">package main\nimport \"fmt\"\n\nfunc main() {\n	fmt.Println(\"hello\")\n	fmt.Print(\"A\", \"B\", \"C\")\n	fmt.Println()\n	var a = 10\n	fmt.Printf( \"%d\", a )\n\n	var name = \"zhangsan1\"\n	var name2 string = \"zhangsan2\"\n	name3 := \"zhangsan3\"\n\n	fmt.Println(name)\n	fmt.Println(name2)\n	fmt.Println(name3)\n	fmt.Printf(\"name1=%v name2=%v name3=%v \\n\", name, name2, name3)\n}\n</code></pre>\n\n<h2>如何定义常量</h2>\n\n<p>相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了const，常量在定义的时候必须赋值。</p>\n\n<pre>\n<code class=\"language-go\">// 定义了常量，可以不用立即使用\nconst pi = 3.14\n\n// 定义两个常量\nconst(\n    A = \"A\"\n    B = \"B\"\n)\n\n// const同时声明多个常量时，如果省略了值表示和上面一行的值相同\nconst(\n    A = \"A\"\n    B\n    C\n)\n</code></pre>\n\n<h2>Const常量结合iota的使用</h2>\n\n<p>iota是golang 语言的常量计数器，只能在常量的表达式中使用</p>\n\n<p>iota在const关键字出现时将被重置为0（const内部的第一行之前），const中每新增一行常量声明将使iota计数一次（iota可理解为const语句块中的行索引）。</p>\n\n<p>每次const出现，都会让iota初始化为0【自增长】</p>\n\n<pre>\n<code class=\"language-go\">const a = iota // a = 0\nconst (\n	b = iota // b=0\n    c        // c = 1\n    d        // d = 2\n)\n</code></pre>\n\n<p>const iota使用_跳过某些值</p>\n\n<pre>\n<code class=\"language-go\">const (\n	b = iota // b=0\n    _\n    d        // d = 2\n)\n</code></pre>\n','7e0e93ea6cdb44ae92e58f48e6496ed7',2,0,'ee5fd755a6f28df835361c005d0b867b',0,'2020-09-08 09:54:01','2020-09-14 10:35:25','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,15),('8dc52bd61e36fa56cfc7699815375572','蘑菇博客Nacos部署指南','蘑菇博客Nacos部署指南','<h1>蘑菇博客Nacos部署指南</h1>\n\n<h2>前言</h2>\n\n<p>蘑菇博客这阵子将部分SpringCloud组件替换成了SpringCloudAlibaba组件，其中包括注册中心由Eureka替换成Nacos、新增了Sentinel作为熔断和限流组件</p>\n\n<p>关于Nacos和Sentinel的使用可以参考下面两篇博客</p>\n\n<ul>\n	<li><a href=\"http://moguit.cn/#/info?blogUid=e6e619349d31dded928c9265c5a9c672\">【SpringCloud】使用Nacos实现服务注册发现以及配置中心等功能</a></li>\n	<li><a href=\"http://moguit.cn/#/info?blogUid=408e9c889ebf96a66af2adfdc258ba5f\">【SpringCloud】使用Sentinel实现熔断和限流</a></li>\n</ul>\n\n<h2>安装Nacos</h2>\n\n<p>首先我们到Nacos的 <a href=\"https://github.com/alibaba/nacos/releases\">Github页面</a>，找到我们需要安装的版本</p>\n\n<p><img alt=\"image-20200814144224359\" src=\"http://image.moguit.cn/df299cd97ca04c51a9d6ad46259223aa\" /></p>\n\n<p>因为我现在用的是window，所以我下载了windows版本，也就是 nacos-server.zip</p>\n\n<blockquote>\n<p>如果国内环境下载过慢，可以使用下面的这个地址 链接：<a href=\"https://pan.baidu.com/s/1oTYQuqz1oMM5kTE\">https://pan.baidu.com/s/1oTYQuqz1oMM5kTE</a>_tl-8JQ 提取码：92gx</p>\n</blockquote>\n\n<p>下载完成后，我们进行解压缩，然后进入 conf目录，打开 application.properties文件</p>\n\n<p><img alt=\"image-20200814144515174\" src=\"http://image.moguit.cn/053d912d9fd84c1e90221828b26a5fda\" /></p>\n\n<p>打开后，我们在文件的末尾添加mysql的配置信息，注意mysql的账号和密码</p>\n\n<pre>\n<code class=\"language-bash\"># mysql配置\nspring.datasource.platform=mysql\ndb.num=1\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\ndb.user=root\ndb.password=root\n\n</code></pre>\n\n<p>配置完成后，我们到项目的doc文件夹，找到数据库脚本 nacos_config.sql</p>\n\n<p><img alt=\"image-20200814150620395\" src=\"http://image.moguit.cn/c48ad210858d412c9254e616961cbebd\" /></p>\n\n<p>然后创建一个数据库脚 nacos_config，将配置导入到mysql中，然后我们到nacos目录，双击startup.bat启动</p>\n\n<p><img alt=\"image-20200814150743682\" src=\"http://image.moguit.cn/cee3dcdc2c8b40f992aac959c729cd1e\" /></p>\n\n<p><img alt=\"image-20200814150938013\" src=\"http://image.moguit.cn/56fec6e3a74842b39c90c2e8ad34be0b\" /></p>\n\n<p>项目启动成功后，我们访问 http://localhost:8848/nacos，输入下方的默认密码</p>\n\n<blockquote>\n<p>账号：nacos</p>\n\n<p>密码：nacos</p>\n</blockquote>\n\n<p><img alt=\"image-20200814151027589\" src=\"http://image.moguit.cn/c14a178fa20343899e678d6d7dc6239c\" /></p>\n\n<p>然后我们点击 配置列表 -&gt; dev，即可查看到我们的配置文件了，如果我们需要修改配置的话，只需要点击编辑</p>\n\n<p><img alt=\"image-20200814151141045\" src=\"http://image.moguit.cn/0eb5be4bee844b49bd498cd90e80e4f9\" /></p>\n\n<p>到这里为止，Nacos服务注册中心就已经安装完成了，后续的操作我们可以参考下面的博客进行</p>\n\n<p><a href=\"http://moguit.cn/#/info?blogUid=082ca226cf2e4103b0ffa6e6c13d7b14\">window环境下配置蘑菇博客环境</a></p>\n\n<blockquote>\n<p>因为我们将Eureka替换成Nacos，所以我们只需要启动服务为</p>\n\n<p>mogu-sms、mogu-picture、mogu-admin、mogu-web</p>\n</blockquote>\n\n<p><img alt=\"image-20200814154136820\" src=\"http://image.moguit.cn/e36915b0af384a4da5cb471ba1e301de\" /></p>\n','e81bc2dca42c4031be7d66fef4a71e16',27,0,'80a291b93ee01a9adada67d843be7cb0',1,'2020-08-19 06:11:47','2020-12-11 16:03:34','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,16),('94ba19fb60e4cc7a4c096e4acf27714c','默认标题1','默认简介1','<h1>Gin内容介绍</h1>\n<h2>参考</h2>\n<p>参考博客和文档：</p>\n<ul>\n<li><a href=\"https://www.liwenzhou.com/posts/Go/Gin_framework/\">Gin框架介绍及使用</a></li>\n<li><a href=\"https://gin-gonic.com/zh-cn/docs/\">Gin中文文档</a></li>\n</ul>\n<h2>主要内容</h2>\n<p>本教程主要从下面几个方面来进行讲解</p>\n<ul>\n<li>Gin框架基本使用</li>\n<li>GORM基本使用</li>\n<li>Web开发项目实战</li>\n</ul>\n<h2>关于Web</h2>\n<ul>\n<li>Web是基于HTTP协议进行交互的应用网络</li>\n<li>Web就是通过使用浏览器/APP访问的各种资源</li>\n</ul>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552095534.png\" alt=\"image-20200913201627904\" />一个请求对应一个响应，以淘宝网为例，我们输入一个url，就会返回一个页面</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096461.png\" alt=\"image-20200913201929752\" /></p>\n<h2>创建项目</h2>\n<p>首先我们使用Goland创建一个Go项目</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096545.png\" alt=\"image-20200913202119089\" /></p>\n<p>创建完成后，打开命令窗口，输入下面的命令，创建一个依赖管理</p>\n<pre><code class=\"language-bash\">go mod init gin_demo\n</code></pre>\n<p>然后打开setting页面，勾选这个选项【不勾选会导致go.mod依赖爆红】</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096677.png\" alt=\"image-20200913210316077\" /></p>\n<p>我们创建一个main.go文件，然后使用go代码实现一个请求和响应</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;fmt&quot;\n	&quot;net/http&quot;\n)\n\n// http.ResponseWriter：代表响应，传递到前端的\n// *http.Request：表示请求，从前端传递过来的\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n	_, _ = fmt.Fprintln(w, &quot;hello Golang!&quot;);\n}\n\nfunc main() {\n	http.HandleFunc(&quot;/hello&quot;, sayHello)\n	err := http.ListenAndServe(&quot;:9090&quot;, nil)\n	if err != nil {\n		fmt.Println(&quot;http server failed, err:%v \\n&quot;, err)\n		return\n	}\n}\n</code></pre>\n<p>在浏览器访问如下地址</p>\n<pre><code class=\"language-bash\">http://localhost:9090/hello\n</code></pre>\n<p>就能打开我们的hello golang页面了</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096583.png\" alt=\"image-20200913203807251\" /></p>\n<p>我们可以给文字添加色彩</p>\n<pre><code class=\"language-bash\">// http.ResponseWriter：代表响应，传递到前端的\n// *http.Request：表示请求，从前端传递过来的\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n	_, _ = fmt.Fprintln(w, &quot;&lt;h1 style=\'color:red\'&gt;hello Golang!&lt;h1&gt;&quot;);\n}\n</code></pre>\n<p>然后重启后，在刷新</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096611.png\" alt=\"image-20200913203922973\" /></p>\n<p>我们还可以把里面的字符串放在一个文件里，我们定义一个 hello.html文件</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;title&gt;hello golang&lt;/title&gt;\n    &lt;body&gt;\n        &lt;h1 style=\'color:red\'&gt;\n            hello Golang!\n        &lt;/h1&gt;\n        &lt;h1&gt;\n            hello gin!\n        &lt;/h1&gt;\n        &lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1600011052622&amp;di=9aeee5de695a40c8d469f0c3980c2d48&amp;imgtype=0&amp;src=http%3A%2F%2Fa4.att.hudong.com%2F22%2F59%2F19300001325156131228593878903.jpg&quot;&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>\n<p>然后修改刚刚的main.go，使用  ioutil解析文件</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;fmt&quot;\n	&quot;io/ioutil&quot;\n	&quot;net/http&quot;\n)\n\n// http.ResponseWriter：代表响应，传递到前端的\n// *http.Request：表示请求，从前端传递过来的\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n	html, _ := ioutil.ReadFile(&quot;./template/hello.html&quot;)\n	_, _ = fmt.Fprintln(w, string(html));\n}\n\nfunc main() {\n	http.HandleFunc(&quot;/hello&quot;, sayHello)\n	err := http.ListenAndServe(&quot;:9090&quot;, nil)\n	if err != nil {\n		fmt.Println(&quot;http server failed, err:%v \\n&quot;, err)\n		return\n	}\n}\n</code></pre>\n<p>最后刷新我们的页面，就出来这样的效果了，这就是我们通过golang开发的一个Web页面</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096639.png\" alt=\"image-20200913204456513\" /></p>\n<h2>为什么要用框架</h2>\n<p>我们通过上面的http包，就能够实现一个web的开发，那为什么还要用gin呢？</p>\n<p>其实框架的好处，就是别人帮我们搭建了一个舞台，同时提供了很多现成的轮子，让我们专注于业务的开发，同时让开发效率更高。</p>\n<h2>Gin框架介绍</h2>\n<p><code>Gin</code>是一个用Go语言编写的web框架。它是一个类似于<code>martini</code>但拥有更好性能的API框架, 由于使用了<code>httprouter</code>，速度提高了近40倍。 如果你是性能和高效的追求者, 你会爱上<code>Gin</code>。</p>\n<p>Go世界里最流行的Web框架，<a href=\"https://github.com/gin-gonic/gin\">Github</a>上有<code>32K+</code>star。 基于<a href=\"https://github.com/julienschmidt/httprouter\">httprouter</a>开发的Web框架。 <a href=\"https://gin-gonic.com/zh-cn/docs/\">中文文档</a>齐全，简单易用的轻量级框架。</p>\n<h2>Gin框架安装与使用</h2>\n<h3>安装</h3>\n<p>下载并安装<code>Gin</code>:</p>\n<pre><code class=\"language-bash\">go get -u github.com/gin-gonic/gin\n</code></pre>\n<h3>第一个Gin示例：</h3>\n<pre><code class=\"language-golang\">package main\n\nimport (\n	&quot;github.com/gin-gonic/gin&quot;\n)\n\nfunc main() {\n	// 创建一个默认的路由引擎\n	r := gin.Default()\n	// GET：请求方式；/hello：请求的路径\n	// 当客户端以GET方法请求/hello路径时，会执行后面的匿名函数\n	r.GET(&quot;/hello&quot;, func(c *gin.Context) {\n		// c.JSON：返回JSON格式的数据\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;Hello world!&quot;,\n		})\n	})\n	// 启动HTTP服务，默认在0.0.0.0:8080启动服务\n	r.Run()\n}\n</code></pre>\n<p>将上面的代码保存并编译执行，然后使用浏览器打开<code>127.0.0.1:8080/hello</code>就能看到一串JSON字符串。</p>\n<h2>RESTful API</h2>\n<p>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”或“表现层状态转化”。</p>\n<p>推荐阅读<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\">阮一峰 理解RESTful架构</a></p>\n<p>简单来说，REST的含义就是客户端与Web服务器之间进行交互的时候，使用HTTP协议中的4个请求方法代表不同的动作。</p>\n<ul>\n<li><code>GET</code>用来获取资源</li>\n<li><code>POST</code>用来新建资源</li>\n<li><code>PUT</code>用来更新资源</li>\n<li><code>DELETE</code>用来删除资源。</li>\n</ul>\n<p>只要API程序遵循了REST风格，那就可以称其为RESTful API。目前在前后端分离的架构中，前后端基本都是通过RESTful API来进行交互。</p>\n<p>例如，我们现在要编写一个管理书籍的系统，我们可以查询对一本书进行查询、创建、更新和删除等操作，我们在编写程序的时候就要设计客户端浏览器与我们Web服务端交互的方式和路径。按照经验我们通常会设计成如下模式：</p>\n<table>\n<thead>\n<tr><th align=\"center\">请求方法</th><th align=\"center\">URL</th><th align=\"center\">含义</th></tr>\n</thead>\n<tbody>\n<tr><td align=\"center\">GET</td><td align=\"center\">/book</td><td align=\"center\">查询书籍信息</td></tr>\n<tr><td align=\"center\">POST</td><td align=\"center\">/create_book</td><td align=\"center\">创建书籍记录</td></tr>\n<tr><td align=\"center\">POST</td><td align=\"center\">/update_book</td><td align=\"center\">更新书籍信息</td></tr>\n<tr><td align=\"center\">POST</td><td align=\"center\">/delete_book</td><td align=\"center\">删除书籍信息</td></tr>\n</tbody>\n</table>\n<p>同样的需求我们按照RESTful API设计如下：</p>\n<table>\n<thead>\n<tr><th align=\"center\">请求方法</th><th align=\"center\">URL</th><th align=\"center\">含义</th></tr>\n</thead>\n<tbody>\n<tr><td align=\"center\">GET</td><td align=\"center\">/book</td><td align=\"center\">查询书籍信息</td></tr>\n<tr><td align=\"center\">POST</td><td align=\"center\">/book</td><td align=\"center\">创建书籍记录</td></tr>\n<tr><td align=\"center\">PUT</td><td align=\"center\">/book</td><td align=\"center\">更新书籍信息</td></tr>\n<tr><td align=\"center\">DELETE</td><td align=\"center\">/book</td><td align=\"center\">删除书籍信息</td></tr>\n</tbody>\n</table>\n<p>Gin框架支持开发RESTful API的开发。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	r.GET(&quot;/book&quot;, func(c *gin.Context) {\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;GET&quot;,\n		})\n	})\n\n	r.POST(&quot;/book&quot;, func(c *gin.Context) {\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;POST&quot;,\n		})\n	})\n\n	r.PUT(&quot;/book&quot;, func(c *gin.Context) {\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;PUT&quot;,\n		})\n	})\n\n	r.DELETE(&quot;/book&quot;, func(c *gin.Context) {\n		c.JSON(200, gin.H{\n			&quot;message&quot;: &quot;DELETE&quot;,\n		})\n	})\n    \n   	// 启动HTTP服务，默认在0.0.0.0:8080启动服务\n	r.Run()\n}\n</code></pre>\n<p>开发RESTful API的时候我们通常使用<a href=\"https://www.getpostman.com/\">Postman</a>来作为客户端的测试工具。</p>\n<h2>Gin渲染</h2>\n<h3>HTML渲染</h3>\n<p>我们首先定义一个存放模板文件的<code>templates</code>文件夹，然后在其内部按照业务分别定义一个<code>posts</code>文件夹和一个<code>users</code>文件夹。 <code>posts/index.html</code>文件的内容如下：</p>\n<pre><code class=\"language-template\">{{define &quot;posts/index.html&quot;}}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;posts/index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {{.title}}\n&lt;/body&gt;\n&lt;/html&gt;\n{{end}}\n</code></pre>\n<p><code>users/index.html</code>文件的内容如下：</p>\n<pre><code class=\"language-template\">{{define &quot;users/index.html&quot;}}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;users/index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {{.title}}\n&lt;/body&gt;\n&lt;/html&gt;\n{{end}}\n</code></pre>\n<p>Gin框架中使用<code>LoadHTMLGlob()</code>或者<code>LoadHTMLFiles()</code>方法进行HTML模板渲染。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	r.LoadHTMLGlob(&quot;templates/**/*&quot;)\n	//r.LoadHTMLFiles(&quot;templates/posts/index.html&quot;, &quot;templates/users/index.html&quot;)\n	r.GET(&quot;/posts/index&quot;, func(c *gin.Context) {\n		c.HTML(http.StatusOK, &quot;posts/index.html&quot;, gin.H{\n			&quot;title&quot;: &quot;posts/index&quot;,\n		})\n	})\n\n	r.GET(&quot;users/index&quot;, func(c *gin.Context) {\n		c.HTML(http.StatusOK, &quot;users/index.html&quot;, gin.H{\n			&quot;title&quot;: &quot;users/index&quot;,\n		})\n	})\n\n	r.Run(&quot;:8080&quot;)\n}\n</code></pre>\n<h3>自定义模板函数</h3>\n<p>定义一个不转义相应内容的<code>safe</code>模板函数如下：</p>\n<pre><code class=\"language-go\">func main() {\n	router := gin.Default()\n	router.SetFuncMap(template.FuncMap{\n		&quot;safe&quot;: func(str string) template.HTML{\n			return template.HTML(str)\n		},\n	})\n	router.LoadHTMLFiles(&quot;./index.tmpl&quot;)\n\n	router.GET(&quot;/index&quot;, func(c *gin.Context) {\n		c.HTML(http.StatusOK, &quot;index.tmpl&quot;, &quot;&lt;a href=\'https://liwenzhou.com\'&gt;李文周的博客&lt;/a&gt;&quot;)\n	})\n\n	router.Run(&quot;:8080&quot;)\n}\n</code></pre>\n<p>在<code>index.tmpl</code>中使用定义好的<code>safe</code>模板函数：</p>\n<pre><code class=\"language-template\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;title&gt;修改模板引擎的标识符&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;{{ . | safe }}&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>为了让index.tmpl文件有语法显示，我们还需要配置一下</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096750.png\" alt=\"image-20200913213156919\" /></p>\n<p>然后我们加入 *.tmpl，保存即可</p>\n<h3>静态文件处理</h3>\n<p>当我们渲染的HTML文件中引用了静态文件时，我们只需要按照以下方式在渲染页面前调用<code>gin.Static</code>方法即可。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	r.Static(&quot;/static&quot;, &quot;./static&quot;)\n	r.LoadHTMLGlob(&quot;templates/**/*&quot;)\n   // ...\n	r.Run(&quot;:8080&quot;)\n}\n</code></pre>\n<h3>使用模板继承</h3>\n<p>Gin框架默认都是使用单模板，如果需要使用<code>block template</code>功能，可以通过<code>&quot;github.com/gin-contrib/multitemplate&quot;</code>库实现，具体示例如下：</p>\n<p>首先，假设我们项目目录下的templates文件夹下有以下模板文件，其中<code>home.tmpl</code>和<code>index.tmpl</code>继承了<code>base.tmpl</code>：</p>\n<pre><code class=\"language-bash\">templates\n├── includes\n│   ├── home.tmpl\n│   └── index.tmpl\n├── layouts\n│   └── base.tmpl\n└── scripts.tmpl\n</code></pre>\n<p>然后我们定义一个<code>loadTemplates</code>函数如下：</p>\n<pre><code class=\"language-go\">func loadTemplates(templatesDir string) multitemplate.Renderer {\n	r := multitemplate.NewRenderer()\n	layouts, err := filepath.Glob(templatesDir + &quot;/layouts/*.tmpl&quot;)\n	if err != nil {\n		panic(err.Error())\n	}\n	includes, err := filepath.Glob(templatesDir + &quot;/includes/*.tmpl&quot;)\n	if err != nil {\n		panic(err.Error())\n	}\n	// 为layouts/和includes/目录生成 templates map\n	for _, include := range includes {\n		layoutCopy := make([]string, len(layouts))\n		copy(layoutCopy, layouts)\n		files := append(layoutCopy, include)\n		r.AddFromFiles(filepath.Base(include), files...)\n	}\n	return r\n}\n</code></pre>\n<p>我们在<code>main</code>函数中</p>\n<pre><code class=\"language-go\">func indexFunc(c *gin.Context){\n	c.HTML(http.StatusOK, &quot;index.tmpl&quot;, nil)\n}\n\nfunc homeFunc(c *gin.Context){\n	c.HTML(http.StatusOK, &quot;home.tmpl&quot;, nil)\n}\n\nfunc main(){\n	r := gin.Default()\n	r.HTMLRender = loadTemplates(&quot;./templates&quot;)\n	r.GET(&quot;/index&quot;, indexFunc)\n	r.GET(&quot;/home&quot;, homeFunc)\n	r.Run()\n}\n</code></pre>\n<h3>补充文件路径处理</h3>\n<p>关于模板文件和静态文件的路径，我们需要根据公司/项目的要求进行设置。可以使用下面的函数获取当前执行程序的路径。</p>\n<pre><code class=\"language-go\">func getCurrentPath() string {\n	if ex, err := os.Executable(); err == nil {\n		return filepath.Dir(ex)\n	}\n	return &quot;./&quot;\n}\n</code></pre>\n<h3>JSON渲染</h3>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n\n	// gin.H 是map[string]interface{}的缩写\n	r.GET(&quot;/someJSON&quot;, func(c *gin.Context) {\n		// 方式一：自己拼接JSON\n		c.JSON(http.StatusOK, gin.H{&quot;message&quot;: &quot;Hello world!&quot;})\n	})\n	r.GET(&quot;/moreJSON&quot;, func(c *gin.Context) {\n		// 方法二：使用结构体\n		var msg struct {\n			Name    string `json:&quot;user&quot;`\n			Message string\n			Age     int\n		}\n		msg.Name = &quot;小王子&quot;\n		msg.Message = &quot;Hello world!&quot;\n		msg.Age = 18\n		c.JSON(http.StatusOK, msg)\n	})\n	r.Run(&quot;:8080&quot;)\n}\n</code></pre>\n<h3>XML渲染</h3>\n<p>注意需要使用具名的结构体类型。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	// gin.H 是map[string]interface{}的缩写\n	r.GET(&quot;/someXML&quot;, func(c *gin.Context) {\n		// 方式一：自己拼接JSON\n		c.XML(http.StatusOK, gin.H{&quot;message&quot;: &quot;Hello world!&quot;})\n	})\n	r.GET(&quot;/moreXML&quot;, func(c *gin.Context) {\n		// 方法二：使用结构体\n		type MessageRecord struct {\n			Name    string\n			Message string\n			Age     int\n		}\n		var msg MessageRecord\n		msg.Name = &quot;小王子&quot;\n		msg.Message = &quot;Hello world!&quot;\n		msg.Age = 18\n		c.XML(http.StatusOK, msg)\n	})\n	r.Run(&quot;:8080&quot;)\n}\n</code></pre>\n<h3>YMAL渲染</h3>\n<pre><code class=\"language-go\">r.GET(&quot;/someYAML&quot;, func(c *gin.Context) {\n	c.YAML(http.StatusOK, gin.H{&quot;message&quot;: &quot;ok&quot;, &quot;status&quot;: http.StatusOK})\n})\n</code></pre>\n<h3>protobuf渲染</h3>\n<pre><code class=\"language-go\">r.GET(&quot;/someProtoBuf&quot;, func(c *gin.Context) {\n	reps := []int64{int64(1), int64(2)}\n	label := &quot;test&quot;\n	// protobuf 的具体定义写在 testdata/protoexample 文件中。\n	data := &amp;protoexample.Test{\n		Label: &amp;label,\n		Reps:  reps,\n	}\n	// 请注意，数据在响应中变为二进制数据\n	// 将输出被 protoexample.Test protobuf 序列化了的数据\n	c.ProtoBuf(http.StatusOK, data)\n})\n</code></pre>\n<h2>获取参数</h2>\n<h3>获取querystring参数</h3>\n<p><code>querystring</code>指的是URL中<code>?</code>后面携带的参数，例如：<code>/user/search?username=小王子&amp;address=沙河</code>。 获取请求的querystring参数的方法如下：</p>\n<pre><code class=\"language-go\">func main() {\n	//Default返回一个默认的路由引擎\n	r := gin.Default()\n	r.GET(&quot;/user/search&quot;, func(c *gin.Context) {\n        // 可以添加默认值\n		username := c.DefaultQuery(&quot;username&quot;, &quot;小王子&quot;)\n		//username := c.Query(&quot;username&quot;)\n		address := c.Query(&quot;address&quot;)\n		//输出json结果给调用方\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;:  &quot;ok&quot;,\n			&quot;username&quot;: username,\n			&quot;address&quot;:  address,\n		})\n	})\n	r.Run()\n}\n</code></pre>\n<p>我们输入对应的URL，就能获取到对应的参数了</p>\n<pre><code class=\"language-bash\">http://localhost:9090/web?username=小王子&amp;address=沙河\n</code></pre>\n<h3>获取form参数</h3>\n<p>请求的数据通过form表单来提交，例如向<code>/user/search</code>发送一个POST请求，获取请求数据的方式如下：</p>\n<pre><code class=\"language-go\">func main() {\n	//Default返回一个默认的路由引擎\n	r := gin.Default()\n	r.POST(&quot;/user/search&quot;, func(c *gin.Context) {\n		// DefaultPostForm取不到值时会返回指定的默认值\n		//username := c.DefaultPostForm(&quot;username&quot;, &quot;小王子&quot;)\n		username := c.PostForm(&quot;username&quot;)\n		address := c.PostForm(&quot;address&quot;)\n		//输出json结果给调用方\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;:  &quot;ok&quot;,\n			&quot;username&quot;: username,\n			&quot;address&quot;:  address,\n		})\n	})\n	r.Run(&quot;:8080&quot;)\n}\n</code></pre>\n<h3>获取path参数</h3>\n<p>请求的参数通过URL路径传递，例如：<code>/user/search/小王子/沙河</code>。 获取请求URL路径中的参数的方式如下。</p>\n<pre><code class=\"language-go\">func main() {\n	//Default返回一个默认的路由引擎\n	r := gin.Default()\n	r.GET(&quot;/user/search/:username/:address&quot;, func(c *gin.Context) {\n		username := c.Param(&quot;username&quot;)\n		address := c.Param(&quot;address&quot;)\n		//输出json结果给调用方\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;:  &quot;ok&quot;,\n			&quot;username&quot;: username,\n			&quot;address&quot;:  address,\n		})\n	})\n\n	r.Run(&quot;:8080&quot;)\n}\n</code></pre>\n<h3>参数绑定</h3>\n<p>为了能够更方便的获取请求相关参数，提高开发效率，我们可以基于请求的<code>Content-Type</code>识别请求数据类型并利用反射机制自动提取请求中<code>QueryString</code>、<code>form表单</code>、<code>JSON</code>、<code>XML</code>等参数到结构体中。 下面的示例代码演示了<code>.ShouldBind()</code>强大的功能，它能够基于请求自动提取<code>JSON</code>、<code>form表单</code>和<code>QueryString</code>类型的数据，并把值绑定到指定的结构体对象。</p>\n<pre><code class=\"language-go\">// Binding from JSON\ntype Login struct {\n	User     string `form:&quot;user&quot; json:&quot;user&quot; binding:&quot;required&quot;`\n	Password string `form:&quot;password&quot; json:&quot;password&quot; binding:&quot;required&quot;`\n}\n\nfunc main() {\n	router := gin.Default()\n\n	// 绑定JSON的示例 ({&quot;user&quot;: &quot;q1mi&quot;, &quot;password&quot;: &quot;123456&quot;})\n	router.POST(&quot;/loginJSON&quot;, func(c *gin.Context) {\n		var login Login\n\n		if err := c.ShouldBind(&amp;login); err == nil {\n			fmt.Printf(&quot;login info:%#v\\n&quot;, login)\n			c.JSON(http.StatusOK, gin.H{\n				&quot;user&quot;:     login.User,\n				&quot;password&quot;: login.Password,\n			})\n		} else {\n			c.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: err.Error()})\n		}\n	})\n\n	// 绑定form表单示例 (user=q1mi&amp;password=123456)\n	router.POST(&quot;/loginForm&quot;, func(c *gin.Context) {\n		var login Login\n		// ShouldBind()会根据请求的Content-Type自行选择绑定器\n		if err := c.ShouldBind(&amp;login); err == nil {\n			c.JSON(http.StatusOK, gin.H{\n				&quot;user&quot;:     login.User,\n				&quot;password&quot;: login.Password,\n			})\n		} else {\n			c.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: err.Error()})\n		}\n	})\n\n	// 绑定QueryString示例 (/loginQuery?user=q1mi&amp;password=123456)\n	router.GET(&quot;/loginForm&quot;, func(c *gin.Context) {\n		var login Login\n		// ShouldBind()会根据请求的Content-Type自行选择绑定器\n		if err := c.ShouldBind(&amp;login); err == nil {\n			c.JSON(http.StatusOK, gin.H{\n				&quot;user&quot;:     login.User,\n				&quot;password&quot;: login.Password,\n			})\n		} else {\n			c.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: err.Error()})\n		}\n	})\n\n	// Listen and serve on 0.0.0.0:8080\n	router.Run(&quot;:8080&quot;)\n}\n</code></pre>\n<p><code>ShouldBind</code>会按照下面的顺序解析请求中的数据完成绑定：</p>\n<ol>\n<li>如果是 <code>GET</code> 请求，只使用 <code>Form</code> 绑定引擎（<code>query</code>）。</li>\n<li>如果是 <code>POST</code> 请求，首先检查 <code>content-type</code> 是否为 <code>JSON</code> 或 <code>XML</code>，然后再使用 <code>Form</code>（<code>form-data</code>）。</li>\n</ol>\n<h2>文件上传</h2>\n<h3>单个文件上传</h3>\n<p>文件上传前端页面代码：</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;title&gt;上传文件示例&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;f1&quot;&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>后端gin框架部分代码：</p>\n<pre><code class=\"language-go\">func main() {\n	router := gin.Default()\n	// 处理multipart forms提交文件时默认的内存限制是32 MiB\n	// 可以通过下面的方式修改\n	// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB\n	router.POST(&quot;/upload&quot;, func(c *gin.Context) {\n		// 单个文件\n		file, err := c.FormFile(&quot;f1&quot;)\n		if err != nil {\n			c.JSON(http.StatusInternalServerError, gin.H{\n				&quot;message&quot;: err.Error(),\n			})\n			return\n		}\n\n		log.Println(file.Filename)\n		dst := fmt.Sprintf(&quot;C:/tmp/%s&quot;, file.Filename)\n		// 上传文件到指定的目录\n		c.SaveUploadedFile(file, dst)\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;: fmt.Sprintf(&quot;\'%s\' uploaded!&quot;, file.Filename),\n		})\n	})\n	router.Run()\n}\n</code></pre>\n<h3>多个文件上传</h3>\n<pre><code class=\"language-go\">func main() {\n	router := gin.Default()\n	// 处理multipart forms提交文件时默认的内存限制是32 MiB\n	// 可以通过下面的方式修改\n	// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB\n	router.POST(&quot;/upload&quot;, func(c *gin.Context) {\n		// Multipart form\n		form, _ := c.MultipartForm()\n		files := form.File[&quot;file&quot;]\n\n		for index, file := range files {\n			log.Println(file.Filename)\n			dst := fmt.Sprintf(&quot;C:/tmp/%s_%d&quot;, file.Filename, index)\n			// 上传文件到指定的目录\n			c.SaveUploadedFile(file, dst)\n		}\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;: fmt.Sprintf(&quot;%d files uploaded!&quot;, len(files)),\n		})\n	})\n	router.Run()\n}\n</code></pre>\n<h2>重定向</h2>\n<h3>HTTP重定向</h3>\n<p>HTTP 重定向很容易。 内部、外部重定向均支持。</p>\n<pre><code class=\"language-go\">r.GET(&quot;/test&quot;, func(c *gin.Context) {\n	c.Redirect(http.StatusMovedPermanently, &quot;http://www.sogo.com/&quot;)\n})\n</code></pre>\n<h3>路由重定向</h3>\n<p>路由重定向，使用<code>HandleContext</code>：</p>\n<pre><code class=\"language-go\">r.GET(&quot;/test&quot;, func(c *gin.Context) {\n    // 指定重定向的URL\n    c.Request.URL.Path = &quot;/test2&quot;\n    r.HandleContext(c)\n})\nr.GET(&quot;/test2&quot;, func(c *gin.Context) {\n    c.JSON(http.StatusOK, gin.H{&quot;hello&quot;: &quot;world&quot;})\n})\n</code></pre>\n<h2>Gin路由</h2>\n<h3>普通路由</h3>\n<pre><code class=\"language-go\">r.GET(&quot;/index&quot;, func(c *gin.Context) {...})\nr.GET(&quot;/login&quot;, func(c *gin.Context) {...})\nr.POST(&quot;/login&quot;, func(c *gin.Context) {...})\n</code></pre>\n<p>此外，还有一个可以匹配所有请求方法的<code>Any</code>方法如下：</p>\n<pre><code class=\"language-go\">r.Any(&quot;/test&quot;, func(c *gin.Context) {...})\n</code></pre>\n<p>为没有配置处理函数的路由添加处理程序，默认情况下它返回404代码，下面的代码为没有匹配到路由的请求都返回<code>views/404.html</code>页面。</p>\n<pre><code class=\"language-go\">r.NoRoute(func(c *gin.Context) {\n		c.HTML(http.StatusNotFound, &quot;views/404.html&quot;, nil)\n	})\n</code></pre>\n<h3>路由组</h3>\n<p>我们可以将拥有共同URL前缀的路由划分为一个路由组。习惯性一对<code>{}</code>包裹同组的路由，这只是为了看着清晰，你用不用<code>{}</code>包裹功能上没什么区别。</p>\n<pre><code class=\"language-go\">func main() {\n	r := gin.Default()\n	userGroup := r.Group(&quot;/user&quot;)\n	{\n		userGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n		userGroup.GET(&quot;/login&quot;, func(c *gin.Context) {...})\n		userGroup.POST(&quot;/login&quot;, func(c *gin.Context) {...})\n\n	}\n	shopGroup := r.Group(&quot;/shop&quot;)\n	{\n		shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n		shopGroup.GET(&quot;/cart&quot;, func(c *gin.Context) {...})\n		shopGroup.POST(&quot;/checkout&quot;, func(c *gin.Context) {...})\n	}\n	r.Run()\n}\n</code></pre>\n<p>路由组也是支持嵌套的，例如：</p>\n<pre><code class=\"language-go\">shopGroup := r.Group(&quot;/shop&quot;)\n	{\n		shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n		shopGroup.GET(&quot;/cart&quot;, func(c *gin.Context) {...})\n		shopGroup.POST(&quot;/checkout&quot;, func(c *gin.Context) {...})\n		// 嵌套路由组\n		xx := shopGroup.Group(&quot;xx&quot;)\n		xx.GET(&quot;/oo&quot;, func(c *gin.Context) {...})\n	}\n</code></pre>\n<p>通常我们将路由分组用在划分业务逻辑或划分API版本时。</p>\n<h3>路由原理</h3>\n<p>Gin框架中的路由使用的是<a href=\"https://github.com/julienschmidt/httprouter\">httprouter</a>这个库。</p>\n<p>其基本原理就是构造一个路由地址的前缀树。</p>\n<h2>Gin中间件</h2>\n<p>Gin框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。</p>\n<h3>定义中间件</h3>\n<p>Gin中的中间件必须是一个<code>gin.HandlerFunc</code>类型。例如我们像下面的代码一样定义一个统计请求耗时的中间件。</p>\n<pre><code class=\"language-go\">// StatCost 是一个统计耗时请求耗时的中间件\nfunc StatCost() gin.HandlerFunc {\n	return func(c *gin.Context) {\n		start := time.Now()\n		c.Set(&quot;name&quot;, &quot;小王子&quot;) // 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值\n		// 调用该请求的剩余处理程序\n		c.Next()\n		// 不调用该请求的剩余处理程序\n		// c.Abort()\n		// 计算耗时\n		cost := time.Since(start)\n		log.Println(cost)\n	}\n}\n</code></pre>\n<h3>注册中间件</h3>\n<p>在gin框架中，我们可以为每个路由添加任意数量的中间件。</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096800.png\" alt=\"image-20200917210942305\" /></p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096849.png\" alt=\"image-20200917211033323\" /></p>\n<p>中间的这个通过 Abort() 可以阻止执行</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/10/13/1602552096877.png\" alt=\"image-20200917211259531\" /></p>\n<h4>为全局路由注册</h4>\n<pre><code class=\"language-go\">func main() {\n	// 新建一个没有任何默认中间件的路由\n	r := gin.New()\n	// 注册一个全局中间件\n	r.Use(StatCost())\n	\n	r.GET(&quot;/test&quot;, func(c *gin.Context) {\n		name := c.MustGet(&quot;name&quot;).(string) // 从上下文取值\n		log.Println(name)\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;: &quot;Hello world!&quot;,\n		})\n	})\n	r.Run()\n}\n</code></pre>\n<h4>为某个路由单独注册</h4>\n<pre><code class=\"language-go\">// 给/test2路由单独注册中间件（可注册多个）\n	r.GET(&quot;/test2&quot;, StatCost(), func(c *gin.Context) {\n		name := c.MustGet(&quot;name&quot;).(string) // 从上下文取值\n		log.Println(name)\n		c.JSON(http.StatusOK, gin.H{\n			&quot;message&quot;: &quot;Hello world!&quot;,\n		})\n	})\n</code></pre>\n<h4>为路由组注册中间件</h4>\n<p>为路由组注册中间件有以下两种写法。</p>\n<p>写法1：</p>\n<pre><code class=\"language-go\">shopGroup := r.Group(&quot;/shop&quot;, StatCost())\n{\n    shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n    ...\n}\n</code></pre>\n<p>写法2：</p>\n<pre><code class=\"language-go\">shopGroup := r.Group(&quot;/shop&quot;)\nshopGroup.Use(StatCost())\n{\n    shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) {...})\n    ...\n}\n</code></pre>\n<h3>中间件注意事项</h3>\n<h4>gin默认中间件</h4>\n<p><code>gin.Default()</code>默认使用了<code>Logger</code>和<code>Recovery</code>中间件，其中：</p>\n<ul>\n<li><code>Logger</code>中间件将日志写入<code>gin.DefaultWriter</code>，即使配置了<code>GIN_MODE=release</code>。</li>\n<li><code>Recovery</code>中间件会recover任何<code>panic</code>。如果有panic的话，会写入500响应码。</li>\n</ul>\n<p>如果不想使用上面两个默认的中间件，可以使用<code>gin.New()</code>新建一个没有任何默认中间件的路由。</p>\n<h4>gin中间件中使用goroutine</h4>\n<p>当在中间件或<code>handler</code>中启动新的<code>goroutine</code>时，<strong>不能使用</strong>原始的上下文（c *gin.Context），必须使用其只读副本（<code>c.Copy()</code>）。</p>\n<h2>运行多个服务</h2>\n<p>我们可以在多个端口启动服务，例如：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;log&quot;\n	&quot;net/http&quot;\n	&quot;time&quot;\n\n	&quot;github.com/gin-gonic/gin&quot;\n	&quot;golang.org/x/sync/errgroup&quot;\n)\n\nvar (\n	g errgroup.Group\n)\n\nfunc router01() http.Handler {\n	e := gin.New()\n	e.Use(gin.Recovery())\n	e.GET(&quot;/&quot;, func(c *gin.Context) {\n		c.JSON(\n			http.StatusOK,\n			gin.H{\n				&quot;code&quot;:  http.StatusOK,\n				&quot;error&quot;: &quot;Welcome server 01&quot;,\n			},\n		)\n	})\n\n	return e\n}\n\nfunc router02() http.Handler {\n	e := gin.New()\n	e.Use(gin.Recovery())\n	e.GET(&quot;/&quot;, func(c *gin.Context) {\n		c.JSON(\n			http.StatusOK,\n			gin.H{\n				&quot;code&quot;:  http.StatusOK,\n				&quot;error&quot;: &quot;Welcome server 02&quot;,\n			},\n		)\n	})\n\n	return e\n}\n\nfunc main() {\n	server01 := &amp;http.Server{\n		Addr:         &quot;:8080&quot;,\n		Handler:      router01(),\n		ReadTimeout:  5 * time.Second,\n		WriteTimeout: 10 * time.Second,\n	}\n\n	server02 := &amp;http.Server{\n		Addr:         &quot;:8081&quot;,\n		Handler:      router02(),\n		ReadTimeout:  5 * time.Second,\n		WriteTimeout: 10 * time.Second,\n	}\n   // 借助errgroup.Group或者自行开启两个goroutine分别启动两个服务\n	g.Go(func() error {\n		return server01.ListenAndServe()\n	})\n\n	g.Go(func() error {\n		return server02.ListenAndServe()\n	})\n\n	if err := g.Wait(); err != nil {\n		log.Fatal(err)\n	}\n}\n</code></pre>\n','7e0e93ea6cdb44ae92e58f48e6496ed7',0,0,'d134bdfe255b9aa8c2ce44da8297f6a6',0,'2020-10-13 09:21:43','2020-10-13 09:21:47','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'0',0,1,0,NULL,17),('982cb047f1672d03324db6be18bfb373','go','go','<blockquote>\n<p>go测试</p>\n</blockquote>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;context&quot;\n	&quot;fmt&quot;\n	&quot;go.etcd.io/etcd/clientv3&quot;\n	&quot;time&quot;\n)\n\nfunc main() {\n	cli, err := clientv3.New(clientv3.Config {\n		Endpoints: []string{&quot;127.0.0.1:2379&quot;}, // etcd的节点，可以传入多个\n		DialTimeout: 5*time.Second, // 连接超时时间\n	})\n\n	if err != nil {\n		fmt.Printf(&quot;connect to etcd failed, err: %v \\n&quot;, err)\n		return\n	}\n	fmt.Println(&quot;connect to etcd success&quot;)\n\n	// 延迟关闭\n	defer cli.Close()\n\n	// put操作  设置1秒超时\n	ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n	_, err = cli.Put(ctx, &quot;moxi&quot;, &quot;lalala&quot;)\n	cancel()\n	if err != nil {\n		fmt.Printf(&quot;put to etcd failed, err:%v \\n&quot;, err)\n		return\n	}\n\n	// get操作，设置1秒超时\n	ctx, cancel = context.WithTimeout(context.Background(), time.Second)\n	resp, err := cli.Get(ctx, &quot;q1mi&quot;)\n	cancel()\n	if err != nil {\n		fmt.Printf(&quot;get from etcd failed, err:%v \\n&quot;, err)\n		return\n	}\n	fmt.Println(resp)\n}\n\n\n\n\n\n</code></pre>\n<h3 id=\"测试\">测试</h3>\n<p>今天我们在做啥呢</p>\n<p>我觉得还不错呢？</p>\n','5626932d452c2ad863d9b3cb0b69d22d',2,0,NULL,0,'2020-09-11 19:41:35','2020-09-14 10:32:20','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,18),('9d7a6531cd55f415a0b26712f6fecc7a','【JVM】垃圾回收相关概念','【JVM】垃圾回收相关概念','<h1>垃圾回收相关概念</h1>\n\n<h2>System.gc()的理解</h2>\n\n<p>在默认情况下，通过system.gc（）者Runtime.getRuntime().gc() 的调用，会显式触发FullGC，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。</p>\n\n<p>然而system.gc() )调用附带一个免责声明，无法保证对垃圾收集器的调用。(不能确保立即生效)</p>\n\n<p>JVM实现者可以通过system.gc() 调用来决定JVM的GC行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦了。在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用System.gc()</p>\n\n<p>代码演示是否出发GC操作</p>\n\n<pre>\n<code class=\"language-java\">/**\n * System.gc()\n *\n * @author: 陌溪\n * @create: 2020-07-12-19:07\n */\npublic class SystemGCTest {\n    public static void main(String[] args) {\n        new SystemGCTest();\n        // 提醒JVM进行垃圾回收\n        System.gc();\n        //System.runFinalization();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"SystemGCTest 执行了 finalize方法\");\n    }\n}\n\n</code></pre>\n\n<p>运行结果，但是不一定会触发销毁的方法，调用System.runFinalization()会强制调用 失去引用对象的finalize()</p>\n\n<pre>\n<code>SystemGCTest 执行了 finalize方法\n\n</code></pre>\n\n<h3>手动GC来理解不可达对象的回收</h3>\n\n<p>代码如下所示：</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 局部变量回收\n *\n * @author: 陌溪\n * @create: 2020-07-12-19:12\n */\npublic class LocalVarGC {\n\n    /**\n     * 触发Minor GC没有回收对象，然后在触发Full GC将该对象存入old区\n     */\n    public void localvarGC1() {\n        byte[] buffer = new byte[10*1024*1024];\n        System.gc();\n    }\n\n    /**\n     * 触发YoungGC的时候，已经被回收了\n     */\n    public void localvarGC2() {\n        byte[] buffer = new byte[10*1024*1024];\n        buffer = null;\n        System.gc();\n    }\n\n    /**\n     * 不会被回收，因为它还存放在局部变量表索引为1的槽中\n     */\n    public void localvarGC3() {\n        {\n            byte[] buffer = new byte[10*1024*1024];\n        }\n        System.gc();\n    }\n\n    /**\n     * 会被回收，因为它还存放在局部变量表索引为1的槽中，但是后面定义的value把这个槽给替换了\n     */\n    public void localvarGC4() {\n        {\n            byte[] buffer = new byte[10*1024*1024];\n        }\n        int value = 10;\n        System.gc();\n    }\n\n    /**\n     * localvarGC5中的数组已经被回收\n     */\n    public void localvarGC5() {\n        localvarGC1();\n        System.gc();\n    }\n\n    public static void main(String[] args) {\n        LocalVarGC localVarGC = new LocalVarGC();\n        localVarGC.localvarGC3();\n    }\n}\n\n</code></pre>\n\n<h2>内存溢出</h2>\n\n<p>内存溢出相对于内存泄漏来说，尽管更容易被理解，但是同样的，内存溢出也是引发程序崩溃的罪魁祸首之一。</p>\n\n<p>由于GC一直在发展，所有一般情况下，除非应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度，否则不太容易出现ooM的情况。</p>\n\n<p>大多数情况下，GC会进行各种年龄段的垃圾回收，实在不行了就放大招，来一次独占式的Fu11GC操作，这时候会回收大量的内存，供应用程序继续使用。</p>\n\n<p>javadoc中对outofMemoryError的解释是，没有空闲内存，并且垃圾收集器也无法提供更多内存。</p>\n\n<p>首先说没有空闲内存的情况：说明Java虚拟机的堆内存不够。原因有二：</p>\n\n<ul>\n	<li>Java虚拟机的堆内存设置不够。</li>\n</ul>\n\n<p>比如：可能存在内存泄漏问题；也很有可能就是堆的大小不合理，比如我们要处理比较可观的数据量，但是没有显式指定JVM堆大小或者指定数值偏小。我们可以通过参数-Xms 、-Xmx来调整。</p>\n\n<ul>\n	<li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）</li>\n</ul>\n\n<p>对于老版本的oracle JDK，因为永久代的大小是有限的，并且JVM对永久代垃圾回收（如，常量池回收、卸载不再需要的类型）非常不积极，所以当我们不断添加新类型的时候，永久代出现OutOfMemoryError也非常多见，尤其是在运行时存在大量动态类型生成的场合；类似intern字符串缓存占用太多空间，也会导致OOM问题。对应的异常信息，会标记出来和永久代相关：&ldquo;java.lang.OutOfMemoryError:PermGen space&quot;。</p>\n\n<p>随着元数据区的引入，方法区内存已经不再那么窘迫，所以相应的ooM有所改观，出现ooM，异常信息则变成了：&ldquo;java.lang.OutofMemoryError:Metaspace&quot;。直接内存不足，也会导致OOM。</p>\n\n<p>这里面隐含着一层意思是，在抛出OutofMemoryError之前，通常垃圾收集器会被触发，尽其所能去清理出空间。</p>\n\n<blockquote>\n<p>例如：在引用机制分析中，涉及到JVM会去尝试回收软引用指向的对象等。 在java.nio.BIts.reserveMemory（）方法中，我们能清楚的看到，System.gc（）会被调用，以清理空间。</p>\n</blockquote>\n\n<p>当然，也不是在任何情况下垃圾收集器都会被触发的</p>\n\n<p>比如，我们去分配一个超大对象，类似一个超大数组超过堆的最大值，JVM可以判断出垃圾收集并不能解决这个问题，所以直接抛出OutofMemoryError。</p>\n\n<h2>内存泄漏</h2>\n\n<p>也称作&ldquo;存储渗漏&rdquo;。严格来说，只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄漏。</p>\n\n<p>但实际情况很多时候一些不太好的实践（或疏忽）会导致对象的生命周期变得很长甚至导致00M，也可以叫做宽泛意义上的&ldquo;内存泄漏&rdquo;。</p>\n\n<p>尽管内存泄漏并不会立刻引起程序崩溃，但是一旦发生内存泄漏，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现outofMemory异常，导致程序崩溃。</p>\n\n<p>注意，这里的存储空间并不是指物理内存，而是指虚拟内存大小，这个虚拟内存大小取决于磁盘交换区设定的大小。</p>\n\n<blockquote>\n<p>买房子：80平的房子，但是有10平是公摊的面积，我们是无法使用这10平的空间，这就是所谓的内存泄漏</p>\n</blockquote>\n\n<p><img alt=\"image-20200712195158470\" src=\"http://image.moguit.cn/046b13313dee4023bc580c1943e46008\" /></p>\n\n<p>Java使用可达性分析算法，最上面的数据不可达，就是需要被回收的。后期有一些对象不用了，按道理应该断开引用，但是存在一些链没有断开，从而导致没有办法被回收。</p>\n\n<h3>举例</h3>\n\n<ul>\n	<li>单例模式</li>\n</ul>\n\n<p>单例的生命周期和应用程序是一样长的，所以单例程序中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄漏的产生。</p>\n\n<ul>\n	<li>一些提供close的资源未关闭导致内存泄漏</li>\n</ul>\n\n<p>数据库连接（dataSourse.getConnection() ），网络连接（socket）和io连接必须手动close，否则是不能被回收的。</p>\n\n<h2>Stop The World</h2>\n\n<p>stop-the-world，简称STw，指的是GC事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这个停顿称为STW。</p>\n\n<p>可达性分析算法中枚举根节点（GC Roots）会导致所有Java执行线程停顿。</p>\n\n<ul>\n	<li>分析工作必须在一个能确保一致性的快照中进行</li>\n	<li>一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上</li>\n	<li>如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证</li>\n</ul>\n\n<p>被STW中断的应用程序线程会在完成GC之后恢复，频繁中断会让用户感觉像是网速不快造成电影卡带一样，所以我们需要减少STw的发生。</p>\n\n<p>STW事件和采用哪款GC无关所有的GC都有这个事件。</p>\n\n<p>哪怕是G1也不能完全避免Stop-the-world情况发生，只能说垃圾回收器越来越优秀，回收效率越来越高，尽可能地缩短了暂停时间。</p>\n\n<p>STW是JVM在后台自动发起和自动完成的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</p>\n\n<p>开发中不要用system.gc() 会导致stop-the-world的发生。</p>\n\n<h2>垃圾回收的并行与并发</h2>\n\n<h3>并发</h3>\n\n<p>在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理器上运行。</p>\n\n<p>并发不是真正意义上的&ldquo;同时进行&rdquo;，只是CPU把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换，由于CPU处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行。</p>\n\n<p><img alt=\"image-20200712202522051\" src=\"http://image.moguit.cn/0f4dfad3e0f14f2bbb7329f4533e2dc8\" /></p>\n\n<h3>并行</h3>\n\n<p>当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，我们称之为并行（Paralle1）。</p>\n\n<p>其实决定并行的因素不是CPU的数量，而是CPU的核心数量，比如一个CPU多个核也可以并行。</p>\n\n<p>适合科学计算，后台处理等弱交互场景</p>\n\n<p><img alt=\"image-20200712202822129\" src=\"http://image.moguit.cn/2340ed2b3f6047f5b34fc4cc52cc9d0f\" /></p>\n\n<h3>并发和并行对比</h3>\n\n<p><strong>并发</strong>，指的是多个事情，在同一时间段内同时发生了。</p>\n\n<p><strong>并行</strong>，指的是多个事情，在同一时间点上同时发生了。</p>\n\n<p>并发的多个任务之间是互相抢占资源的。并行的多个任务之间是不互相抢占资源的。</p>\n\n<p>只有在多CPU或者一个CPU多核的情况中，才会发生并行。</p>\n\n<p>否则，看似同时发生的事情，其实都是并发执行的。</p>\n\n<h3>垃圾回收的并行与并发</h3>\n\n<p>并发和并行，在谈论垃圾收集器的上下文语境中，它们可以解释如下：</p>\n\n<ul>\n	<li>并行（Paralle1）：指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。如ParNew、Parallel Scavenge、Parallel old；</li>\n	<li>串行（Serial）\n	<ul>\n		<li>相较于并行的概念，单线程执行。</li>\n		<li>如果内存不够，则程序暂停，启动JM垃圾回收器进行垃圾回收。回收完，再启动程序的线程。</li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"image-20200712203607845\" src=\"http://image.moguit.cn/9472580fa84a4ac5946c7144986436e5\" /></p>\n\n<p>并发和并行，在谈论垃圾收集器的上下文语境中，它们可以解释如下：</p>\n\n<p>并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），垃圾回收线程在执行时不会停顿用户程序的运行。&gt;用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；</p>\n\n<blockquote>\n<p>如：CMS、G1</p>\n</blockquote>\n\n<p><img alt=\"image-20200712203815517\" src=\"http://image.moguit.cn/74acc61000e844ca88edecd38720c5e1\" /></p>\n\n<h2>安全点与安全区域</h2>\n\n<h3>安全点</h3>\n\n<p>程序执行时并非在所有地方都能停顿下来开始GC，只有在特定的位置才能停顿下来开始GC，这些位置称为&ldquo;安全点（Safepoint）&rdquo;。</p>\n\n<p>Safe Point的选择很重要，如果太少可能导致GC等待的时间太长，如果太频繁可能导致运行时的性能问题。大部分指令的执行时间都非常短暂，通常会根据&ldquo;是否具有让程序长时间执行的特征&rdquo;为标准。比如：选择一些执行时间较长的指令作为Safe Point，如方法调用、循环跳转和异常跳转等。</p>\n\n<p>如何在cc发生时，检查所有线程都跑到最近的安全点停顿下来呢？</p>\n\n<ul>\n	<li><strong>抢先式中断</strong>：（目前没有虚拟机采用了）首先中断所有线程。如果还有线程不在安全点，就恢复线程，让线程跑到安全点。</li>\n	<li><strong>主动式中断</strong>：设置一个中断标志，各个线程运行到Safe Point的时候主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起。（有轮询的机制）</li>\n</ul>\n\n<h3>安全区域</h3>\n\n<p>Safepoint 机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序&ldquo;不执行&rdquo;的时候呢？例如线程处于sleep-状态或Blocked 状态，这时候线程无法响应JVM的中断请求，&ldquo;走&rdquo;到安全点去中断挂起，JVM也不太可能等待线程被唤醒。对于这种情况，就需要安全区域（Safe Region）来解决。</p>\n\n<p>安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始Gc都是安全的。我们也可以把Safe Region看做是被扩展了的Safepoint。</p>\n\n<p><strong>执行流程：</strong></p>\n\n<ul>\n	<li>当线程运行到Safe Region的代码时，首先标识已经进入了Safe Relgion，如果这段时间内发生GC，JVM会忽略标识为Safe Region状态的线程</li>\n	<li>当线程即将离开Safe Region时，会检查JVM是否已经完成GC，如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开Safe Region的信号为止；</li>\n</ul>\n\n<h2>再谈引用</h2>\n\n<p>我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存中；如果内存空间在进行垃圾收集后还是很紧张，则可以抛弃这些对象。</p>\n\n<p>【既偏门又非常高频的面试题】强引用、软引用、弱引用、虚引用有什么区别？具体使用场景是什么？ 在JDK1.2版之后，Java对引用的概念进行了扩充，将引用分为：</p>\n\n<ul>\n	<li>强引用（Strong Reference）</li>\n	<li>软引用（Soft Reference）</li>\n	<li>弱引用（Weak Reference）</li>\n	<li>虚引用（Phantom Reference）</li>\n</ul>\n\n<p>这4种引用强度依次逐渐减弱。除强引用外，其他3种引用均可以在java.1ang.ref包中找到它们的身影。如下图，显示了这3种引用类型对应的类，开发人员可以在应用程序中直接使用它们。</p>\n\n<p>.<img alt=\"image-20200712205813321\" src=\"http://image.moguit.cn/6105615a5ecf4e47a77b96f8a52de0c2\" /></p>\n\n<p>Reference子类中只有终结器引用是包内可见的，其他3种引用类型均为public，可以在应用程序中直接使用</p>\n\n<ul>\n	<li>强引用（StrongReference）：最传统的&ldquo;引用&rdquo;的定义，是指在程序代码之中普遍存在的引用赋值，即类似&ldquo;object obj=new Object（）&rdquo;这种引用关系。无论任何情况下，==只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象==。</li>\n	<li>软引用（SoftReference）：在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存流出异常。</li>\n	<li>弱引用（WeakReference）：被弱引用关联的对象只能生存到下一次垃圾收集之前。当垃圾收集器工作时，无论内存空间是否足够，都会回收掉被弱引用关联的对象。</li>\n	<li>虚引用（PhantomReference）：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象的实例。==为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知==。</li>\n</ul>\n\n<h2>再谈引用：强引用</h2>\n\n<p>在Java程序中，最常见的引用类型是强引用（普通系统99%以上都是强引用），也就是我们最常见的普通对象引用，也是默认的引用类型。</p>\n\n<p>当在Java语言中使用new操作符创建一个新的对象，并将其赋值给一个变量的时候，这个变量就成为指向该对象的一个强引用。</p>\n\n<p>强引用的对象是可触及的，垃圾收集器就永远不会回收掉被引用的对象。</p>\n\n<p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为nu11，就是可以当做垃圾被收集了，当然具体回收时机还是要看垃圾收集策略。</p>\n\n<p>相对的，软引用、弱引用和虚引用的对象是软可触及、弱可触及和虚可触及的，在一定条件下，都是可以被回收的。所以，强引用是造成Java内存泄漏的主要原因之一。</p>\n\n<h3>举例</h3>\n\n<p>强引用的案例说明</p>\n\n<pre>\n<code class=\"language-java\">StringBuffer str = new StringBuffer(\"hello mogublog\");\n\n</code></pre>\n\n<p>局部变量str指向stringBuffer实例所在堆空间，通过str可以操作该实例，那么str就是stringBuffer实例的强引用对应内存结构：</p>\n\n<p><img alt=\"image-20200712211501377\" src=\"http://image.moguit.cn/6630ccac8d024a68be11c02811592741\" /></p>\n\n<p>如果此时，在运行一个赋值语句</p>\n\n<pre>\n<code class=\"language-java\">StringBuffer str = new StringBuffer(\"hello mogublog\");\nStringBuffer str1 = str;\n\n</code></pre>\n\n<p>对应的内存结构为:</p>\n\n<p><img alt=\"image-20200712211732976\" src=\"http://image.moguit.cn/fad5c54af6674a5b8231404ee0a69ac2\" /></p>\n\n<p>那么我们将 str = null; 则 原来堆中的对象也不会被回收，因为还有其它对象指向该区域</p>\n\n<h3>总结</h3>\n\n<p>本例中的两个引用，都是强引用，强引用具备以下特点：</p>\n\n<ul>\n	<li>强引用可以直接访问目标对象。</li>\n	<li>强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出OOM异常，也不会回收强引用所指向对象。</li>\n	<li>强引用可能导致内存泄漏。</li>\n</ul>\n\n<h2>再谈引用： 软引用</h2>\n\n<p>软引用是用来描述一些还有用，但非必需的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p>\n\n<blockquote>\n<p>注意，这里的第一次回收是不可达的对象</p>\n</blockquote>\n\n<p>软引用通常用来实现内存敏感的缓存。比如：高速缓存就有用到软引用。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p>\n\n<p>垃圾回收器在某个时刻决定回收软可达的对象的时候，会清理软引用，并可选地把引用存放到一个引用队列（Reference Queue）。</p>\n\n<p>类似弱引用，只不过Java虚拟机会尽量让软引用的存活时间长一些，迫不得已才清理。</p>\n\n<blockquote>\n<p>一句话概括：当内存足够时，不会回收软引用可达的对象。内存不够时，会回收软引用的可达对象</p>\n</blockquote>\n\n<p>在JDK1.2版之后提供了SoftReference类来实现软引用</p>\n\n<pre>\n<code class=\"language-java\">// 声明强引用\nObject obj = new Object();\n// 创建一个软引用\nSoftReference&lt;Object&gt; sf = new SoftReference&lt;&gt;(obj);\nobj = null; //销毁强引用，这是必须的，不然会存在强引用和软引用\n\n</code></pre>\n\n<h2>再谈引用：弱引用</h2>\n\n<blockquote>\n<p>发现即回收</p>\n</blockquote>\n\n<p>弱引用也是用来描述那些非必需对象，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。在系统GC时，只要发现弱引用，不管系统堆空间使用是否充足，都会回收掉只被弱引用关联的对象。</p>\n\n<p>但是，由于垃圾回收器的线程通常优先级很低，因此，并不一定能很快地发现持有弱引用的对象。在这种情况下，弱引用对象可以存在较长的时间。</p>\n\n<p>弱引用和软引用一样，在构造弱引用时，也可以指定一个引用队列，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以跟踪对象的回收情况。</p>\n\n<p>软引用、弱引用都非常适合来保存那些可有可无的缓存数据。如果这么做，当系统内存不足时，这些缓存数据会被回收，不会导致内存溢出。而当内存资源充足时，这些缓存数据又可以存在相当长的时间，从而起到加速系统的作用。</p>\n\n<p>在JDK1.2版之后提供了WeakReference类来实现弱引用</p>\n\n<pre>\n<code class=\"language-java\">// 声明强引用\nObject obj = new Object();\n// 创建一个弱引用\nWeakReference&lt;Object&gt; sf = new WeakReference&lt;&gt;(obj);\nobj = null; //销毁强引用，这是必须的，不然会存在强引用和弱引用\n\n</code></pre>\n\n<p>弱引用对象与软引用对象的最大不同就在于，当GC在进行回收时，需要通过算法检查是否回收软引用对象，而对于弱引用对象，GC总是进行回收。弱引用对象更容易、更快被GC回收。</p>\n\n<p>面试题：你开发中使用过WeakHashMap吗？</p>\n\n<p>WeakHashMap用来存储图片信息，可以在内存不足的时候，及时回收，避免了OOM</p>\n\n<h2>再谈引用：虚引用</h2>\n\n<p>也称为&ldquo;幽灵引用&rdquo;或者&ldquo;幻影引用&rdquo;，是所有引用类型中最弱的一个</p>\n\n<p>一个对象是否有虚引用的存在，完全不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它和没有引用几乎是一样的，随时都可能被垃圾回收器回收。</p>\n\n<p>它不能单独使用，也无法通过虚引用来获取被引用的对象。当试图通过虚引用的get（）方法取得对象时，总是null</p>\n\n<p>为一个对象设置虚引用关联的唯一目的在于跟踪垃圾回收过程。比如：能在这个对象被收集器回收时收到一个系统通知。</p>\n\n<p>虚引用必须和引用队列一起使用。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。</p>\n\n<p>由于虚引用可以跟踪对象的回收时间，因此，也可以将一些资源释放操作放置在虚引用中执行和记录。</p>\n\n<blockquote>\n<p>虚引用无法获取到我们的数据</p>\n</blockquote>\n\n<p>在JDK1.2版之后提供了PhantomReference类来实现虚引用。</p>\n\n<pre>\n<code class=\"language-java\">// 声明强引用\nObject obj = new Object();\n// 声明引用队列\nReferenceQueue phantomQueue = new ReferenceQueue();\n// 声明虚引用（还需要传入引用队列）\nPhantomReference&lt;Object&gt; sf = new PhantomReference&lt;&gt;(obj, phantomQueue);\nobj = null; \n\n</code></pre>\n\n<h3>案例</h3>\n\n<p>我们使用一个案例，来结合虚引用，引用队列，finalize进行讲解</p>\n\n<pre>\n<code class=\"language-java\">/**\n * @author: 陌溪\n * @create: 2020-07-12-21:42\n */\npublic class PhantomReferenceTest {\n    // 当前类对象的声明\n    public static PhantomReferenceTest obj;\n    // 引用队列\n    static ReferenceQueue&lt;PhantomReferenceTest&gt; phantomQueue = null;\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"调用当前类的finalize方法\");\n        obj = this;\n    }\n\n    public static void main(String[] args) {\n        Thread thread = new Thread(() -&gt; {\n            while(true) {\n                if (phantomQueue != null) {\n                    PhantomReference&lt;PhantomReferenceTest&gt; objt = null;\n                    try {\n                        objt = (PhantomReference&lt;PhantomReferenceTest&gt;) phantomQueue.remove();\n                    } catch (Exception e) {\n                        e.getStackTrace();\n                    }\n                    if (objt != null) {\n                        System.out.println(\"追踪垃圾回收过程：PhantomReferenceTest实例被GC了\");\n                    }\n                }\n            }\n        }, \"t1\");\n        thread.setDaemon(true);\n        thread.start();\n\n        phantomQueue = new ReferenceQueue&lt;&gt;();\n        obj = new PhantomReferenceTest();\n        // 构造了PhantomReferenceTest对象的虚引用，并指定了引用队列\n        PhantomReference&lt;PhantomReferenceTest&gt; phantomReference = new PhantomReference&lt;&gt;(obj, phantomQueue);\n        try {\n            System.out.println(phantomReference.get());\n            // 去除强引用\n            obj = null;\n            // 第一次进行GC，由于对象可复活，GC无法回收该对象\n            System.out.println(\"第一次GC操作\");\n            System.gc();\n            Thread.sleep(1000);\n            if (obj == null) {\n                System.out.println(\"obj 是 null\");\n            } else {\n                System.out.println(\"obj 不是 null\");\n            }\n            System.out.println(\"第二次GC操作\");\n            obj = null;\n            System.gc();\n            Thread.sleep(1000);\n            if (obj == null) {\n                System.out.println(\"obj 是 null\");\n            } else {\n                System.out.println(\"obj 不是 null\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n\n        }\n    }\n}\n\n</code></pre>\n\n<p>最后运行结果</p>\n\n<pre>\n<code class=\"language-java\">null\n第一次GC操作\n调用当前类的finalize方法\nobj 不是 null\n第二次GC操作\n追踪垃圾回收过程：PhantomReferenceTest实例被GC了\nobj 是 null\n\n</code></pre>\n\n<p>从上述运行结果我们知道，第一次尝试获取虚引用的值，发现无法获取的，这是因为虚引用是无法直接获取对象的值，然后进行第一次gc，因为会调用finalize方法，将对象复活了，所以对象没有被回收，但是调用第二次gc操作的时候，因为finalize方法只能执行一次，所以就触发了GC操作，将对象回收了，同时将会触发第二个操作就是 将回收的值存入到引用队列中。</p>\n\n<h2>终结器引用</h2>\n\n<p>它用于实现对象的finalize() 方法，也可以称为终结器引用</p>\n\n<p>无需手动编码，其内部配合引用队列使用</p>\n\n<p>在GC时，终结器引用入队。由Finalizer线程通过终结器引用找到被引用对象调用它的finalize()方法，第二次GC时才回收被引用的对象</p>\n','7e0e93ea6cdb44ae92e58f48e6496ed7,15721a34adba068763b5a2fb1991fc57,5626932d452c2ad863d9b3cb0b69d22d',20,1,'9f45252b76c4182a37c0a4d0bd81ea9b',1,'2020-08-17 01:19:35','2020-12-11 16:03:53','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','db0d64ea7df409de5d2d747927cfa1a5',0,'1',0,1,0,NULL,19),('9fa1fcd046b6cddb67c7859d050aeecd','标题','标题','<h1>CentOS下安装Nacos</h1>\n\n<h2>前言</h2>\n\n<p>这阵子因为蘑菇博客的镜像越来越大，所以就打算重新构建一下蘑菇博客的Docker镜像，这里就打算在Centos下安装配置Nacos，之前写过一篇博客关于Window下配置蘑菇博客的Nacos，感兴趣的小伙伴可以参考一下</p>\n\n<p><a href=\"http://moguit.cn/#/info?blogUid=8dc52bd61e36fa56cfc7699815375572\">Window蘑菇博客Nacos部署指南</a></p>\n\n<p><a href=\"http://moguit.cn/#/info?blogUid=e6e619349d31dded928c9265c5a9c672\">【SpringCloud】使用Nacos实现服务注册发现以及配置中心等功能</a></p>\n\n<h2>下载Linux版Nacos</h2>\n\n<p>首先我们到Nacos的 <a href=\"https://github.com/alibaba/nacos/releases\">Github页面</a>，找到我们需要安装的版本</p>\n\n<p><img alt=\"image-20200822112106696\" src=\"http://image.moguit.cn/24b2f2832d764c58ace6fe4761a9bb14\" /></p>\n\n<p>我们也可以右键复制到链接，然后通过wget命令进行下载</p>\n\n<pre>\n<code class=\"language-bash\">wget https://github.com/alibaba/nacos/releases/download/1.3.2/nacos-server-1.3.2.tar.gz\n\n\n\n</code></pre>\n\n<p>下载完成后，我们使用下面的命令进行解压</p>\n\n<pre>\n<code class=\"language-bash\">#解压\ntar -zxvf nacos-server-1.3.2.tar.gz\n\n\n\n</code></pre>\n\n<p>解压完成后，进入nacos文件夹里</p>\n\n<pre>\n<code class=\"language-bash\">cd nacos/bin\n\n\n\n</code></pre>\n\n<p>然后修改startup.sh中jvm的内存大小，根据自己的机器情况决定。</p>\n\n<pre>\n<code class=\"language-bash\">vim startup.sh\n\n\n\n</code></pre>\n\n<p>这里我设置的是最小堆内存128m，最大堆内存256m</p>\n\n<pre>\n<code class=\"language-bash\">if [[ \"${MODE}\" == \"standalone\" ]]; then\n    JAVA_OPT=\"${JAVA_OPT} -Xms128m -Xmx256m -Xmn256m\"\n    JAVA_OPT=\"${JAVA_OPT} -Dnacos.standalone=true\"\nelse\n    if [[ \"${EMBEDDED_STORAGE}\" == \"embedded\" ]]; then\n        JAVA_OPT=\"${JAVA_OPT} -DembeddedStorage=true\"\n    fi\n    JAVA_OPT=\"${JAVA_OPT} -server -Xms256m -Xmx512m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n    JAVA_OPT=\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\"\n    JAVA_OPT=\"${JAVA_OPT} -XX:-UseLargePages\"\n\n\n\n</code></pre>\n\n<h2>Nacos+MySQL配置持久化</h2>\n\n<p>原来的配置文件是存储在内置的数据库SQLite中，我们如果要移动起来，可能不方便，下面我们可以配置一下nacos的mysql存储，</p>\n\n<p>我们找到数据库新建脚本nacos/conf/nacos-mysql.sql，创建数据库nacos_config并执行脚本</p>\n\n<h3>导入遇到问题</h3>\n\n<p>tip：我们在导入的时候，可能会遇到这个错误</p>\n\n<blockquote>\n<p>Error occured at:2020-08-22 11:37:11 Line no.:190 Error Code: 1071 - Specified key was too long; max key length is 767 bytes</p>\n</blockquote>\n\n<p>先检查一下是不是数据库被限制了索引的大小</p>\n\n<pre>\n<code>SHOW variables like \'innodb_large_prefix\'\n\n\n\n</code></pre>\n\n<p>如果查询的值是OFF的话 执行下面命令</p>\n\n<pre>\n<code>SET GLOBAL INNODB_LARGE_PREFIX = ON;\n\n\n\n</code></pre>\n\n<p>执行完了 之后 还得查看当前的innodb_file_format引擎格式类型是不是BARRACUDA执行</p>\n\n<pre>\n<code>SHOW variables like \'innodb_file_format\'\n\n\n\n</code></pre>\n\n<p>如果不是的话则需要修改</p>\n\n<pre>\n<code>SET GLOBAL innodb_file_format = BARRACUDA;\n\n\n\n</code></pre>\n\n<p>然后再次尝试导入，则成功导入到数据库中</p>\n\n<h3>修改nacos配置</h3>\n\n<p>下面我们需要到nacos的配置目录</p>\n\n<pre>\n<code class=\"language-bash\">vim nacos/conf/application.properties\n\n\n\n</code></pre>\n\n<p>然后在末尾添加我们的mysql的配置信息</p>\n\n<pre>\n<code class=\"language-bash\">spring.datasource.platform=mysql\ndb.num=1\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\ndb.user=root\ndb.password=mogu2018\n\n\n\n</code></pre>\n\n<p>修改完成后，回到bin目录，启动nacos，启动命令standalone代表着单机模式运行，非集群模式):</p>\n\n<pre>\n<code class=\"language-bash\">sh startup.sh -m standalone\n\n\n\n</code></pre>\n\n<p>然后我们输入地址</p>\n\n<pre>\n<code class=\"language-bash\">http://youip:8848/nacos\n\n\n\n</code></pre>\n\n<p>会跳转到登录页面，输入默认账号和密码 nacos nacos即可进入</p>\n\n<p><img alt=\"image-20200822115650579\" src=\"http://image.moguit.cn/217b883c57a14927b1138c9b8b981ac3\" /></p>\n\n<p>到这里linux下的nacos已经成功安装~</p>\n\n<p><img alt=\"image-20200822120856725\" src=\"http://image.moguit.cn/05cdd82ee6cf4f628dd61152649383cb\" /></p>\n','5626932d452c2ad863d9b3cb0b69d22d',0,0,'235cc58878dd63148d05c0f491395a40',1,'2020-10-13 08:37:20','2020-12-11 16:03:07','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',1,'1',1,1,0,NULL,20),('b0e6353c7031c3248b5666303164f14e','【JVM】垃圾回收相关算法','【JVM】垃圾回收相关算法','<h1>垃圾回收相关算法</h1>\n\n<h2>标记阶段：引用计数算法</h2>\n\n<p>在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。</p>\n\n<p>那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</p>\n\n<p>判断对象存活一般有两种方式：<strong>引用计数算法</strong>和<strong>可达性分析算法。</strong></p>\n\n<p>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。</p>\n\n<p>对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。</p>\n\n<p>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。</p>\n\n<p>缺点：它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。</p>\n\n<blockquote>\n<p>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。 引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。</p>\n</blockquote>\n\n<h3>循环引用</h3>\n\n<p>当p的指针断开的时候，内部的引用形成一个循环，这就是循环引用，从而造成内存泄漏</p>\n\n<p><img alt=\"image-20200712102205795\" src=\"http://image.moguit.cn/d9be5130f1094f3a8591e924c050c253\" /></p>\n\n<h3>举例</h3>\n\n<p>我们使用一个案例来测试Java中是否采用的是引用计数算法</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 引用计数算法测试\n *\n * @author: 陌溪\n * @create: 2020-07-12-10:26\n */\npublic class RefCountGC {\n    // 这个成员属性的唯一作用就是占用一点内存\n    private byte[] bigSize = new byte[5*1024*1024];\n    // 引用\n    Object reference = null;\n\n    public static void main(String[] args) {\n        RefCountGC obj1 = new RefCountGC();\n        RefCountGC obj2 = new RefCountGC();\n        obj1.reference = obj2;\n        obj2.reference = obj1;\n        obj1 = null;\n        obj2 = null;\n        // 显示的执行垃圾收集行为，判断obj1 和 obj2是否被回收？\n        System.gc();\n    }\n}\n</code></pre>\n\n<p>运行结果</p>\n\n<pre>\n<code>[GC (System.gc()) [PSYoungGen: 15490K-&gt;808K(76288K)] 15490K-&gt;816K(251392K), 0.0061980 secs] [Times: user=0.00 sys=0.00, real=0.36 secs] \n[Full GC (System.gc()) [PSYoungGen: 808K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;672K(175104K)] 816K-&gt;672K(251392K), [Metaspace: 3479K-&gt;3479K(1056768K)], 0.0045983 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \nHeap\n PSYoungGen      total 76288K, used 655K [0x000000076b500000, 0x0000000770a00000, 0x00000007c0000000)\n  eden space 65536K, 1% used [0x000000076b500000,0x000000076b5a3ee8,0x000000076f500000)\n  from space 10752K, 0% used [0x000000076f500000,0x000000076f500000,0x000000076ff80000)\n  to   space 10752K, 0% used [0x000000076ff80000,0x000000076ff80000,0x0000000770a00000)\n ParOldGen       total 175104K, used 672K [0x00000006c1e00000, 0x00000006cc900000, 0x000000076b500000)\n  object space 175104K, 0% used [0x00000006c1e00000,0x00000006c1ea8070,0x00000006cc900000)\n Metaspace       used 3486K, capacity 4496K, committed 4864K, reserved 1056768K\n  class space    used 385K, capacity 388K, committed 512K, reserved 1048576K\n</code></pre>\n\n<p>我们能够看到，上述进行了GC收集的行为，将上述的新生代中的两个对象都进行回收了</p>\n\n<pre>\n<code>PSYoungGen: 15490K-&gt;808K(76288K)] 15490K-&gt;816K(251392K)\n</code></pre>\n\n<p>如果使用引用计数算法，那么这两个对象将会无法回收。而现在两个对象被回收了，说明Java使用的不是引用计数算法来进行标记的。</p>\n\n<p><img alt=\"image-20200712103230349\" src=\"http://image.moguit.cn/19ff61c8b6e94ac788adcbf2b6a29229\" /></p>\n\n<h3>小结</h3>\n\n<p>引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的Python，它更是同时支持引用计数和垃圾收集机制。</p>\n\n<p>具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。</p>\n\n<p>Java并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。Python如何解决循环引用？</p>\n\n<blockquote>\n<p>手动解除：很好理解，就是在合适的时机，解除引用关系。 使用弱引用weakref，weakref是Python提供的标准库，旨在解决循环引用。</p>\n</blockquote>\n\n<h2>标记阶段：可达性分析算法</h2>\n\n<h3>概念</h3>\n\n<p>可达性分析算法：也可以称为 根搜索算法、追踪性垃圾收集</p>\n\n<p>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。</p>\n\n<p>相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾收集通常也叫作追踪性垃圾收集（Tracing Garbage Collection）</p>\n\n<h3>思路</h3>\n\n<p>所谓&quot;GCRoots&rdquo;根集合就是一组必须活跃的引用。</p>\n\n<p>基本思路：</p>\n\n<ul>\n	<li>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。</li>\n	<li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）</li>\n	<li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</li>\n	<li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li>\n</ul>\n\n<p><img alt=\"image-20200712104149246\" src=\"http://image.moguit.cn/6b260e7b92b1416da0ec37014dc7f7e3\" /></p>\n\n<p>官场上的裙带关系，可达性分析在人类关系网中</p>\n\n<p><img alt=\"image-20200712104312406\" src=\"http://image.moguit.cn/308db7e5cf8c42089581d22ebac92121\" /></p>\n\n<h3>GC Roots可以是哪些？</h3>\n\n<ul>\n	<li>虚拟机栈中引用的对象\n	<ul>\n		<li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li>\n	</ul>\n	</li>\n	<li>本地方法栈内JNI（通常说的本地方法）引用的对象方法区中类静态属性引用的对象\n	<ul>\n		<li>比如：Java类的引用类型静态变量</li>\n	</ul>\n	</li>\n	<li>方法区中常量引用的对象\n	<ul>\n		<li>比如：字符串常量池（string Table）里的引用</li>\n	</ul>\n	</li>\n	<li>所有被同步锁synchronized持有的对象</li>\n	<li>Java虚拟机内部的引用。\n	<ul>\n		<li>基本数据类型对应的Class对象，一些常驻的异常对象（如：Nu11PointerException、outofMemoryError），系统类加载器。</li>\n	</ul>\n	</li>\n	<li>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li>\n</ul>\n\n<p><img alt=\"image-20200712104622677\" src=\"http://image.moguit.cn/a75b0c204d2043939823e0c93a3f0c84\" /></p>\n\n<h4>总结</h4>\n\n<p>总结一句话就是，除了堆空间外的一些结构，比如 虚拟机栈、本地方法栈、方法区、字符串常量池 等地方对堆空间进行引用的，都可以作为GC Roots进行可达性分析</p>\n\n<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象&ldquo;临时性&rdquo;地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（PartialGC）。</p>\n\n<p>如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GCRoots集合中去考虑，才能保证可达性分析的准确性。</p>\n\n<h4>小技巧</h4>\n\n<p>由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root。</p>\n\n<h3>注意</h3>\n\n<p>如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。</p>\n\n<p>这点也是导致GC进行时必须&ldquo;stop The World&rdquo;的一个重要原因。</p>\n\n<p>即使是号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</p>\n\n<h2>对象的finalization机制</h2>\n\n<p>Java语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。</p>\n\n<p>当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的finalize()方法。</p>\n\n<p>finalize() 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</p>\n\n<h3>注意</h3>\n\n<p>永远不要主动调用某个对象的finalize（）方法I应该交给垃圾回收机制调用。理由包括下面三点：</p>\n\n<ul>\n	<li>在finalize（）时可能会导致对象复活。</li>\n	<li>finalize（）方法的执行时间是没有保障的，它完全由Gc线程决定，极端情况下，若不发生GC，则finalize（）方法将没有执行机会。\n	<ul>\n		<li>因为优先级比较低，即使主动调用该方法，也不会因此就直接进行回收</li>\n	</ul>\n	</li>\n	<li>一个糟糕的finalize（）会严重影响Gc的性能。</li>\n</ul>\n\n<p>从功能上来说，finalize（）方法与c++中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize（）方法在本质上不同于C++中的析构函数。</p>\n\n<p>由于finalize（）方法的存在，虚拟机中的对象一般处于三种可能的状态。</p>\n\n<h3>生存还是死亡？</h3>\n\n<p>如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是&ldquo;非死不可&rdquo;的，这时候它们暂时处于&ldquo;缓刑&rdquo;阶段。<strong>一个无法触及的对象有可能在某一个条件下&ldquo;复活&rdquo;自己</strong>，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。如下：</p>\n\n<ul>\n	<li>可触及的：从根节点开始，可以到达这个对象。</li>\n	<li>可复活的：对象的所有引用都被释放，但是对象有可能在finalize（）中复活。</li>\n	<li>不可触及的：对象的finalize（）被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为<strong>finalize()只会被调用一次</strong>。</li>\n</ul>\n\n<p>以上3种状态中，是由于finalize（）方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</p>\n\n<h3>具体过程</h3>\n\n<p>判定一个对象objA是否可回收，至少要经历两次标记过程：</p>\n\n<ul>\n	<li>\n	<p>如果对象objA到GC Roots没有引用链，则进行第一次标记。</p>\n	</li>\n	<li>\n	<p>进行筛选，判断此对象是否有必要执行finalize（）方法</p>\n\n	<ul>\n		<li>如果对象objA没有重写finalize（）方法，或者finalize（）方法已经被虚拟机调用过，则虚拟机视为&ldquo;没有必要执行&rdquo;，objA被判定为不可触及的。</li>\n		<li>如果对象objA重写了finalize（）方法，且还未执行过，那么objA会被插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize（）方法执行。</li>\n		<li>finalize（）方法是对象逃脱死亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。如果objA在finalize（）方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出&ldquo;即将回收&rdquo;集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的finalize方法只会被调用一次。</li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"image-20200712110411885\" src=\"http://image.moguit.cn/d828a8387ad9443bab6b6274f835806a\" /></p>\n\n<p>上图就是我们看到的Finalizer线程</p>\n\n<h3>代码演示</h3>\n\n<p>我们使用重写 finalize()方法，然后在方法的内部，重写将其存放到GC Roots中</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 测试Object类中finalize()方法\n * 对象复活场景\n *\n * @author: 陌溪\n * @create: 2020-07-12-11:06\n */\npublic class CanReliveObj {\n    // 类变量，属于GC Roots的一部分\n    public static CanReliveObj canReliveObj;\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"调用当前类重写的finalize()方法\");\n        canReliveObj = this;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        canReliveObj = new CanReliveObj();\n        canReliveObj = null;\n        System.gc();\n        System.out.println(\"-----------------第一次gc操作------------\");\n        // 因为Finalizer线程的优先级比较低，暂停2秒，以等待它\n        Thread.sleep(2000);\n        if (canReliveObj == null) {\n            System.out.println(\"obj is dead\");\n        } else {\n            System.out.println(\"obj is still alive\");\n        }\n\n        System.out.println(\"-----------------第二次gc操作------------\");\n        canReliveObj = null;\n        System.gc();\n        // 下面代码和上面代码是一样的，但是 canReliveObj却自救失败了\n        Thread.sleep(2000);\n        if (canReliveObj == null) {\n            System.out.println(\"obj is dead\");\n        } else {\n            System.out.println(\"obj is still alive\");\n        }\n\n    }\n}\n</code></pre>\n\n<p>最后运行结果</p>\n\n<pre>\n<code>-----------------第一次gc操作------------\n调用当前类重写的finalize()方法\nobj is still alive\n-----------------第二次gc操作------------\nobj is dead\n</code></pre>\n\n<p>在进行第一次清除的时候，我们会执行finalize方法，然后 对象 进行了一次自救操作，但是因为finalize()方法只会被调用一次，因此第二次该对象将会被垃圾清除。</p>\n\n<h2>MAT与JProfiler的GC Roots溯源</h2>\n\n<h3>MAT是什么？</h3>\n\n<p>MAT是Memory Analyzer的简称，它是一款功能强大的Java堆内存分析器。用于查找内存泄漏以及查看内存消耗情况。</p>\n\n<p>MAT是基于Eclipse开发的，是一款免费的性能分析工具。</p>\n\n<p>大家可以在http://www.eclipse.org/mat/下载并使用MAT</p>\n\n<h3>命令行使用 jmap</h3>\n\n<p><img alt=\"image-20200712112026317\" src=\"http://image.moguit.cn/acb49ce72eed4f9fad85a9a1e0816bdd\" /></p>\n\n<h3>使用JVIsualVM</h3>\n\n<p>捕获的heap dump文件是一个临时文件，关闭JVisualVM后自动删除，若要保留，需要将其另存为文件。可通过以下方法捕获heap dump：</p>\n\n<p>在左侧&ldquo;Application&quot;（应用程序）子窗口中右击相应的应用程序，选择Heap Dump（堆Dump）。</p>\n\n<p>在Monitor（监视）子标签页中点击Heap Dump（堆Dump）按钮。本地应用程序的Heap dumps作为应用程序标签页的一个子标签页打开。同时，heap dump在左侧的Application（应用程序）栏中对应一个含有时间戳的节点。</p>\n\n<p>右击这个节点选择save as（另存为）即可将heap dump保存到本地。</p>\n\n<h3>使用MAT打开Dump文件</h3>\n\n<p>打开后，我们就可以看到有哪些可以作为GC Roots的对象</p>\n\n<p><img alt=\"image-20200712112512720\" src=\"http://image.moguit.cn/3f05998394914594a8fa1692e3bb1cbe\" /></p>\n\n<p>里面我们能够看到有一些常用的Java类，然后Thread线程。</p>\n\n<h3>JProfiler的GC Roots溯源</h3>\n\n<p>我们在实际的开发中，一般不会查找全部的GC Roots，可能只是查找某个对象的整个链路，或者称为GC Roots溯源，这个时候，我们就可以使用JProfiler</p>\n\n<p><img alt=\"image-20200712113256075\" src=\"http://image.moguit.cn/9675c82690c24bf0a08d3571a05804bb\" /></p>\n\n<h3>如何判断什么原因造成OOM</h3>\n\n<p>当我们程序出现OOM的时候，我们就需要进行排查，我们首先使用下面的例子进行说明</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 内存溢出排查\n * -Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError\n * @author: 陌溪\n * @create: 2020-07-12-14:56\n */\npublic class HeapOOM {\n    // 创建1M的文件\n    byte [] buffer = new byte[1 * 1024 * 1024];\n\n    public static void main(String[] args) {\n        ArrayList&lt;HeapOOM&gt; list = new ArrayList&lt;&gt;();\n        int count = 0;\n        try {\n            while (true) {\n                list.add(new HeapOOM());\n                count++;\n            }\n        } catch (Exception e) {\n            e.getStackTrace();\n            System.out.println(\"count:\" + count);\n        }\n    }\n}\n</code></pre>\n\n<p>上述代码就是不断的创建一个1M小字节数组，然后让内存溢出，我们需要限制一下内存大小，同时使用HeapDumpOnOutOfMemoryError将出错时候的dump文件输出</p>\n\n<pre>\n<code>-Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError\n</code></pre>\n\n<p>我们将生成的dump文件打开，然后点击Biggest Objects就能够看到超大对象</p>\n\n<p><img alt=\"image-20200712150229048\" src=\"http://image.moguit.cn/298bb0a427ee4a03a45c907fffbd4d1a\" /></p>\n\n<p>然后我们通过线程，还能够定位到哪里出现OOM</p>\n\n<p><img alt=\"image-20200712150303710\" src=\"http://image.moguit.cn/12ca7a3058364a7d947b61ead19bb923\" /></p>\n\n<h2>清除阶段：标记-清除算法</h2>\n\n<p>当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法是</p>\n\n<ul>\n	<li>标记一清除算法（Mark-Sweep）</li>\n	<li>复制算法（copying）</li>\n	<li>标记-压缩算法（Mark-Compact）</li>\n</ul>\n\n<p>标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被J.McCarthy等人在1960年提出并并应用于Lisp语言。</p>\n\n<h3>执行过程</h3>\n\n<p>当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除</p>\n\n<ul>\n	<li><strong>标记</strong>：Collector从引用根节点开始遍历，<strong>标记所有被引用的对象</strong>。一般是在对象的Header中记录为可达对象。\n\n	<ul>\n		<li><strong>标记的是引用的对象，不是垃圾！！</strong></li>\n	</ul>\n	</li>\n	<li><strong>清除</strong>：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收</li>\n</ul>\n\n<p><img alt=\"image-20200712150935078\" src=\"http://image.moguit.cn/dfda028dbb924ed58cb0b1a95637da1b\" /></p>\n\n<h3>什么是清除？</h3>\n\n<p>这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放覆盖原有的地址。</p>\n\n<p>关于空闲列表是在为对象分配内存的时候 提过</p>\n\n<ul>\n	<li>如果内存规整\n	<ul>\n		<li>采用指针碰撞的方式进行内存分配</li>\n	</ul>\n	</li>\n	<li>如果内存不规整\n	<ul>\n		<li>虚拟机需要维护一个列表</li>\n		<li>空闲列表分配</li>\n	</ul>\n	</li>\n</ul>\n\n<h3>缺点</h3>\n\n<ul>\n	<li>标记清除算法的效率不算高</li>\n	<li>在进行GC的时候，需要停止整个应用程序，用户体验较差</li>\n	<li>这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表</li>\n</ul>\n\n<h2>清除阶段：复制算法</h2>\n\n<h3>背景</h3>\n\n<p>为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky于1963年发表了著名的论文，&ldquo;使用双存储区的Lisp语言垃圾收集器CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）&rdquo;。M.L.Minsky在该论文中描述的算法被人们称为复制（Copying）算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。</p>\n\n<h3>核心思想</h3>\n\n<p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收</p>\n\n<p><img alt=\"image-20200712151916991\" src=\"http://image.moguit.cn/5585bb2b64eb4528970e244b46835d6a\" /></p>\n\n<p>把可达的对象，直接复制到另外一个区域中复制完成后，A区就没有用了，里面的对象可以直接清除掉，其实里面的新生代里面就用到了复制算法</p>\n\n<p><img alt=\"image-20200712152029615\" src=\"http://image.moguit.cn/0533a6c4af2c4a2da59fdecb54623780\" /></p>\n\n<h3>优点</h3>\n\n<ul>\n	<li>没有标记和清除过程，实现简单，运行高效</li>\n	<li>复制过去以后保证空间的连续性，不会出现&ldquo;碎片&rdquo;问题。</li>\n</ul>\n\n<h3>缺点</h3>\n\n<ul>\n	<li>此算法的缺点也是很明显的，就是需要两倍的内存空间。</li>\n	<li>对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小</li>\n</ul>\n\n<h3>注意</h3>\n\n<p>如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大，或者说非常低才行（老年代大量的对象存活，那么复制的对象将会有很多，效率会很低）</p>\n\n<p>在新生代，对常规应用的垃圾回收，一次通常可以回收70% - 99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。</p>\n\n<p><img alt=\"image-20200712152847218\" src=\"http://image.moguit.cn/33caf928236744f489912ab7306ae1f8\" /></p>\n\n<h2>清除阶段：标记-整理算法</h2>\n\n<h3>背景</h3>\n\n<p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。</p>\n\n<p>标记一清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JvM的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。</p>\n\n<p>1970年前后，G.L.Steele、C.J.Chene和D.s.Wise等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。</p>\n\n<h3>执行过程</h3>\n\n<p>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</p>\n\n<p>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。</p>\n\n<p><img alt=\"image-20200712153236508\" src=\"http://image.moguit.cn/7586a82ca34a4d7ca59cd1b262c663be\" /></p>\n\n<h3>标清和标整的区别</h3>\n\n<p>标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-压缩（Mark-Sweep-Compact）算法。</p>\n\n<p>二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-压缩是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p>\n\n<h3>标整的优缺点</h3>\n\n<h4>优点</h4>\n\n<ul>\n	<li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。</li>\n	<li>消除了复制算法当中，内存减半的高额代价。</li>\n</ul>\n\n<h4>缺点</h4>\n\n<ul>\n	<li>从效率上来说，标记-整理算法要低于复制算法。</li>\n	<li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址</li>\n	<li>移动过程中，需要全程暂停用户应用程序。即：STW</li>\n</ul>\n\n<h2>小结</h2>\n\n<p>效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。</p>\n\n<p>而为了尽量兼顾上面提到的三个指标，标记-整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段。</p>\n\n<p>| | 标记清除 | 标记整理 | 复制 | | ------------ | ------------------ | ---------------- | ------------------------------------- | | <strong>速率</strong> | 中等 | 最慢 | 最快 | | <strong>空间开销</strong> | 少（但会堆积碎片） | 少（不堆积碎片） | 通常需要活对象的2倍空间（不堆积碎片） | | <strong>移动对象</strong> | 否 | 是 | 是 |</p>\n\n<p>综合我们可以找到，没有最好的算法，只有最合适的算法</p>\n\n<h3>分代收集算法</h3>\n\n<p>前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。</p>\n\n<p>分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。</p>\n\n<p>在Java程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关，比如Http请求中的Session对象、线程、Socket连接，这类对象跟业务直接挂钩，因此生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：string对象，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。</p>\n\n<p>目前几乎所有的GC都采用分代手机算法执行垃圾回收的</p>\n\n<p>在HotSpot中，基于分代的概念，GC所使用的内存回收算法必须结合年轻代和老年代各自的特点。</p>\n\n<ul>\n	<li>年轻代（Young Gen）</li>\n</ul>\n\n<p>年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。</p>\n\n<p>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。</p>\n\n<ul>\n	<li>老年代（Tenured Gen）</li>\n</ul>\n\n<p>老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。</p>\n\n<p>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。</p>\n\n<ul>\n	<li>Mark阶段的开销与存活对象的数量成正比。</li>\n	<li>Sweep阶段的开销与所管理区域的大小成正相关。</li>\n	<li>compact阶段的开销与存活对象的数据成正比。</li>\n</ul>\n\n<p>以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对象的回收效率很高。而对于碎片问题，CMS采用基于Mark-Compact算法的Serial old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用serial old执行FullGC以达到对老年代内存的整理。</p>\n\n<p>分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代</p>\n\n<h2>增量收集算法</h2>\n\n<h3>概述</h3>\n\n<p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种stop the World的状态。在stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。</p>\n\n<p>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。</p>\n\n<p>总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。<strong>增量收集算法通过对线程间冲突的妥善处理</strong>，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</p>\n\n<h3>缺点</h3>\n\n<p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p>\n\n<h2>分区算法</h2>\n\n<p>一般来说，在相同条件下，堆空间越大，一次Gc时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。</p>\n\n<p>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。 每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p>\n\n<p><img alt=\"image-20200712165318590\" src=\"http://image.moguit.cn/87ecf9a06bbb4fc6ab0f162bbd0fa037\" /></p>\n\n<h2>写到最后</h2>\n\n<p>注意，这些只是基本的算法思路，实际GC实现过程要复杂的多，目前还在发展中的前沿GC都是复合算法，并且并行和并发兼备。</p>\n','7e0e93ea6cdb44ae92e58f48e6496ed7,15721a34adba068763b5a2fb1991fc57,5626932d452c2ad863d9b3cb0b69d22d',16,0,'b62d80fc5d26ccd7f027c5ebb532daf5',1,'2020-08-16 00:11:03','2020-12-11 16:03:59','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','db0d64ea7df409de5d2d747927cfa1a5',0,'1',0,1,0,NULL,21),('b100fde21ac0b61414dbaa74d2db7192','CentOS下安装Sentinel','CentOS下安装Sentinel','<h1 id=\"CentOS下安装Sentinel\">CentOS下安装Sentinel</h1>\n<h2 id=\"前言\">前言</h2>\n<p>Sentinel被称为分布式系统的流量防卫兵，这里主要讲的是CentOS下如何安装Sentinel，关于Windows下的安装以及Sentinel的介绍，可以参考下面的博客</p>\n<p><a href=\"http://moguit.cn/#/info?blogUid=408e9c889ebf96a66af2adfdc258ba5f\">【SpringCloud】使用Sentinel实现熔断和限流</a></p>\n<p><a href=\"http://moguit.cn/#/info?blogUid=7135efc7f536769efd0d0483c687ba07\">Windows下蘑菇博客Sentinel安装指南</a></p>\n<h2 id=\"下载Sentinel\">下载Sentinel</h2>\n<p>Sentinel的安装非常简单，只需要去<a href=\"https://github.com/alibaba/Sentinel/releases\">官网</a>下载好对应的可执行jar包</p>\n<p><img src=\"http://image.moguit.cn/0ae258651a4444a293bb817a04d20024\" alt=\"image-20200822150208675\" /></p>\n<p>然后在配置启动脚本和关闭脚本，同时设置启动端口号8070</p>\n<p>启动脚本：startup.sh</p>\n<pre><code class=\"language-bash\">#!/bin/bash   \nnohup java -jar sentinel-dashboard-1.8.0.jar --server.port=8070  &gt; catalina.out  2&gt;&amp;1 &amp;\n\n</code></pre>\n<p>关闭脚本：shutdown.sh</p>\n<pre><code class=\"language-bash\">#!/bin/bash\nPID=$(ps -ef | grep sentinel-dashboard-1.8.0.jar  | grep -v grep | awk \'{ print $2 }\')\nif [ -z &quot;$PID&quot; ]\nthen\n    echo Application is already stopped\nelse\n    echo kill $PID\n    kill $PID\nfi\n\n</code></pre>\n<p>启动成功后，访问地址：http://youip:8070，即可打开sentinel的管理页面</p>\n<p><img src=\"http://image.moguit.cn/ba61b29866d849aeb8345a9a81466385\" alt=\"image-20200822151430102\" /></p>\n<p>输入sentinel sentinel进入即可</p>\n','1d1fd6d26c8e40a38637ef6126c45cd0,e81bc2dca42c4031be7d66fef4a71e16',12,0,'d2424afcd30ca070d43930d0257097ad',0,'2020-08-25 08:54:02','2020-10-07 16:32:38','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',3,'1',0,1,0,NULL,22),('c4d982f7dbf0143624522f5e26d95358','默认标题1','默认简介1','<h1 id=\"http及Template介绍\">http及Template介绍</h1>\n<h2 id=\"来源\">来源</h2>\n<p><a href=\"https://www.liwenzhou.com/posts/Go/go_template/\">https://www.liwenzhou.com/posts/Go/go_template/</a></p>\n<h2 id=\"介绍\">介绍</h2>\n<p><code>html/template</code>包实现了数据驱动的模板，用于生成可防止代码注入的安全的HTML内容。它提供了和 <code>text/template</code>包相同的接口，Go语言中输出HTML的场景都应使用 <code>html/template</code>这个包。</p>\n<h2 id=\"模板与渲染\">模板与渲染</h2>\n<p>在一些前后端不分离的Web架构中，我们通常需要在后端将一些数据渲染到HTML文档中，从而实现动态的网页（网页的布局和样式大致一样，但展示的内容并不一样）效果。</p>\n<p>我们这里说的模板可以理解为事先定义好的HTML文档文件，模板渲染的作用机制可以简单理解为文本替换操作–使用相应的数据去替换HTML文档中事先准备好的标记。</p>\n<p>很多编程语言的Web框架中都使用各种模板引擎，比如Python语言中Flask框架中使用的jinja2模板引擎。</p>\n<h2 id=\"Go语言的模板引擎\">Go语言的模板引擎</h2>\n<p>Go语言内置了文本模板引擎 <code>text/template</code>和用于HTML文档的 <code>html/template</code>。它们的作用机制可以简单归纳如下：</p>\n<ol>\n<li>模板文件通常定义为<code>.tmpl</code>和<code>.tpl</code>为后缀（也可以使用其他的后缀），必须使用<code>UTF8</code>编码。</li>\n<li>模板文件中使用<code>{{</code>和<code>}}</code>包裹和标识需要传入的数据。</li>\n<li>传给模板这样的数据就可以通过点号（<code>.</code>）来访问，如果数据是复杂类型的数据，可以通过{ { .FieldName }}来访问它的字段。</li>\n<li>除<code>{{</code>和<code>}}</code>包裹的内容外，其他内容均不做修改原样输出。</li>\n</ol>\n<h2 id=\"模板引擎的使用\">模板引擎的使用</h2>\n<p>Go语言模板引擎的使用可以分为三部分：定义模板文件、解析模板文件和模板渲染.</p>\n<h3 id=\"定义模板文件\">定义模板文件</h3>\n<p>其中，定义模板文件时需要我们按照相关语法规则去编写，后文会详细介绍。</p>\n<h3 id=\"解析模板文件\">解析模板文件</h3>\n<p>上面定义好了模板文件之后，可以使用下面的常用方法去解析模板文件，得到模板对象：</p>\n<pre><code class=\"language-go\">func (t *Template) Parse(src string) (*Template, error)\nfunc ParseFiles(filenames ...string) (*Template, error)\nfunc ParseGlob(pattern string) (*Template, error)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>当然，你也可以使用 <code>func New(name string) *Template</code>函数创建一个名为 <code>name</code>的模板，然后对其调用上面的方法去解析模板字符串或模板文件。</p>\n<h3 id=\"模板渲染\">模板渲染</h3>\n<p>渲染模板简单来说就是使用数据去填充模板，当然实际上可能会复杂很多。</p>\n<pre><code class=\"language-go\">func (t *Template) Execute(wr io.Writer, data interface{}) error\nfunc (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<h3 id=\"基本示例\">基本示例</h3>\n<h4 id=\"定义模板文件-\">定义模板文件</h4>\n<p>我们按照Go模板语法定义一个 <code>hello.tmpl</code>的模板文件，内容如下：</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;title&gt;hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt; hello golang&lt;/h1&gt;\n    &lt;h1&gt;hello {{.}}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<h4 id=\"解析和渲染模板文件\">解析和渲染模板文件</h4>\n<p>然后我们创建一个 <code>main.go</code>文件，在其中写下HTTP server端代码如下：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;fmt&quot;\n	&quot;html/template&quot;\n	&quot;net/http&quot;\n	&quot;os&quot;\n)\n\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n	// 获取项目的绝对路径\n	wd, err := os.Getwd()\n	if err != nil {\n		fmt.Printf(&quot;get wd failed, err:%v \\n&quot;, wd)\n		return\n	}\n	fmt.Println(&quot;wd:&quot;, wd + &quot;\\\\lesson04\\\\hello.tmpl&quot;)\n	// 解析指定文件生成模板对象\n	tmpl, err := template.ParseFiles( wd + &quot;\\\\lesson04\\\\hello.tmpl&quot;)\n\n	if err != nil {\n		fmt.Println(&quot;create template failed, err:&quot;, err)\n		return\n	}\n	// 利用给定数据渲染模板，并将结果写入w\n	tmpl.Execute(w, &quot;沙河小王子&quot;)\n}\nfunc main() {\n	http.HandleFunc(&quot;/&quot;, sayHello)\n	err := http.ListenAndServe(&quot;:9090&quot;, nil)\n	if err != nil {\n		fmt.Println(&quot;HTTP server failed,err:&quot;, err)\n		return\n	}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>将上面的 <code>main.go</code>文件编译执行，然后使用浏览器访问 <code>http://127.0.0.1:9090</code>就能看到页面上显示了“Hello 沙河小王子”。 这就是一个最简单的模板渲染的示例，Go语言模板引擎详细用法请往下阅读。+</p>\n<p>得到运行结果</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821758386.png\" alt=\"image-20200914201109380\" /></p>\n<h2 id=\"模板语法\">模板语法</h2>\n<h3 id=\"-\">}</h3>\n<p>模板语法都包含在 <code>{{</code>和 <code>}}</code>中间，其中 <code>{{.}}</code>中的点表示当前对象。</p>\n<p>当我们传入一个结构体对象时，我们可以根据 <code>.</code>来访问结构体的对应字段。例如：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;fmt&quot;\n	&quot;html/template&quot;\n	&quot;net/http&quot;\n	&quot;os&quot;\n)\n\n//定义用户结构体\ntype User struct {\n	Name string\n	Gender string\n	Age int\n}\n\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n	// 获取项目的绝对路径\n	wd, err := os.Getwd()\n	if err != nil {\n		fmt.Printf(&quot;get wd failed, err:%v \\n&quot;, wd)\n		return\n	}\n	fmt.Println(&quot;wd:&quot;, wd + &quot;\\\\lesson05\\\\hello.tmpl&quot;)\n	// 解析指定文件生成模板对象\n	tmpl, err := template.ParseFiles( wd + &quot;\\\\lesson05\\\\hello.tmpl&quot;)\n\n	if err != nil {\n		fmt.Println(&quot;create template failed, err:&quot;, err)\n		return\n	}\n\n	u1 := User{\n		Name: &quot;小王子&quot;,\n		Gender: &quot;男&quot;,\n		Age: 10,\n	}\n\n	// 利用给定数据渲染模板，并将结果写入w\n	tmpl.Execute(w, u1)\n}\nfunc main() {\n	http.HandleFunc(&quot;/&quot;, sayHello)\n	err := http.ListenAndServe(&quot;:9090&quot;, nil)\n	if err != nil {\n		fmt.Println(&quot;HTTP server failed,err:&quot;, err)\n		return\n	}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>模板文件 <code>hello.tmpl</code>内容如下：</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;姓名: {{.Name}}&lt;/h1&gt;\n&lt;h1&gt;性别: {{.Gender}}&lt;/h1&gt;\n&lt;h1&gt;年龄: {{.Age}}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>在浏览器输入如下网址</p>\n<pre><code class=\"language-bash\">http://localhost:9090/sayHello\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>能够渲染出我们结构体中的值</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821758544.png\" alt=\"image-20200914205920172\" /></p>\n<p>同理，当我们传入的变量是map时，也可以在模板文件中通过 <code>.</code>根据key来取值。</p>\n<pre><code class=\"language-go\">\n// 采用一个map\nm1 := map[string]interface{}{\n    &quot;Name&quot;: &quot;小王子&quot;,\n    &quot;Age&quot;: 18,\n    &quot;Gender&quot;: &quot;男&quot;,\n}\n\n// 利用给定数据渲染模板，并将结果写入w\ntmpl.Execute(w, m1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>如果我们想把map 和 结构体都传递到前端，那么就需要在定义一个大的map来进行存储</p>\n<pre><code class=\"language-bash\">	// 采用结构体\n	u1 := User{\n		Name: &quot;小王子&quot;,\n		Gender: &quot;男&quot;,\n		Age: 10,\n	}\n\n	// 采用一个map\n	m1 := map[string]interface{}{\n		&quot;Name&quot;: &quot;小王子&quot;,\n		&quot;Age&quot;: 18,\n		&quot;Gender&quot;: &quot;男&quot;,\n	}\n\n	m2 := map[string]interface{}{\n		&quot;map&quot;: m1,\n		&quot;user&quot;: u1,\n	}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<h3 id=\"注释\">注释</h3>\n<pre><code class=\"language-template\">{{/* a comment */}}\n注释，执行时会忽略。可以多行。注释不能嵌套，并且必须紧贴分界符始止。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<h3 id=\"pipeline\">pipeline</h3>\n<p><code>pipeline</code>是指产生数据的操作。比如 <code>{{.}}</code>、<code>{{.Name}}</code>等。Go的模板语法中支持使用管道符号 <code>|</code>链接多个命令，用法和unix下的管道类似：<code>|</code>前面的命令会将运算结果(或返回值)传递给后一个命令的最后一个位置。</p>\n<p>**注意：**并不是只有使用了 <code>|</code>才是pipeline。Go的模板语法中，<code>pipeline的</code>概念是传递数据，只要能产生数据的，都是 <code>pipeline</code>。</p>\n<h3 id=\"变量\">变量</h3>\n<p>我们还可以在模板中声明变量，用来保存传入模板的数据或其他语句生成的结果。具体语法如下：</p>\n<pre><code class=\"language-template\">$obj := {{.}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>其中 <code>$obj</code>是变量的名字，在后续的代码中就可以使用该变量了。</p>\n<h3 id=\"移除空格\">移除空格</h3>\n<p>有时候我们在使用模板语法的时候会不可避免的引入一下空格或者换行符，这样模板最终渲染出来的内容可能就和我们想的不一样，这个时候可以使用 <code>{{-</code>语法去除模板内容左侧的所有空白符号， 使用 <code>-}}</code>去除模板内容右侧的所有空白符号。</p>\n<p>例如：</p>\n<pre><code class=\"language-template\">{{- .Name -}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p><strong>注意：</strong><code>-</code>要紧挨 <code>{{</code>和 <code>}}</code>，同时与模板值之间需要使用空格分隔。</p>\n<h3 id=\"条件判断\">条件判断</h3>\n<p>Go模板语法中的条件判断有以下几种:</p>\n<pre><code class=\"language-template\">{{if pipeline}} T1 {{end}}\n\n{{if pipeline}} T1 {{else}} T0 {{end}}\n\n{{if pipeline}} T1 {{else if pipeline}} T0 {{end}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<h3 id=\"range\">range</h3>\n<p>Go的模板语法中使用 <code>range</code>关键字进行遍历，有以下两种写法，其中 <code>pipeline</code>的值必须是数组、切片、字典或者通道。</p>\n<pre><code class=\"language-template\">{{range pipeline}} T1 {{end}}\n如果pipeline的值其长度为0，不会有任何输出\n\n{{range pipeline}} T1 {{else}} T0 {{end}}\n如果pipeline的值其长度为0，则会执行T0。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<h3 id=\"with\">with</h3>\n<pre><code class=\"language-template\">{{with pipeline}} T1 {{end}}\n如果pipeline为empty不产生输出，否则将dot设为pipeline的值并执行T1。不修改外面的dot。\n\n{{with pipeline}} T1 {{else}} T0 {{end}}\n如果pipeline为empty，不改变dot并执行T0，否则dot设为pipeline的值并执行T1。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<h3 id=\"预定义函数\">预定义函数</h3>\n<p>执行模板时，函数从两个函数字典中查找：首先是模板函数字典，然后是全局函数字典。一般不在模板内定义函数，而是使用Funcs方法添加函数到模板里。</p>\n<p>预定义的全局函数如下：</p>\n<pre><code class=\"language-template\">and\n    函数返回它的第一个empty参数或者最后一个参数；\n    就是说&quot;and x y&quot;等价于&quot;if x then y else x&quot;；所有参数都会执行；\nor\n    返回第一个非empty参数或者最后一个参数；\n    亦即&quot;or x y&quot;等价于&quot;if x then x else y&quot;；所有参数都会执行；\nnot\n    返回它的单个参数的布尔值的否定\nlen\n    返回它的参数的整数类型长度\nindex\n    执行结果为第一个参数以剩下的参数为索引/键指向的值；\n    如&quot;index x 1 2 3&quot;返回x[1][2][3]的值；每个被索引的主体必须是数组、切片或者字典。\nprint\n    即fmt.Sprint\nprintf\n    即fmt.Sprintf\nprintln\n    即fmt.Sprintln\nhtml\n    返回与其参数的文本表示形式等效的转义HTML。\n    这个函数在html/template中不可用。\nurlquery\n    以适合嵌入到网址查询中的形式返回其参数的文本表示的转义值。\n    这个函数在html/template中不可用。\njs\n    返回与其参数的文本表示形式等效的转义JavaScript。\ncall\n    执行结果是调用第一个参数的返回值，该参数必须是函数类型，其余参数作为调用该函数的参数；\n    如&quot;call .X.Y 1 2&quot;等价于go语言里的dot.X.Y(1, 2)；\n    其中Y是函数类型的字段或者字典的值，或者其他类似情况；\n    call的第一个参数的执行结果必须是函数类型的值（和预定义函数如print明显不同）；\n    该函数类型值必须有1到2个返回值，如果有2个则后一个必须是error接口类型；\n    如果有2个返回值的方法返回的error非nil，模板执行会中断并返回给调用模板执行者该错误；\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<h3 id=\"比较函数\">比较函数</h3>\n<p>布尔函数会将任何类型的零值视为假，其余视为真。</p>\n<p>下面是定义为函数的二元比较运算的集合：</p>\n<pre><code class=\"language-template\">eq      如果arg1 == arg2则返回真\nne      如果arg1 != arg2则返回真\nlt      如果arg1 &lt; arg2则返回真\nle      如果arg1 &lt;= arg2则返回真\ngt      如果arg1 &gt; arg2则返回真\nge      如果arg1 &gt;= arg2则返回真\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>为了简化多参数相等检测，eq（只有eq）可以接受2个或更多个参数，它会将第一个参数和其余参数依次比较，返回下式的结果：</p>\n<pre><code class=\"language-template\">{{eq arg1 arg2 arg3}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>比较函数只适用于基本类型（或重定义的基本类型，如”type Celsius float32”）。但是，整数和浮点数不能互相比较。</p>\n<h3 id=\"自定义函数\">自定义函数</h3>\n<p>Go的模板支持自定义函数。</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;fmt&quot;\n	&quot;html/template&quot;\n	&quot;net/http&quot;\n	&quot;os&quot;\n)\n\n/**\n * @Description f1函数\n * @Param \n * @return\n **/\nfunc f1(w http.ResponseWriter, r *http.Request) {\n	// 定义模板\n	// 解析模板\n	// 获取项目的绝对路径\n	wd, err := os.Getwd()\n	if err != nil {\n		fmt.Printf(&quot;get wd failed, err:%v \\n&quot;, wd)\n		return\n	}\n\n	// 定义一个自定义函数\n	// 要么只有一个返回值，要么有两个返回值，第二个返回值必须是error类型\n	kua := func(name string)(string, error) {\n		return name + &quot;年轻又帅气!&quot;, nil\n	}\n\n	// 创建一个名字为f的模板对象。注意，这个名字一定要和模板的名字对应上\n	tmpl := template.New(&quot;hello.tmpl&quot;)\n\n	// 告诉模板引擎，我现在多了一个自定义的函数kua\n	tmpl.Funcs(template.FuncMap{\n		&quot;kua&quot;: kua,\n	})\n\n	// 解析模板\n	_, err = tmpl.ParseFiles( wd + &quot;\\\\lesson06\\\\hello.tmpl&quot;)\n	if err != nil {\n		fmt.Printf(&quot;parse template failed, err:%v \\n&quot;, err)\n		return\n	}\n\n	// 采用一个map\n	m1 := map[string]interface{}{\n		&quot;Name&quot;: &quot;小王子&quot;,\n		&quot;Age&quot;: 18,\n		&quot;Gender&quot;: &quot;男&quot;,\n	}\n\n	// 渲染模板\n	tmpl.Execute(w, m1)\n}\nfunc main() {\n	http.HandleFunc(&quot;/hello&quot;, f1)\n	err := http.ListenAndServe(&quot;:9090&quot;, nil)\n	if err != nil {\n		fmt.Println(&quot;HTTP server failed,err:&quot;, err)\n		return\n	}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>我们可以在模板文件 <code>hello.tmpl</code>中按照如下方式使用我们自定义的 <code>kua</code>函数了。</p>\n<pre><code class=\"language-template\">{{kua .Name}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>最后运行的结果</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821758582.png\" alt=\"image-20200916101259659\" /></p>\n<h3 id=\"模板的嵌套template\">模板的嵌套template</h3>\n<p>我们可以在template中嵌套其他的template。这个template可以是单独的文件，也可以是通过 <code>define</code>定义的template。</p>\n<p>举个例子： <code>t.tmpl</code>文件内容如下：</p>\n<pre><code class=\"language-template\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;tmpl test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  \n    &lt;h1&gt;测试嵌套template语法&lt;/h1&gt;\n    &lt;hr&gt;\n    {{template &quot;ul.tmpl&quot;}}\n    &lt;hr&gt;\n    {{template &quot;ol.tmpl&quot;}}\n&lt;/body&gt;\n&lt;/html&gt; \n\n{{ define &quot;ol.tmpl&quot;}}\n&lt;ol&gt;\n    &lt;li&gt;吃饭&lt;/li&gt;\n    &lt;li&gt;睡觉&lt;/li&gt;\n    &lt;li&gt;打豆豆&lt;/li&gt;\n&lt;/ol&gt;\n{{end}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p><code>ul.tmpl</code>文件内容如下：</p>\n<pre><code class=\"language-template\">&lt;ul&gt;\n    &lt;li&gt;注释&lt;/li&gt;\n    &lt;li&gt;日志&lt;/li&gt;\n    &lt;li&gt;测试&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>我们注册一个 <code>templDemo</code>路由处理函数.</p>\n<pre><code class=\"language-go\">http.HandleFunc(&quot;/tmpl&quot;, tmplDemo)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p><code>tmplDemo</code>函数的具体内容如下：</p>\n<pre><code class=\"language-go\">func tmplDemo(w http.ResponseWriter, r *http.Request) {\n	tmpl, err := template.ParseFiles(&quot;./t.tmpl&quot;, &quot;./ul.tmpl&quot;)\n	if err != nil {\n		fmt.Println(&quot;create template failed, err:&quot;, err)\n		return\n	}\n	user := UserInfo{\n		Name:   &quot;小王子&quot;,\n		Gender: &quot;男&quot;,\n		Age:    18,\n	}\n	tmpl.Execute(w, user)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p><strong>注意</strong>：在解析模板时，被嵌套的模板一定要在后面解析，例如上面的示例中 <code>t.tmpl</code>模板中嵌套了 <code>ul.tmpl</code>，所以 <code>ul.tmpl</code>要在 <code>t.tmpl</code>后进行解析。</p>\n<h3 id=\"block\">block</h3>\n<pre><code class=\"language-template\">{{block &quot;name&quot; pipeline}} T1 {{end}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p><code>block</code>是定义模板 <code>{{define &quot;name&quot;}} T1 {{end}}</code>和执行 <code>{{template &quot;name&quot; pipeline}}</code>缩写，典型的用法是定义一组根模板，然后通过在其中重新定义块模板进行自定义。</p>\n<p>定义一个根模板 <code>templates/base.tmpl</code>，内容如下：</p>\n<pre><code class=\"language-template\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;title&gt;Go Templates&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=&quot;container-fluid&quot;&gt;\n    {{block &quot;content&quot; . }}{{end}}\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>然后定义一个 <code>templates/index.tmpl</code>，”继承”<code>base.tmpl</code>：</p>\n<pre><code class=\"language-tempalte\">{{template &quot;base.tmpl&quot;}}\n\n{{define &quot;content&quot;}}\n    &lt;div&gt;Hello world!&lt;/div&gt;\n{{end}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>然后使用 <code>template.ParseGlob</code>按照正则匹配规则解析模板文件，然后通过 <code>ExecuteTemplate</code>渲染指定的模板：</p>\n<pre><code class=\"language-go\">func index(w http.ResponseWriter, r *http.Request){\n	tmpl, err := template.ParseGlob(&quot;templates/*.tmpl&quot;)\n	if err != nil {\n		fmt.Println(&quot;create template failed, err:&quot;, err)\n		return\n	}\n	err = tmpl.ExecuteTemplate(w, &quot;index.tmpl&quot;, nil)\n	if err != nil {\n		fmt.Println(&quot;render template failed, err:&quot;, err)\n		return\n	}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>如果我们的模板名称冲突了，例如不同业务线下都定义了一个 <code>index.tmpl</code>模板，我们可以通过下面两种方法来解决。</p>\n<ol>\n<li>在模板文件开头使用<code>{{define 模板名}}</code>语句显式的为模板命名。</li>\n<li>可以把模板文件存放在<code>templates</code>文件夹下面的不同目录中，然后使用<code>template.ParseGlob(&quot;templates/**/*.tmpl&quot;)</code>解析模板。</li>\n</ol>\n<h3 id=\"修改默认的标识符\">修改默认的标识符</h3>\n<p>Go标准库的模板引擎使用的花括号 <code>{{</code>和 <code>}}</code>作为标识，而许多前端框架（如 <code>Vue</code>和 <code>AngularJS</code>）也使用 <code>{{</code>和 <code>}}</code>作为标识符，所以当我们同时使用Go语言模板引擎和以上前端框架时就会出现冲突，这个时候我们需要修改标识符，修改前端的或者修改Go语言的。这里演示如何修改Go语言模板引擎默认的标识符：</p>\n<pre><code class=\"language-go\">template.New(&quot;test&quot;).Delims(&quot;{[&quot;, &quot;]}&quot;).ParseFiles(&quot;./t.tmpl&quot;)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>最后我们在渲染的时候</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;自定义模板函数&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;姓名: {[.Name]}&lt;/h1&gt;\n&lt;h1&gt;性别: {[.Gender]}&lt;/h1&gt;\n&lt;h1&gt;年龄: {[.Age]}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>最后运行结果，发现也能够正常显示</p>\n<p><img src=\"http://localhost:8600//blog/admin/png/2020/9/23/1600821758610.png\" alt=\"image-20200916214044623\" /></p>\n<h2 id=\"text-template与html-tempalte的区别\">text/template与html/tempalte的区别</h2>\n<p><code>html/template</code>针对的是需要返回HTML内容的场景，在模板渲染过程中会对一些有风险的内容进行转义，以此来防范跨站脚本攻击。</p>\n<p>例如，我定义下面的模板文件：</p>\n<pre><code class=\"language-template\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {{.}}\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>这个时候传入一段JS代码并使用 <code>html/template</code>去渲染该文件，会在页面上显示出转义后的JS内容。 <code>alert(\'嘿嘿嘿\')</code> 这就是 <code>html/template</code>为我们做的事。</p>\n<p>但是在某些场景下，我们如果相信用户输入的内容，不想转义的话，可以自行编写一个safe函数，手动返回一个 <code>template.HTML</code>类型的内容。示例如下：</p>\n<pre><code class=\"language-go\">func xss(w http.ResponseWriter, r *http.Request){\n	tmpl,err := template.New(&quot;xss.tmpl&quot;).Funcs(template.FuncMap{\n		&quot;safe&quot;: func(s string)template.HTML {\n			return template.HTML(s)\n		},\n	}).ParseFiles(&quot;./xss.tmpl&quot;)\n	if err != nil {\n		fmt.Println(&quot;create template failed, err:&quot;, err)\n		return\n	}\n	jsStr := `&lt;script&gt;alert(\'嘿嘿嘿\')&lt;/script&gt;`\n	err = tmpl.Execute(w, jsStr)\n	if err != nil {\n		fmt.Println(err)\n	}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n<p>这样我们只需要在模板文件不需要转义的内容后面使用我们定义好的safe函数就可以了。</p>\n<pre><code class=\"language-template\">{{ . | safe }}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n','7e0e93ea6cdb44ae92e58f48e6496ed7,5626932d452c2ad863d9b3cb0b69d22d',3,0,'d134bdfe255b9aa8c2ce44da8297f6a6',0,'2020-09-23 08:42:43','2020-10-07 16:28:33','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','db0d64ea7df409de5d2d747927cfa1a5',0,'1',0,1,0,NULL,23),('c58083675437f407d73d3322ca01b995','测试博客','测试博客','<p>测试博客</p>\n','5626932d452c2ad863d9b3cb0b69d22d',3,0,'aae71f2c737d24e06a6501b44cd77a68',1,'2020-10-13 09:03:59','2020-12-11 16:02:59','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',0,'1',0,1,0,NULL,24),('e247932bf5f883ad3699144a00318a4b','【阿里云】双十一拼团 2核4G3M 664元/3年（强烈推荐）','【阿里云】双十一拼团 2核4G3M 664元/3年（强烈推荐）','<p>【阿里云】双十一拼团 2核4G3M 664元/3年（强烈推荐）&nbsp;<a href=\"http://a.aliyun.com/f1.l0DRK\">点我进入</a></p>\n','5626932d452c2ad863d9b3cb0b69d22d',1002,0,'608e9648a6e902bafaf30a8392f16b6d',1,'2020-09-01 10:29:32','2020-12-11 16:02:40','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','337806254f9c42999043de5c5ee09e77',1,'1',3,1,1,'https://www.aliyun.com/1111/pintuan?utm_content=m_1000193619&spm=a2c4j.20775865.zh-cnc.1',25),('fc6fc52465a2797090a6ac8b09994d91','测试','测试','<blockquote>\n<p>go测试</p>\n</blockquote>\n<pre><code class=\"language-go\">package main\n\nimport (\n	&quot;context&quot;\n	&quot;fmt&quot;\n	&quot;go.etcd.io/etcd/clientv3&quot;\n	&quot;time&quot;\n)\n\nfunc main() {\n	cli, err := clientv3.New(clientv3.Config {\n		Endpoints: []string{&quot;127.0.0.1:2379&quot;}, // etcd的节点，可以传入多个\n		DialTimeout: 5*time.Second, // 连接超时时间\n	})\n\n	if err != nil {\n		fmt.Printf(&quot;connect to etcd failed, err: %v \\n&quot;, err)\n		return\n	}\n	fmt.Println(&quot;connect to etcd success&quot;)\n\n	// 延迟关闭\n	defer cli.Close()\n\n	// put操作  设置1秒超时\n	ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n	_, err = cli.Put(ctx, &quot;moxi&quot;, &quot;lalala&quot;)\n	cancel()\n	if err != nil {\n		fmt.Printf(&quot;put to etcd failed, err:%v \\n&quot;, err)\n		return\n	}\n\n	// get操作，设置1秒超时\n	ctx, cancel = context.WithTimeout(context.Background(), time.Second)\n	resp, err := cli.Get(ctx, &quot;q1mi&quot;)\n	cancel()\n	if err != nil {\n		fmt.Printf(&quot;get from etcd failed, err:%v \\n&quot;, err)\n		return\n	}\n	fmt.Println(resp)\n}\n\n\n\n\n\n\n\n</code></pre>\n<h3 id=\"测试\">测试</h3>\n<p>今天我们在做啥呢</p>\n<p>我觉得还不错呢？</p>\n','7e0e93ea6cdb44ae92e58f48e6496ed7',2,0,'3dab9866f9ac1867d3845918d4b5b748',0,'2020-09-14 16:41:10','2020-10-07 16:31:58','1f01cd1d2f474743b241d74008b12333','1','陌溪','蘑菇博客','a03d7290b1c04b6eaf46659661b47032',2,'1',0,1,0,NULL,26);

/*Table structure for table `t_blog_sort` */

DROP TABLE IF EXISTS `t_blog_sort`;

CREATE TABLE `t_blog_sort` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `sort_name` varchar(255) DEFAULT NULL COMMENT '分类内容',
  `content` varchar(255) DEFAULT NULL COMMENT '分类简介',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `sort` int DEFAULT '0' COMMENT '排序字段，越大越靠前',
  `click_count` int DEFAULT '0' COMMENT '点击数',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='博客分类表';

/*Data for the table `t_blog_sort` */

insert  into `t_blog_sort`(`uid`,`sort_name`,`content`,`create_time`,`update_time`,`status`,`sort`,`click_count`) values ('01b604bb1be10b32847f6fc64e1111bf','测试2','测试2','2020-10-13 10:00:44','2020-10-13 10:00:52',0,0,0),('029d80ba36a04c96a89a80e2705031a2','测试分类','测试分类','2019-01-11 21:10:43','2019-01-11 21:10:43',0,0,0),('043e2062e18497fc283d30657e800dac','JVM','Java虚拟机','2020-03-10 07:28:04','2020-03-10 07:28:04',0,0,0),('093d8bdd01c84890a928e923d5c235fe','软件推荐','软件推荐','2018-09-25 16:14:59','2020-10-13 10:00:23',1,0,5),('2c93dfab0e754006866f8ed486923a41','慢生活','慢生活，不是懒惰，放慢速度不是拖延时间，而是让我们在生活中寻找到平衡','2018-09-25 15:29:33','2020-10-13 10:00:23',1,0,19),('337806254f9c42999043de5c5ee09e77','技术新闻','发现世界的每一天','2018-12-30 10:42:11','2020-10-13 10:00:23',1,0,58),('9d2019983d91490aaa758eddd7c07caf','机器学习','机器学习','2018-11-22 20:56:02','2020-10-13 10:00:23',1,0,3),('a03d7290b1c04b6eaf46659661b47032','后端开发','后端开发专题','2018-12-30 10:35:43','2020-10-13 10:00:23',1,6,362),('ca28ffc94ea94fbda5571e0b242021e2','前端开发','前端开发专题','2018-12-30 10:35:58','2020-10-13 10:00:23',1,0,56),('db0d64ea7df409de5d2d747927cfa1a5','学习笔记','学习笔记','2019-08-31 09:50:03','2020-10-13 10:00:23',1,3,111),('e4ccfe610a5d59538836ddbf4dcb31c7','分类名称','分类介绍','2020-10-13 10:00:08','2020-10-13 10:00:14',0,0,0),('e60df954efcd47c48463a504bb70bbe9','面试','面试专题','2018-12-20 21:16:30','2020-10-13 10:00:23',1,0,43);

/*Table structure for table `t_blog_spider` */

DROP TABLE IF EXISTS `t_blog_spider`;

CREATE TABLE `t_blog_spider` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `title` varchar(200) DEFAULT NULL COMMENT '博客标题',
  `summary` varchar(200) DEFAULT NULL COMMENT '博客简介',
  `content` longtext COMMENT '博客内容',
  `tag_uid` varchar(255) DEFAULT NULL COMMENT '标签uid',
  `click_count` int DEFAULT '0' COMMENT '博客点击数',
  `collect_count` int DEFAULT '0' COMMENT '博客收藏数',
  `file_uid` varchar(255) DEFAULT NULL COMMENT '标题图片uid',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `admin_uid` varchar(32) DEFAULT NULL COMMENT '管理员uid',
  `is_original` varchar(1) DEFAULT '1' COMMENT '是否原创（0:不是 1：是）',
  `author` varchar(255) DEFAULT NULL COMMENT '作者',
  `articles_part` varchar(255) DEFAULT NULL COMMENT '文章出处',
  `blog_sort_uid` varchar(32) DEFAULT NULL COMMENT '博客分类UID',
  `level` tinyint(1) DEFAULT '0' COMMENT '推荐等级(0:正常)',
  `is_publish` varchar(1) DEFAULT '1' COMMENT '是否发布：0：否，1：是',
  `sort` int NOT NULL DEFAULT '0' COMMENT '排序字段',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='博客爬取表';

/*Data for the table `t_blog_spider` */

/*Table structure for table `t_category_menu` */

DROP TABLE IF EXISTS `t_category_menu`;

CREATE TABLE `t_category_menu` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `name` varchar(255) NOT NULL COMMENT '菜单名称',
  `menu_level` tinyint(1) DEFAULT NULL COMMENT '菜单级别',
  `summary` varchar(200) DEFAULT NULL COMMENT '简介',
  `parent_uid` varchar(32) DEFAULT NULL COMMENT '父uid',
  `url` varchar(255) DEFAULT NULL COMMENT 'url地址',
  `icon` varchar(50) DEFAULT NULL COMMENT '图标',
  `sort` int DEFAULT '0' COMMENT '排序字段，越大越靠前',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `is_show` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否显示 1:是 0:否',
  `menu_type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '菜单类型 0: 菜单   1: 按钮',
  `is_jump_external_url` tinyint(1) DEFAULT '0' COMMENT '是否跳转外部链接 0：否，1：是',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='管理员表';

/*Data for the table `t_category_menu` */

insert  into `t_category_menu`(`uid`,`name`,`menu_level`,`summary`,`parent_uid`,`url`,`icon`,`sort`,`status`,`create_time`,`update_time`,`is_show`,`menu_type`,`is_jump_external_url`) values ('02ea2f9ef5d44f559fb66189b05f6769','Solr',2,'Solr监控中心','147cd431cbb9007bde87444d7987b151','/monitor/Solr','el-icon-lightning',0,1,'2018-11-30 03:55:39','2020-12-09 20:41:22',1,0,0),('062087bce19d00312b3787b6e24c21d1','字典数据',2,'字典数据','badf0010422b432ba6ec9c83a25012ed','/system/sysDictData','el-icon-data-line',0,1,'2020-02-21 18:06:11','2020-05-30 08:44:04',0,0,0),('065cda845549289b2afcd0129d87c2c0','新增用户',3,'新增用户','fb4237a353d0418ab42c748b7c1d64c6','/user/add',NULL,0,1,'2020-09-29 20:40:09','2020-09-29 20:40:30',1,1,0),('079f0cfdb7a7017d827f5c349983eebc','Eureka',2,'Eureka监控中心','147cd431cbb9007bde87444d7987b151','/monitor/eureka','el-icon-moon-night',0,0,'2020-01-06 05:27:30','2020-12-05 15:21:41',1,0,0),('0a035547bbec404eb3ee0ef43312148d','分类管理',2,'管理博客分类','49b42250abcb47ff876bad699cf34f03','/blog/blogSort','el-icon-brush',10,1,'2018-11-26 03:07:14','2020-05-30 08:34:17',1,0,0),('0cab1fcdcd01f394768e2e2674e56773','本地上传',3,'本地文件上传','1f01cd1d2f474743b241d74008b12333','/blog/uploadLocalBlog',NULL,1,1,'2020-04-15 17:28:36','2020-07-09 21:40:01',1,1,0),('147cd431cbb9007bde87444d7987b151','监控中心',1,'监控中心',NULL,'/monitor','el-icon-monitor',0,1,'2020-01-06 13:25:32','2020-07-09 21:33:11',1,0,0),('14bcfc15d02f0d568adf2d383c0342d8','查询',3,'服务监控查询','a0c40ddd3fe15bb3f2edf9ec242a1511','/monitor/getServerInfo',NULL,0,1,'2020-06-03 09:27:41','2020-06-03 09:27:41',1,1,0),('152216a4fd9b995aa20bfa1eec6312c2','Nacos',2,'Nacos图形化界面','147cd431cbb9007bde87444d7987b151','http://localhost:8848/nacos','el-icon-star-off',5,1,'2020-07-03 21:39:58','2020-12-05 15:31:11',1,0,1),('16a75a3c38e71c1046b443b4b64dd930','删除选中',3,'博客管理 删除选中','1f01cd1d2f474743b241d74008b12333','/blog/deleteBatch',NULL,0,1,'2020-03-21 18:21:01','2020-03-21 18:21:01',1,1,0),('1cc493d36e17fad535f2bf70242162b0','图片管理',2,'图片管理','65e22f3d36d94bcea47478aba02895a1','/picture/picture','el-icon-brush',1,1,'2020-02-21 22:27:12','2020-10-12 10:12:30',1,0,0),('1d9a5030142e9fd7690f554c20e3bc90','推荐管理',2,'博客推荐管理','49b42250abcb47ff876bad699cf34f03','/blog/blogRecommend','el-icon-ice-cream-round',0,1,'2020-01-28 10:06:32','2020-05-30 08:34:54',1,0,0),('1dd262b88b63e8f6bd9a6ca72ed0622c','导航栏管理 删除',3,'导航栏管理 删除','6275bc5189e2e595b621d744d68278af','/webNavbar/delete',NULL,0,1,'2021-02-23 13:02:12','2021-02-23 13:02:12',1,1,0),('1f01cd1d2f474743b241d74008b12333','博客管理',2,'对博客进行增删改查','49b42250abcb47ff876bad699cf34f03','/blog/blog','el-icon-notebook-2',11,1,'2018-11-27 03:47:07','2020-05-30 08:33:22',1,0,0),('21a411858fc22b5feb4c44fcad00e529','导航栏管理 编辑',3,'导航栏管理 编辑','6275bc5189e2e595b621d744d68278af','/webNavbar/edit',NULL,0,1,'2021-02-23 13:01:36','2021-02-23 13:01:36',1,1,0),('237d410f90d0c70b894f87a87718d88c','删除全选',3,'专题元素管理 删除全选','7cb1a6b7462832bf831a18a28eea94cd','/subjectItem/deleteBatch',NULL,0,1,'2020-08-23 09:17:22','2020-08-23 09:17:22',1,1,0),('238352fc7e86340c339b9a575b1b7086','Sentinel',2,'Sentinel监控中心','147cd431cbb9007bde87444d7987b151','http://localhost:8070/sentinel/','el-icon-warning-outline',4,1,'2020-07-06 21:25:52','2020-12-05 15:31:27',1,0,1),('2496af227b283bc79d9261b73e3ea743','删除选中',3,'参数配置 删除选中','3eacc357e23b0b17e4f835c2f998ed34','/sysParams/deleteBatch',NULL,0,1,'2020-07-21 16:49:18','2020-07-21 16:49:18',1,1,0),('25b3ea9639872aa730ad6147baf61641','删除',3,'参数配置 删除','3eacc357e23b0b17e4f835c2f998ed34','/sysParams/deleteBatch',NULL,0,1,'2020-07-21 16:48:57','2020-07-21 16:48:57',1,1,0),('26bcccf0164bf84f12ab20448388d346','待办事项',2,'首页  代办事项','badf0010422b432ba6ec9c83a25012ed','/dashboard/todo','el-icon-date',0,1,'2020-03-23 07:51:52','2020-05-30 09:06:59',0,0,0),('2a733ff390af9b44ecda4e8c4634d73k','删除',3,'菜单管理 删除','aa225cdae6464bc0acebd732192f8362','/categoryMenu/delete',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d75d','删除选中',3,'分类管理 删除选中','0a035547bbec404eb3ee0ef43312148d','/blogSort/deleteBatch',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d75f','删除选中',3,'标签管理 删除选中','6606b7e646d545e5a25c70b5e5fade9f','/tag/deleteBatch',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d75k','删除选中',3,'评论管理 删除选中','9beb7caa2c844b36a02789262dc76fbe','/comment/deleteBatch',NULL,0,1,'2020-03-21 18:23:19','2020-04-21 08:33:27',1,1,0),('2a733ff390af9b44ecda4e8c4634d75t','重置密码',3,'用户管理 重置密码','fb4237a353d0418ab42c748b7c1d64c6','/user/resetUserPassword',NULL,0,1,'2020-03-21 18:23:19','2020-04-21 08:28:37',1,1,0),('2a733ff390af9b44ecda4e8c4634d75u','初始化ElasticSearch索引',3,'ElasticSearch 初始化ElasticSearch索引','bfc9463e59a3ca250dcfc1c86627e034','/search/initElasticIndex',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d75v','初始化Solr索引',3,'Solr 初始化Solr索引','02ea2f9ef5d44f559fb66189b05f6769','/search/initSolrIndex',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d78k','删除',3,'友情链接 删除','9002d1ae905c4cb79c2a485333dad2f7','/link/delete',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d7ck','删除选中',3,'字典数据 删除选中','062087bce19d00312b3787b6e24c21d1','/sysDictData/deleteBatch',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d7gk','删除选中',3,'图片管理 删除选中','1cc493d36e17fad535f2bf70242162b0','/picture/delete',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d7lk','删除',3,'管理员管理 删除','2de247af3b0a459095e937d7ab9f5864','/admin/delete',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d7pk','删除',3,'图片类别管理 删除','4dea9c4f39d2480983e8c4333d35e036','/pictureSort/delete',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634d7uk','删除',3,'角色管理 删除','5010ae46511e4c0b9f30d1c63ad3f0c1','/role/delete',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634db8k','删除',3,'资源分类 删除','9449ce5dd5e24b21a9d15f806cb36e87','/resourceSort/deleteBatch',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634dh8c','删除',3,'视频管理 删除','ffc6e9ca2cc243febf6d2f476b849163','/studyVideo/deleteBatch',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634dh8k','删除',3,'字典管理 删除','c28f0b052e0b930299dd53de59cc32d7','/sysDictType/delete',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2a733ff390af9b44ecda4e8c4634dm8k','修改密码',3,'关于我 修改密码','faccfe476b89483791c05019ad5b4906','/system/changePwd',NULL,0,1,'2020-03-21 18:23:19','2020-03-21 18:23:19',1,1,0),('2b983c5439ac07f2cf07437ba9fff6be','编辑',3,'博客管理 编辑','1f01cd1d2f474743b241d74008b12333','/blog/edit',NULL,0,1,'2020-03-21 18:15:26','2020-03-21 18:15:26',1,1,0),('2d5cd8a387fc2d010c245acd65fefd3b','强退用户',3,'强退后台管理员','bfcb9b002c3de18f269189c573b985f8','/admin/forceLogout',NULL,0,1,'2020-06-09 18:48:28','2020-06-09 18:48:28',1,1,0),('2de247af3b0a459095e937d7ab9f5864','管理员管理',2,'管理员增删改查','d3a19221259d439b916f475e43edb13d','/authority/admin','el-icon-trophy',0,1,'2018-11-25 19:09:21','2020-05-30 08:45:43',1,0,0),('2fb47d3b6dbd44279c8206740a263543','网站配置',2,'网站配置','badf0010422b432ba6ec9c83a25012ed','/system/webConfig','el-icon-setting',1,1,'2018-11-28 19:59:04','2020-08-30 08:01:11',1,0,0),('327d945daf4ddb71976c4ab3830e7c4i','新增',3,'菜单管理 新增','aa225cdae6464bc0acebd732192f8362','/categoryMenu/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7c66','新增',3,'分类管理 新增','0a035547bbec404eb3ee0ef43312148d','/blogSort/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7c6h','新增',3,'标签管理 新增','6606b7e646d545e5a25c70b5e5fade9f','/tag/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7c6i','新增',3,'评论管理 新增','9beb7caa2c844b36a02789262dc76fbe','/comment/add',NULL,0,1,'2020-03-21 18:22:06','2020-04-21 08:33:12',1,1,0),('327d945daf4ddb71976c4ab3830e7c7i','新增',3,'友情链接 新增','9002d1ae905c4cb79c2a485333dad2f7','/link/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7cdi','新增',3,'字典数据 新增','062087bce19d00312b3787b6e24c21d1','/sysDictData/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7cfi','新增',3,'图片管理 新增','1cc493d36e17fad535f2bf70242162b0','/picture/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7cmi','新增',3,'管理员管理 新增','2de247af3b0a459095e937d7ab9f5864','/admin/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7cqi','新增',3,'图片类别管理 新增','4dea9c4f39d2480983e8c4333d35e036','/pictureSort/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7cvi','新增',3,'角色管理 新增','5010ae46511e4c0b9f30d1c63ad3f0c1','/role/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7d7i','新增',3,'资源分类 新增','9449ce5dd5e24b21a9d15f806cb36e87','/resourceSort/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7g7d','新增',3,'视频管理 新增','ffc6e9ca2cc243febf6d2f476b849163','/studyVideo/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('327d945daf4ddb71976c4ab3830e7g7i','新增',3,'字典管理 新增','c28f0b052e0b930299dd53de59cc32d7','/sysDictType/add',NULL,0,1,'2020-03-21 18:22:06','2020-03-21 18:22:06',1,1,0),('34c1b7b1bd3118979fe1f9f9a1147fa5','表单构建',2,'表单构建','f4697cdf85920369179b90ff45a5982d','/test/FormBuild','el-icon-milk-tea',0,1,'2020-05-26 22:33:16','2020-05-30 08:46:31',1,0,0),('3e92f2fd6cf012d30bfae2d9cdb7092d','专题管理',2,'博客专题管理','49b42250abcb47ff876bad699cf34f03','/blog/subject','el-icon-collection',0,1,'2020-08-23 08:51:12','2020-08-23 09:18:13',1,0,0),('3eacc357e23b0b17e4f835c2f998ed34','参数配置',2,'配置项目中使用的参数','badf0010422b432ba6ec9c83a25012ed','/system/sysParams','el-icon-document',0,1,'2020-07-21 16:45:15','2020-07-21 16:45:15',1,0,0),('4062db4658392e71c177758bb51bb4cb','新建文件夹',3,'网盘管理 新建文件夹','e1e54aea65cc22d9f8a4c74ce8d23749','/networkDisk/create',NULL,0,1,'2020-06-15 10:36:51','2020-06-15 10:47:02',1,1,0),('407a263eb12eff5aac31e9f62901cea0','Markdown',2,'Markdown编辑器','f4697cdf85920369179b90ff45a5982d','/test/Markdown','el-icon-watermelon',0,1,'2020-01-30 10:36:43','2020-05-30 08:46:22',1,0,0),('4337f63d13d84b9aba64b9d7a69fd066','异常日志',2,'异常日志','98b82be8785e41dc939b6a5517fdfa53','/log/exceptionLog','el-icon-ice-cream',0,1,'2018-11-28 20:01:36','2020-05-30 08:47:53',1,0,0),('49b42250abcb47ff876bad699cf34f03','博客管理',1,'用于博客的一些相关操作',NULL,'/blog','el-icon-edit',20,1,'2018-11-25 05:15:07','2020-10-07 15:35:48',1,0,0),('4dea9c4f39d2480983e8c4333d35e036','图片类别管理',2,'图片类别','65e22f3d36d94bcea47478aba02895a1','/picture/pictureSort','el-icon-printer',2,1,'2018-11-28 19:50:31','2020-10-12 10:13:57',1,0,0),('4fe7725159ced4a238b816a4595109d1','门户管理',1,'管理门户页面',NULL,'/web','el-icon-help',0,1,'2021-02-22 18:25:34','2021-02-22 18:25:34',1,0,0),('5010ae46511e4c0b9f30d1c63ad3f0c1','角色管理',2,'管理用户角色信息','d3a19221259d439b916f475e43edb13d','/authority/role','el-icon-user',0,1,'2018-11-25 19:10:34','2020-05-30 09:06:22',1,0,0),('505b4769b77617a314a3ed78e4acdff7','Zipkin',2,'Zipkin链路追踪','147cd431cbb9007bde87444d7987b151','http://localhost:9411/zipkin/','el-icon-moon',2,1,'2020-02-06 20:22:18','2020-12-05 15:31:42',1,0,1),('510483ce569b4fc88299f346147b1314','资源管理',1,'资源管理','','/resource','el-icon-present',2,1,'2018-11-28 19:42:13','2020-05-30 08:51:30',1,0,0),('587e2697fa4d85046feece8ab9d0706c','Redis操作',3,'Redis操作 清空缓存','78f24799307cb63bc3759413dadf4d1a','/systemConfig/cleanRedisByKey',NULL,0,1,'2020-04-03 19:38:01','2020-04-03 19:38:00',1,1,0),('5bf9bd28d387ef923f2c5d11ec01fbbd','按创建时间排序',3,'按创建时间排序','7cb1a6b7462832bf831a18a28eea94cd','/subjectItem/sortByCreateTime',NULL,0,1,'2020-12-08 20:38:10','2020-12-08 20:38:10',1,1,0),('5ef38a4f70c6d859155528776a30cda7','上传文件',3,'网盘管理 上传文件','e1e54aea65cc22d9f8a4c74ce8d23749','/networkDisk/add',NULL,0,1,'2020-06-15 10:35:45','2020-06-15 10:46:53',1,1,0),('6228ff4e9ebd42c89599b322201a0345','反馈管理',2,'反馈管理','bcf4a9bc21c14b559bcb015fb7912266','/message/feedback','el-icon-microphone',0,1,'2018-11-28 19:48:30','2020-05-30 08:48:39',1,0,0),('6275bc5189e2e595b621d744d68278af','导航栏管理',2,'导航栏管理','4fe7725159ced4a238b816a4595109d1','/web/webNavbar','el-icon-c-scale-to-original',0,1,'2021-02-22 18:26:13','2021-02-22 18:26:13',1,0,0),('62c91c47c4646661c045727f0a8eb9d4','查询',3,'代办事项  查询','26bcccf0164bf84f12ab20448388d346','/todo/getList',NULL,0,1,'2020-03-23 07:52:42','2020-03-23 07:52:42',1,1,0),('65e22f3d36d94bcea47478aba02895a1','图片管理',1,'图片管理','','/picture','el-icon-picture-outline',3,1,'2018-11-28 19:48:53','2020-05-30 09:07:12',1,0,0),('6606b7e646d545e5a25c70b5e5fade9f','标签管理',2,'对博客标签进行管理','49b42250abcb47ff876bad699cf34f03','/blog/blogTag','el-icon-folder-opened',4,1,'2018-11-26 02:57:38','2020-05-30 08:34:43',1,0,0),('672b093002b618293befd8e1a164e4cc','图片列表',2,'图片列表','f4697cdf85920369179b90ff45a5982d','/test/PictureList','el-icon-sugar',0,1,'2020-04-19 08:31:23','2020-05-30 08:46:14',1,0,0),('688beda820a236b50f18ccdd5dc9fee9','下载',3,'网盘管理 下载','e1e54aea65cc22d9f8a4c74ce8d23749','/networkDisk/download',NULL,0,1,'2020-06-15 10:37:17','2020-06-15 10:46:45',1,1,0),('6c8a8c50c77429fab210bd52ed8c50ba','引用量排序',3,'标签管理 引用量排序','6606b7e646d545e5a25c70b5e5fade9f','/tag/tagSortByCite',NULL,0,1,'2020-03-21 21:38:19','2020-03-21 21:38:19',1,1,0),('6c8a8c50c77429fab210bd52ed8c50bb','引用量排序',3,'分类管理 引用量排序','0a035547bbec404eb3ee0ef43312148d','/blogSort/blogSortByCite',NULL,0,1,'2020-03-21 21:38:19','2020-03-21 21:38:19',1,1,0),('72d26cf940bf9dfb6bde0a590ff40882','删除',3,'分类管理，删除分类','0a035547bbec404eb3ee0ef43312148d','/blogSort/delete',NULL,0,1,'2020-03-21 18:22:51','2020-03-21 18:22:51',1,1,0),('72d26cf940bf9dfb6bde0a590ff4088g','删除',3,'标签管理，删除分类','6606b7e646d545e5a25c70b5e5fade9f','/tag/delete',NULL,0,1,'2020-03-21 18:22:51','2020-03-21 18:22:51',1,1,0),('72d26cf940bf9dfb6bde0a590ff4088j','删除',3,'评论管理，删除','9beb7caa2c844b36a02789262dc76fbe','/comment/delete',NULL,0,1,'2020-03-21 18:22:51','2020-04-21 08:33:21',1,1,0),('72d26cf940bf9dfb6bde0a590ff4088s','删除',3,'用户管理，删除','fb4237a353d0418ab42c748b7c1d64c6','/user/delete',NULL,0,1,'2020-03-21 18:22:51','2020-04-21 08:28:30',1,1,0),('72d26cf940bf9dfb6bde0a590ff408ej','设为封面',3,'图片管理，设为封面','1cc493d36e17fad535f2bf70242162b0','/picture/setCover',NULL,0,1,'2020-03-21 18:22:51','2020-03-21 18:22:51',1,1,0),('72d26cf940bf9dfb6bde0a590ff408nj','重置密码',3,'管理员管理，重置密码','2de247af3b0a459095e937d7ab9f5864','/admin/restPwd',NULL,0,1,'2020-03-21 18:22:51','2020-03-21 18:22:51',1,1,0),('78ab104b123f4950af14d65798afb756','收藏管理',2,'管理用户收藏','49b42250abcb47ff876bad699cf34f03','/blog/collect','el-icon-folder-add',8,1,'2018-11-25 19:07:48','2020-05-30 08:34:29',1,0,0),('78f24799307cb63bc3759413dadf4d1a','系统配置',2,'设置七牛云和邮箱等相关配置','badf0010422b432ba6ec9c83a25012ed','/system/systemConfig','el-icon-s-tools',2,1,'2020-01-21 09:29:04','2020-08-30 08:01:17',1,0,0),('7ada0a7053be4ad4b31f6be64315d03a','删除',3,'博客管理 删除','1f01cd1d2f474743b241d74008b12333','/blog/delete',NULL,0,1,'2020-03-21 15:16:54','2020-03-21 15:16:54',1,1,0),('7be9dee2f91165d8562aaa80c7e5b936','编辑',3,'代办事项','26bcccf0164bf84f12ab20448388d346','/todo/edit',NULL,0,1,'2020-03-23 07:53:38','2020-03-23 07:53:38',1,1,0),('7cb1a6b7462832bf831a18a28eea94cd','专题元素管理',2,'专题元素管理','49b42250abcb47ff876bad699cf34f03','/blog/subjectItem','el-icon-star-off',0,1,'2020-08-23 09:15:06','2020-08-23 09:15:06',0,0,0),('80ee135af885f02d52ecb67d5a05b173','点击量排序',3,'分类管理 点击量排序','0a035547bbec404eb3ee0ef43312148d','/blogSort/blogSortByClickCount',NULL,0,1,'2020-03-21 21:37:42','2020-03-21 21:37:42',1,1,0),('80ee135af885f02d52ecb67d5a05b17b','点击量排序',3,'标签管理 点击量排序','6606b7e646d545e5a25c70b5e5fade9f','/tag/tagSortByClickCount',NULL,0,1,'2020-03-21 21:37:42','2020-03-21 21:37:42',1,1,0),('82962bbcdb674a3fdd57aec131114d56','编辑',3,'参数配置 编辑','3eacc357e23b0b17e4f835c2f998ed34','/sysParams/edit',NULL,0,1,'2020-07-21 16:49:41','2020-07-21 16:49:41',1,1,0),('86508603e6d78036db0bf9222946f68c','新增',3,'专题元素管理 新增','7cb1a6b7462832bf831a18a28eea94cd','/subjectItem/add',NULL,0,1,'2020-08-23 09:16:00','2020-08-23 09:16:00',1,1,0),('879cfcd4dfd3e5bc1bb6ea2c0f1f82c0','按钮管理',2,'按钮管理','d3a19221259d439b916f475e43edb13d','/authority/button','el-icon-connection',0,1,'2020-03-21 17:39:12','2020-05-30 08:44:48',1,0,0),('8b40ea466efc42f497c49c8a610c9c20','添加参数',3,'参数配置 新增','3eacc357e23b0b17e4f835c2f998ed34','/sysParams/add',NULL,0,1,'2020-07-21 16:47:08','2020-07-21 16:47:08',1,1,0),('9002d1ae905c4cb79c2a485333dad2f7','友情链接',2,'友情链接','badf0010422b432ba6ec9c83a25012ed','/system/blogLink','el-icon-ship',0,1,'2018-11-29 03:56:35','2020-05-30 08:36:01',1,0,0),('93f7fd9a6e81735c47649e6b36042b5d','Druid',2,'Druid监控中心','147cd431cbb9007bde87444d7987b151','http://localhost:8607/mogu-admin/druid/login.html','el-icon-cloudy-and-sunny',1,1,'2020-01-06 13:26:51','2020-12-05 15:31:47',1,0,1),('9449ce5dd5e24b21a9d15f806cb36e87','资源分类',2,'资源分类','510483ce569b4fc88299f346147b1314','/resource/resourceSort','el-icon-folder-opened',0,1,'2018-11-29 03:43:27','2020-05-30 08:51:58',1,0,0),('94bee9c48a4611c96b89112b845c7f28','移动',3,'网盘管理  移动文件','e1e54aea65cc22d9f8a4c74ce8d23749','/networkDisk/move',NULL,0,1,'2020-06-15 10:36:23','2020-06-15 10:46:39',1,1,0),('98b82be8785e41dc939b6a5517fdfa53','操作日志',1,'操作日志','','/log','el-icon-paperclip',9,1,'2018-11-28 20:00:19','2020-05-30 08:47:14',1,0,0),('99f5d4233d446a809b9937961c590766','获取在线管理员',3,'获取在线管理员列表','bfcb9b002c3de18f269189c573b985f8','/admin/getOnlineAdminList',NULL,0,1,'2020-06-09 18:49:32','2020-06-09 18:49:32',1,1,0),('9beb7caa2c844b36a02789262dc76fbe','评论管理',2,'评论管理','bcf4a9bc21c14b559bcb015fb7912266','/message/comment','el-icon-chat-line-square',1,1,'2018-11-28 19:47:23','2020-05-30 08:48:28',1,0,0),('9c91231f1682aabd765225a7e503bb43','删除',3,'反馈管理 删除','6228ff4e9ebd42c89599b322201a0345','/feedback/deleteBatch',NULL,0,1,'2020-03-22 11:17:27','2020-03-22 11:17:27',1,1,0),('9db7ffbded9717f13a1a97fca46bc17c','导出选中',3,'导出选中，前端实现','1f01cd1d2f474743b241d74008b12333','/blog/downloadBatch',NULL,0,1,'2020-04-27 22:14:35','2020-04-27 22:14:35',1,1,0),('9e73a9b1de18e4f1cb19eca5e8cd321d','批量编辑',3,'代办事项 批量编辑','26bcccf0164bf84f12ab20448388d346','/todo/toggleAll',NULL,0,1,'2020-03-23 07:54:37','2020-03-23 07:54:37',1,1,0),('9e91b4f993c946cba4bf720b2c1b2e90','用户日志',2,'用户Web端访问情况','98b82be8785e41dc939b6a5517fdfa53','/log/webVisit','el-icon-hot-water',0,1,'2019-05-17 10:16:47','2020-05-30 08:47:41',1,0,0),('a0c40ddd3fe15bb3f2edf9ec242a1511','服务器监控',2,'服务器监控','147cd431cbb9007bde87444d7987b151','/monitor/serverMonitor','el-icon-light-rain',7,1,'2020-06-03 09:26:13','2020-12-05 15:27:45',1,0,0),('a5902692a3ed4fd794895bf634f97b8e','操作日志',2,'操作日志','98b82be8785e41dc939b6a5517fdfa53','/log/log','el-icon-lollipop',0,1,'2018-11-28 20:01:02','2020-05-30 08:47:27',1,0,0),('a8bad1abec6c8fc8d4bce5a27829c878','编辑',3,'专题管理 编辑','3e92f2fd6cf012d30bfae2d9cdb7092d','/subject/edit',NULL,0,1,'2020-08-23 08:55:55','2020-08-23 08:55:55',1,1,0),('a9396f1a3fbdec3d4cb614f388a22bea','Monitor',2,'SpringBootAdmin监控中心','147cd431cbb9007bde87444d7987b151','http://localhost:8607/mogu-monitor/wallboard','el-icon-partly-cloudy',5,1,'2020-01-05 21:30:16','2020-12-05 15:30:27',1,0,1),('aa225cdae6464bc0acebd732192f8362','菜单管理',2,'对页面菜单进行管理','d3a19221259d439b916f475e43edb13d','/authority/categoryMenu','el-icon-tickets',0,1,'2018-11-25 11:12:01','2020-05-30 08:44:32',1,0,0),('aa6c5d513421aa50cac1ee9ec647d100','导航栏管理 新增',3,'导航栏管理 新增','6275bc5189e2e595b621d744d68278af','/webNavbar/add',NULL,0,1,'2021-02-23 13:01:16','2021-02-23 13:01:16',1,1,0),('ab1289c29b336dccda87a9fa8b711aa2','删除',3,'代办事项 删除','26bcccf0164bf84f12ab20448388d346','/todo/delete',NULL,0,1,'2020-03-23 07:54:01','2020-03-23 07:54:01',1,1,0),('acbb5d09da25e6c9e019cc361b35d159','Search接口',2,'Search接口','baace3dc03d34c54b81761dce8243814','http://localhost:8606/swagger-ui/index.html','el-icon-sunrise',0,1,'2020-01-19 19:56:23','2020-12-05 15:47:36',1,0,0),('aef85c40b54320d7c5a9d78697e12910','置顶',3,'分类管理 置顶','0a035547bbec404eb3ee0ef43312148d','/blogSort/stick',NULL,0,1,'2020-03-21 21:37:07','2020-03-21 21:37:07',1,1,0),('aef85c40b54320d7c5a9d78697e1291c','置顶',3,'标签管理 置顶','6606b7e646d545e5a25c70b5e5fade9f','/tag/stick',NULL,0,1,'2020-03-21 21:37:07','2020-03-21 21:37:07',1,1,0),('aef85c40b54320d7c5a9d78697e1295n','置顶',3,'菜单管理 置顶','aa225cdae6464bc0acebd732192f8362','/categoryMenu/stick',NULL,0,1,'2020-03-21 21:37:07','2020-03-21 21:37:07',1,1,0),('aef85c40b54320d7c5a9d78697e1296n','置顶',3,'友情链接 置顶','9002d1ae905c4cb79c2a485333dad2f7','/link/stick',NULL,0,1,'2020-03-21 21:37:07','2020-03-21 21:37:07',1,1,0),('aef85c40b54320d7c5a9d78697e129rn','置顶',3,'图片类别管理 置顶','4dea9c4f39d2480983e8c4333d35e036','/pictureSort/stick',NULL,0,1,'2020-03-21 21:37:07','2020-03-21 21:37:07',1,1,0),('aef85c40b54320d7c5a9d78697e12e6n','置顶',3,'资源分类 置顶','9449ce5dd5e24b21a9d15f806cb36e87','/resourceSort/stick',NULL,0,1,'2020-03-21 21:37:07','2020-03-21 21:37:07',1,1,0),('af0e753d3ea0adf5cd8cf1dd55f162c2','接口聚合',2,'聚合所有模块的接口','baace3dc03d34c54b81761dce8243814','http://localhost:8607/doc.html','el-icon-ice-cream-round',5,1,'2020-12-05 15:42:51','2020-12-05 15:42:51',1,0,1),('b21105b915a5b54588c2cd458a94d2d5','新增',3,'专题管理 新增','3e92f2fd6cf012d30bfae2d9cdb7092d','/subject/add',NULL,0,1,'2020-08-23 08:55:29','2020-08-23 08:55:29',1,1,0),('b511cae571834971a392ae4779270034','游客管理',2,'游客管理','c519725da92b42f3acf0cc9fad58c664','/user/visitor','el-icon-news',2,1,'2018-11-28 19:54:28','2020-05-30 08:47:06',1,0,0),('b7fc36f7efc9738bddc9b09fedeccf60','导航栏管理 查询全部',3,'导航栏管理 查询全部','6275bc5189e2e595b621d744d68278af','/webNavbar/getAllList',NULL,0,1,'2021-02-23 13:00:24','2021-02-23 13:00:24',1,1,0),('baa21ccb45ee133b064187185edb2ac0','删除',3,'网盘管理 删除','e1e54aea65cc22d9f8a4c74ce8d23749','/networkDisk/delete',NULL,0,1,'2020-06-15 10:36:07','2020-06-15 10:46:33',1,1,0),('baace3dc03d34c54b81761dce8243814','接口管理',1,'接口管理','','/restapi','el-icon-stopwatch',4,1,'2018-11-28 20:01:57','2020-05-30 08:49:22',1,0,0),('badf0010422b432ba6ec9c83a25012ed','系统管理',1,'系统管理','','/system','el-icon-setting',19,1,'2018-11-28 19:54:47','2020-10-07 15:35:52',1,0,0),('bcf4a9bc21c14b559bcb015fb7912266','消息管理',1,'消息管理','','/message','el-icon-message',6,1,'2018-11-28 19:45:29','2020-05-30 08:48:21',1,0,0),('bcfac78203944094040851cc0a9bb095','删除',3,'专题元素管理 删除','7cb1a6b7462832bf831a18a28eea94cd','/subjectItem/delete',NULL,0,1,'2020-08-23 09:16:50','2020-08-23 09:16:50',1,1,0),('bfc9463e59a3ca250dcfc1c86627e034','ElasticSearch',2,'ElasticSearch监控页面','147cd431cbb9007bde87444d7987b151','/monitor/ElasticSearch','el-icon-cloudy',0,1,'2020-01-15 22:58:00','2020-12-09 20:41:11',1,0,0),('bfcb9b002c3de18f269189c573b985f8','在线用户',2,'在线的用户和管理员','147cd431cbb9007bde87444d7987b151','/monitor/OnlineAdmin','el-icon-sunset',6,1,'2020-06-09 17:14:02','2020-12-05 15:27:39',1,0,0),('c28f0b052e0b930299dd53de59cc32d7','字典管理',2,'字典管理','badf0010422b432ba6ec9c83a25012ed','/system/sysDictType','el-icon-lightning',0,1,'2020-02-16 18:11:10','2020-05-30 08:35:46',1,0,0),('c2a1218dd07747a57b055f184ddae217','查询',3,'参数配置 查询','3eacc357e23b0b17e4f835c2f998ed34','/sysParams/getList',NULL,0,1,'2020-07-21 16:48:17','2020-07-21 16:48:17',1,1,0),('c519725da92b42f3acf0cc9fad58c664','用户管理',1,'用户管理','','/user','el-icon-house',15,1,'2018-11-28 19:51:47','2020-05-30 08:46:44',1,0,0),('cbd7ba11c1b38c66b569405ed9185f35','RabbitMQ',2,'RabbitMQ监控中心','147cd431cbb9007bde87444d7987b151','http://localhost:15672','el-icon-sunny',3,1,'2020-01-05 21:29:39','2020-12-05 15:31:33',1,0,1),('ccc0dced06919403832647a871312f09','删除选中',3,'专题管理 删除选中','3e92f2fd6cf012d30bfae2d9cdb7092d','/subject/deleteBatch',NULL,0,1,'2020-08-23 08:57:45','2020-08-23 08:57:45',1,1,0),('d3a19221259d439b916f475e43edb13d','权限管理',1,'对管理员权限分配进行管理','','/authority','el-icon-user',18,1,'2018-11-25 19:08:42','2020-05-30 08:44:17',1,0,0),('d4d92c53d3614d00865e9219b8292a90','Picture接口',2,'Picture接口','baace3dc03d34c54b81761dce8243814','http://localhost:8602/swagger-ui/index.html','el-icon-heavy-rain',0,1,'2018-11-28 20:04:33','2020-12-05 15:47:27',1,0,0),('da32aa8f92ae7fe7e7f445bf1028d2df','查询',3,'专题元素管理  查询','7cb1a6b7462832bf831a18a28eea94cd','/subjectItem/getList',NULL,0,1,'2020-08-23 09:15:37','2020-08-23 09:15:37',1,1,0),('e1e54aea65cc22d9f8a4c74ce8d23749','网盘管理',2,'管理网盘的资源','510483ce569b4fc88299f346147b1314','/resource/file','el-icon-unlock',1,1,'2020-06-13 16:36:11','2020-10-10 14:38:13',1,0,0),('e4a482c089d04a30b6ecbaadb81b70f8','Admin接口',2,'Admin接口','baace3dc03d34c54b81761dce8243814','http://localhost:8601/swagger-ui/index.html','el-icon-lightning',0,1,'2018-11-28 20:03:32','2020-12-05 15:47:21',1,0,0),('e5218b0b1cf016ae21eced4e47b628ac','新增',3,'博客管理 新增','1f01cd1d2f474743b241d74008b12333','/blog/add',NULL,3,1,'2020-03-21 10:55:34','2020-10-07 15:38:58',1,1,0),('e76ec0b7226985a414f035e2ecbd00b4','查询',3,'专题管理 查询','3e92f2fd6cf012d30bfae2d9cdb7092d','/subject/getList',NULL,0,1,'2020-08-23 08:55:08','2020-08-23 08:55:08',1,1,0),('e91945e49c5fdb207f996bc9668cd965','增加',3,'代办事项 增加','26bcccf0164bf84f12ab20448388d346','/todo/add',NULL,0,1,'2020-03-23 07:53:07','2020-03-23 07:53:07',1,1,0),('ed535411a72bb5cdd62aade25ca6e9c9','编辑',3,'专题元素管理 编辑','7cb1a6b7462832bf831a18a28eea94cd','/subjectItem/edit',NULL,0,1,'2020-08-23 09:16:23','2020-08-23 09:16:23',1,1,0),('f3a559635f9d46ee3356d072f5896fcb','图片裁剪',2,'用于图片裁剪','f4697cdf85920369179b90ff45a5982d','/test/CropperPicture','el-icon-cherry',0,1,'2020-01-30 10:38:09','2020-05-30 08:46:05',1,0,0),('f4697cdf85920369179b90ff45a5982d','测试页面',1,'用于一些功能的测试',NULL,'/test','el-icon-cpu',17,1,'2020-01-30 10:36:00','2020-05-30 08:45:54',1,0,0),('f874529321a37e84f099488a4eaf5a0b','编辑推荐',3,'编辑推荐管理','1d9a5030142e9fd7690f554c20e3bc90','/blog/editBatch',NULL,0,1,'2020-04-26 13:38:15','2020-04-26 13:38:15',1,1,0),('f87d2f9b4539abbade38583420dc8b2l','编辑',3,'菜单管理 编辑','aa225cdae6464bc0acebd732192f8362','/categoryMenu/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8b89','编辑',3,'分类管理 编辑','0a035547bbec404eb3ee0ef43312148d','/blogSort/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8b8e','编辑',3,'标签管理 编辑','6606b7e646d545e5a25c70b5e5fade9f','/tag/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8b8l','编辑',3,'评论管理 编辑','9beb7caa2c844b36a02789262dc76fbe','/comment/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8b8r','编辑',3,'用户管理 编辑','fb4237a353d0418ab42c748b7c1d64c6','/user/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8b9l','编辑',3,'友情链接 编辑','9002d1ae905c4cb79c2a485333dad2f7','/link/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8bbl','编辑',3,'字典数据 编辑','062087bce19d00312b3787b6e24c21d1','/sysDictData/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8bhl','编辑',3,'图片管理 编辑','1cc493d36e17fad535f2bf70242162b0','/picture/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8bkl','编辑',3,'管理员管理 编辑','2de247af3b0a459095e937d7ab9f5864','/admin/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8bol','编辑',3,'图片类别管理 编辑','4dea9c4f39d2480983e8c4333d35e036','/pictureSort/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8bpl','编辑',3,'网站配置 编辑','2fb47d3b6dbd44279c8206740a263543','/webConfig/editWebConfig',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8btl','编辑',3,'角色管理 编辑','5010ae46511e4c0b9f30d1c63ad3f0c1','/role/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8bxl','编辑',3,'反馈管理 编辑','6228ff4e9ebd42c89599b322201a0345','/feedback/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8byl','编辑',3,'系统配置 编辑','78f24799307cb63bc3759413dadf4d1a','/systemConfig/editSystemConfig',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8c9l','编辑',3,'资源分类 编辑','9449ce5dd5e24b21a9d15f806cb36e87','/resourceSort/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8i9b','编辑',3,'视频管理 编辑','ffc6e9ca2cc243febf6d2f476b849163','/studyVideo/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8i9l','编辑',3,'字典管理 编辑','c28f0b052e0b930299dd53de59cc32d7','/sysDictType/edit',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f87d2f9b4539abbade38583420dc8l9l','编辑',3,'关于我 编辑','faccfe476b89483791c05019ad5b4906','/system/editMe',NULL,0,1,'2020-03-21 21:35:57','2020-03-21 21:35:57',1,1,0),('f9276eb8e3274c8aa05577c86e4dc8c1','Web接口',2,'Web接口','baace3dc03d34c54b81761dce8243814','http://localhost:8603/swagger-ui/index.html','el-icon-light-rain',0,1,'2018-11-28 20:04:52','2020-12-05 15:46:54',1,0,1),('fa1e85a9c7734d27df07bc730206bd1a','删除',3,'编辑管理 删除','3e92f2fd6cf012d30bfae2d9cdb7092d','/subject/delete',NULL,0,1,'2020-08-23 08:56:36','2020-08-23 08:58:33',1,1,0),('faccfe476b89483791c05019ad5b4906','关于我',2,'关于我','badf0010422b432ba6ec9c83a25012ed','/system/aboutMe','el-icon-sugar',0,1,'2018-11-29 03:55:17','2020-05-30 08:35:21',1,0,0),('fb4237a353d0418ab42c748b7c1d64c6','用户管理',2,'用户管理','c519725da92b42f3acf0cc9fad58c664','/user/user','el-icon-headset',3,1,'2018-11-28 19:52:20','2020-05-30 08:46:54',1,0,0),('fbc30e4ae5bb33b39baca7bf6bd8ca0m','查询',3,'资源分类 查询','9449ce5dd5e24b21a9d15f806cb36e87','/resourceSort/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ce0m','查询',3,'友情链接 查询','9002d1ae905c4cb79c2a485333dad2f7','/link/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ce1m','查询',3,'菜单管理 查询','aa225cdae6464bc0acebd732192f8362','/categoryMenu/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ce99','查询',3,'分类管理 查询','0a035547bbec404eb3ee0ef43312148d','/blogSort/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ce9d','查询',3,'标签管理 查询','6606b7e646d545e5a25c70b5e5fade9f','/tag/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ce9m','查询',3,'评论管理 查询','9beb7caa2c844b36a02789262dc76fbe','/comment/getList',NULL,1,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ce9q','查询',3,'用户管理 查询','fb4237a353d0418ab42c748b7c1d64c6','/user/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ceam','查询',3,'字典数据 查询','062087bce19d00312b3787b6e24c21d1','/sysDictData/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ceim','查询',3,'图片管理 查询','1cc493d36e17fad535f2bf70242162b0','/picture/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cejm','查询',3,'管理员管理 查询','2de247af3b0a459095e937d7ab9f5864','/admin/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cekm','查询',3,'异常日志 查询','4337f63d13d84b9aba64b9d7a69fd066','/log/getExceptionList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8celm','查询',3,'操作日志 查询','a5902692a3ed4fd794895bf634f97b8e','/log/getLogList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cemm','查询',3,'用户日志 查询','9e91b4f993c946cba4bf720b2c1b2e90','/webVisit/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cenm','查询',3,'图片类别管理 查询','4dea9c4f39d2480983e8c4333d35e036','/pictureSort/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ceom','查询',3,'网站配置 查询','2fb47d3b6dbd44279c8206740a263543','/webConfig/getWebConfig',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cesm','查询',3,'角色管理 查询','5010ae46511e4c0b9f30d1c63ad3f0c1','/role/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cewm','查询',3,'反馈管理 查询','6228ff4e9ebd42c89599b322201a0345','/feedback/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cezm','查询',3,'系统配置 查询','78f24799307cb63bc3759413dadf4d1a','/systemConfig/getSystemConfig',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cj0a','查询',3,'视频管理 查询','ffc6e9ca2cc243febf6d2f476b849163','/studyVideo/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8cj0m','查询',3,'字典管理 查询','c28f0b052e0b930299dd53de59cc32d7','/sysDictType/getList',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fbc30e4ae5bb33b39baca7bf6bd8ck0m','查询',3,'关于我 查询','faccfe476b89483791c05019ad5b4906','/system/getMe',NULL,0,1,'2020-03-21 21:36:28','2020-03-21 21:36:28',1,1,0),('fe45ea293f75dc88b96cab96c218512a','查询',3,'博客管理 查询','1f01cd1d2f474743b241d74008b12333','/blog/getList',NULL,2,1,'2020-03-21 18:17:36','2020-10-07 15:36:19',1,1,0),('ffc6e9ca2cc243febf6d2f476b849163','视频管理',2,'视频管理','510483ce569b4fc88299f346147b1314','/resource/studyVideo','el-icon-video-camera',0,1,'2018-11-28 19:43:50','2020-05-30 08:51:41',1,0,0),('ffe445828071ce87a851ad58100f1340','导航栏管理 分页查询',3,'导航栏管理 分页查询','6275bc5189e2e595b621d744d68278af','/webNavbar/getList',NULL,0,1,'2021-02-23 13:00:52','2021-02-23 13:00:52',1,1,0);

/*Table structure for table `t_collect` */

DROP TABLE IF EXISTS `t_collect`;

CREATE TABLE `t_collect` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `user_uid` varchar(32) NOT NULL COMMENT '用户的uid',
  `blog_uid` varchar(32) NOT NULL COMMENT '博客的uid',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='收藏表';

/*Data for the table `t_collect` */

/*Table structure for table `t_comment` */

DROP TABLE IF EXISTS `t_comment`;

CREATE TABLE `t_comment` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `user_uid` varchar(32) DEFAULT NULL COMMENT '用户uid',
  `to_uid` varchar(32) DEFAULT NULL COMMENT '回复某条评论的uid',
  `to_user_uid` varchar(32) DEFAULT NULL COMMENT '回复某个人的uid',
  `content` varchar(2048) DEFAULT NULL COMMENT '评论内容',
  `blog_uid` varchar(32) DEFAULT NULL COMMENT '博客uid',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `source` varchar(255) NOT NULL COMMENT '评论来源： MESSAGE_BOARD，ABOUT，BLOG_INFO 等',
  `TYPE` tinyint(1) NOT NULL DEFAULT '0' COMMENT '评论类型 1:点赞 0:评论',
  `first_comment_uid` varchar(32) DEFAULT NULL COMMENT '一级评论UID',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='评论表';

/*Data for the table `t_comment` */

insert  into `t_comment`(`uid`,`user_uid`,`to_uid`,`to_user_uid`,`content`,`blog_uid`,`status`,`create_time`,`update_time`,`source`,`TYPE`,`first_comment_uid`) values ('8ed8a208505de436f7896f44107a757b','6795d72d4b27b24e02acb38723ccc5d6',NULL,NULL,'测试评论~',NULL,1,'2020-12-11 21:01:23','2020-12-11 21:01:23','MESSAGE_BOARD',0,NULL);

/*Table structure for table `t_comment_report` */

DROP TABLE IF EXISTS `t_comment_report`;

CREATE TABLE `t_comment_report` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `user_uid` varchar(32) DEFAULT NULL COMMENT '举报人uid',
  `report_comment_uid` varchar(32) DEFAULT NULL COMMENT '被举报的评论Uid',
  `report_user_uid` varchar(32) DEFAULT NULL COMMENT '被举报的用户uid',
  `content` varchar(1000) DEFAULT NULL COMMENT '举报的原因',
  `progress` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '进展状态: 0 未查看   1: 已查看  2：已处理',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='评论举报表';

/*Data for the table `t_comment_report` */

/*Table structure for table `t_exception_log` */

DROP TABLE IF EXISTS `t_exception_log`;

CREATE TABLE `t_exception_log` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `exception_json` mediumtext COMMENT '异常对象json格式',
  `exception_message` mediumtext COMMENT '异常信息',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `ip` varchar(20) DEFAULT NULL COMMENT 'ip地址',
  `ip_source` varchar(100) DEFAULT NULL COMMENT 'ip来源',
  `method` varchar(255) DEFAULT NULL COMMENT '请求方法',
  `operation` varchar(100) DEFAULT NULL COMMENT '方法描述',
  `params` longtext COMMENT '请求参数',
  PRIMARY KEY (`uid`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_exception_log` */

/*Table structure for table `t_feedback` */

DROP TABLE IF EXISTS `t_feedback`;

CREATE TABLE `t_feedback` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `user_uid` varchar(32) NOT NULL COMMENT '用户uid',
  `content` varchar(1000) DEFAULT NULL COMMENT '反馈的内容',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `title` varchar(255) DEFAULT NULL COMMENT '标题',
  `feedback_status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '反馈状态： 0：已开启  1：进行中  2：已完成  3：已拒绝',
  `reply` varchar(255) DEFAULT NULL COMMENT '回复',
  `admin_uid` varchar(32) DEFAULT NULL COMMENT '管理员uid',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='反馈表';

/*Data for the table `t_feedback` */

/*Table structure for table `t_link` */

DROP TABLE IF EXISTS `t_link`;

CREATE TABLE `t_link` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `title` varchar(255) DEFAULT NULL COMMENT '友情链接标题',
  `summary` varchar(255) DEFAULT NULL COMMENT '友情链接介绍',
  `url` varchar(255) DEFAULT NULL COMMENT '友情链接URL',
  `click_count` int DEFAULT '0' COMMENT '点击数',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `sort` int DEFAULT '0' COMMENT '排序字段，越大越靠前',
  `link_status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '友链状态： 0 申请中， 1：已上线，  2：已下架',
  `user_uid` varchar(32) DEFAULT NULL COMMENT '申请用户UID',
  `admin_uid` varchar(32) DEFAULT NULL COMMENT '操作管理员UID',
  `email` varchar(255) DEFAULT NULL COMMENT '站长邮箱',
  `file_uid` varchar(255) DEFAULT NULL COMMENT '网站图标',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='友情链接表';

/*Data for the table `t_link` */

insert  into `t_link`(`uid`,`title`,`summary`,`url`,`click_count`,`create_time`,`update_time`,`status`,`sort`,`link_status`,`user_uid`,`admin_uid`,`email`,`file_uid`) values ('0236076a0f1e38e1777ab398d64340f7','测试网站','测试网站链接','http://www.baidu.com',0,'2020-09-26 17:03:37','2020-09-26 17:03:37',1,0,0,'937f07cce6c570fe2e26b6a1ed359eaa',NULL,NULL,NULL),('0d39d0b33074d7fbd6a1826fafafb1ad','蘑菇博客','蘑菇博客','http://www.moguit.cn',0,'2020-09-26 17:08:49','2020-09-26 17:08:49',1,0,0,'937f07cce6c570fe2e26b6a1ed359eaa',NULL,NULL,NULL),('1578d5662d91665adfe9003877d64141','蘑菇博客','蘑菇博客','http://moguit.cn',0,'2020-11-09 09:22:58','2020-11-09 09:22:58',1,0,0,'5eb5257f707cad9c6f06a1e951ba2def',NULL,NULL,'17ce7d6c1a41299359293a23df1606c5'),('2e8e9be41bea1330f4beb769a8b14602','测试友链','测试友链','http://www.baidu.com',0,'2020-10-15 10:02:08','2020-10-15 10:02:18',0,3,1,NULL,NULL,NULL,NULL),('3b7e9d7a4d9f8c43c0043cd86a4c410b','测试1','测试1','http://url.com',0,'2020-03-22 12:19:06','2020-03-22 12:19:06',0,2,1,NULL,NULL,NULL,NULL),('49d45433d874836fd01130786b755b5d','234','234','http://www.baidu.com',0,'2020-08-02 18:55:43','2020-08-02 18:55:43',1,0,0,'c52cd5e4c14cc33cd5a8b60e6f610f40',NULL,NULL,NULL),('5217d7212f9d487eab13deadca961402','博客Gitee','蘑菇博客Gitee','https://gitee.com/moxi159753/mogu_blog_v2',24,'2018-12-17 02:25:11','2018-12-17 02:25:11',1,0,1,NULL,NULL,NULL,NULL),('6195e13f6272e61da6c7a2c481bd9a6e','1','1','http://www.baidu.com',0,'2020-03-20 11:33:42','2020-03-20 11:33:42',0,0,1,NULL,NULL,NULL,NULL),('796f61499bdfe41960484f5bd063ac81','蘑菇小屋','蘑菇小屋','http://moguit.cn',0,'2020-09-26 17:16:39','2020-09-26 17:17:11',1,0,1,'937f07cce6c570fe2e26b6a1ed359eaa',NULL,'1595833114@qq.com','d74b8b6a03b4ae43f20641d9b4c2836a'),('8eff079bd3857879daf8401c52d4a2de','博客Github','蘑菇博客Github','https://github.com/moxi624/mogu_blog_v2',6,'2019-12-06 20:50:05','2020-09-26 16:24:51',1,1,1,NULL,NULL,'1595833114@qq.com','85d825a9be2c777da525d95a029e108c'),('a2086067fe13f178f8cce3a4e87f9999','蘑菇博客','蘑菇博客','http://www.moguit.cn',0,'2020-04-29 16:40:37','2020-04-29 16:40:37',1,0,0,'4db79e551d0dda06cfcf6ae39107711c',NULL,NULL,NULL),('b8b0e6c4967601bd4dec671d369845c8','我是友链','我是友链','http://www.baidu.com',0,'2020-09-26 15:50:02','2020-09-26 15:53:28',1,0,1,NULL,NULL,NULL,'528885a01dcb22fa0d60eac19ccd70f8'),('b9e22b94688fc8ac2dbada2f9e342117','测试','测试','http://www.baidu.com',0,'2020-08-02 18:56:40','2020-11-09 09:23:23',0,0,0,'c52cd5e4c14cc33cd5a8b60e6f610f40',NULL,NULL,NULL),('bcad571e9c1976af96b793d8aaee7991','测试','测试','测试',0,'2020-08-02 18:46:13','2020-08-02 18:51:48',0,0,0,'c52cd5e4c14cc33cd5a8b60e6f610f40',NULL,NULL,NULL),('d0a5e434f9f06da3e0d0f1ceb4160070','蘑菇博客','蘑菇博客','http://image.moguit.cn/favicon.png',0,'2020-03-15 11:43:18','2020-03-15 11:43:18',1,0,1,'25675d78f11749d4edaf15e36d046e3b',NULL,NULL,NULL),('da30eaf680ed626431dd14b8eb07a0c6','蘑菇博客','蘑菇博客',NULL,0,'2020-03-15 11:01:46','2020-03-15 11:01:46',0,0,0,'25675d78f11749d4edaf15e36d046e3b',NULL,NULL,NULL),('dcc01149be71492dabd55821c22f6061','Mybatis-plus','MyBatis-Plus 为简化开发而生','http://mp.baomidou.com/',12,'2018-09-27 02:52:58','2018-09-27 02:52:58',1,0,1,NULL,NULL,NULL,NULL);

/*Table structure for table `t_picture` */

DROP TABLE IF EXISTS `t_picture`;

CREATE TABLE `t_picture` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `file_uid` varchar(32) DEFAULT NULL COMMENT '图片uid',
  `pic_name` varchar(255) DEFAULT NULL COMMENT '图片名',
  `picture_sort_uid` varchar(32) DEFAULT NULL COMMENT '分类uid',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='图片表';

/*Data for the table `t_picture` */

insert  into `t_picture`(`uid`,`file_uid`,`pic_name`,`picture_sort_uid`,`status`,`create_time`,`update_time`) values ('0094f9386e9e2936ea1bbbd1a443d608','2168150dfa4d7e91bd13a989c3eb98fd','1603584896473.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-25 08:14:58','2020-10-26 21:11:21'),('02c1bda7243974599dda9585a8017f5a','0ae60c450e42564fcc9773682184ddc8','1602512629523.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:23:49','2020-10-22 15:44:54'),('0398f756b357eed1fe85e40d2a291e06','3302d7c58941602514f2812a20500a4c',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:26:44','2020-02-01 10:26:44'),('05eb78eba593d35d8047315d38a3a925','d56fb1de3e2851386d582652ea697df8','1602512660216.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:32'),('081f8e0598e9f2346dda01380cecd6d3','d814d21ac5b7fb6e6d379d0599e62e8a','1603352701646.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-22 15:45:02','2020-10-24 11:31:02'),('09d6371f0d63adcb0c40f2038bfa202e','6f9f370c7660359437a1b974b3028435','1602512659592.jpeg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:32'),('0aa757193545b1bdd9c4f8efd7f830c6','9e2bbd54326312f3f88e6260a46aafc3',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:11'),('0e79722fd46c9d633fec49fa39979830','87e8cdbe7c5f9b928553951c7c190c37','1587296390908.jpg','c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 19:39:51','2020-12-11 15:44:07'),('105509244d2a3b7010c0eac1cfea9c54','50f33accbab5cd6ac96e45ef08f75311','1606895922591.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-12-02 15:58:43','2020-12-11 15:43:57'),('114e84df713d4f56e049434e7a3d3a02','cc505f71890468723135c06dd7967437',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:12'),('116caf31e3add52e176bc6d1bdf87f76','f99e1c71be95f5c063e10a125f0e85bb','1606895931956.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-12-02 15:58:52','2020-12-11 15:43:57'),('136b1862cb3d62b3f6830cb71dd63e14','63da0632ccf7f1fde167bdf92ff25b6b',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-24 09:25:50','2020-11-11 15:07:12'),('1376b7dff53a26312c29b9c4c3f12d3a','af067859a0dc43c83e57e5f5b80b8347','1607672771731.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('13d70e1b5ffd07d534d28b22c7192408','a5d84f5e443b781fe8146620e1abb5b8',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:52','2020-10-24 16:02:26'),('15c90ecde1c8728961f5b427cc88c25c','26303160e344350c14d379ca5620b3db','1607673162692.jfif','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('15cda71a209a1d5961473cffb83eff91','d2423d5fa8f4e7fca64f6d36c4697703',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:26:40','2020-02-01 10:26:40'),('1679f363cf3f2a1c70e397339f6bf28f','d134bdfe255b9aa8c2ce44da8297f6a6','undefined','481b95ba5cce396c9ec14544b0784751',0,'2020-01-30 22:08:26','2020-12-02 15:58:10'),('178aa3b027e8520e55d5b57b0988e638','0e078507896320e06c1a075a2c4401c2','1602512629145.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:23:49','2020-10-22 15:44:54'),('17989da54877b83256273351a858d7bf','5c943e772898ccfb13ce7c50ed2775b8',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-08 15:28:11','2020-04-19 11:41:34'),('17c3a1d99e55c60575fe73f10248d5e2','2f3281904a504e49e205135a5e8edd94','1605078383357.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-11-11 15:06:23','2020-11-11 15:06:46'),('17ce7b8ae79e3ff569e99c4257187924','773eba37cb947cc2d6d9db48a81245ae',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-08 15:28:20','2020-04-19 11:41:03'),('17e294de92e7f9535a5fb043f67b0fba','92df30a6f25dc0998e530aef68ccec1b',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:21:20','2020-04-12 17:26:39'),('17f8d00d811d721323890e3e4341f5a8','fa0e5a39b249edb27036024a9f1440a3','1602512659982.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:32'),('18046faad14f95bd775cc29ff4d3ea1e','04c2bbef54d48a677b1c5f9def8431a9','1592274571520.webp','c14e9e057cbfd2172db4055cea2bef0a',0,'2020-06-16 10:30:00','2020-12-11 15:44:04'),('1a03785415b6eda344753bf93c10a24a','d37d3e699f46a2b3785600f7c4ac6b3f',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:23:11','2020-02-01 10:23:11'),('1b429d6fe3164f8ebd10d038ba594859','a093473d7d99ea66374747becb5f835d','1603106779216.jpg','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-19 19:26:20','2020-10-19 19:40:39'),('1d151a81e0e2d1ba824f815b259e41e1','c4c89a69942d1371ae6cbc26ecf5d2c6',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-08 15:30:59','2020-04-19 11:27:20'),('1e98cef452dec0997067f2e60127fb8f','b9789318708df4d3e20ee75609fb9094','1602512629440.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:23:49','2020-10-22 15:44:55'),('210062562b3b737814519c0f2017a1fe','e4b2eaa62b5f0cf6b832da7d189aaa0e','1603525635163.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-24 15:47:15','2020-10-24 15:47:25'),('2229b40c262dbd78a95f8d19b10fa88c','7da6b07ca08090581dec31bd8e4dfc09',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:12'),('22fdee757d1e78c0c55efe69b340dab8','f4f7e50df629bdea99a2cd8481017cc9','1601035123974.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-09-25 19:58:44','2020-10-24 16:02:26'),('24099aad4fa1aa551efc4cf4819f0509','e24ceba9819c3a9b90c9b26eec1b60e2','1606895932195.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-12-02 15:58:52','2020-12-11 15:43:57'),('286ee71a8472d0c98b4dfecdef7e1938','d60ed0826427b5231eaf320ee71101c6','undefined','481b95ba5cce396c9ec14544b0784751',0,'2020-02-24 10:31:18','2020-11-11 15:07:12'),('2afd4d538ac77a70c3e3bd96aac9366a','4e871894c11e04edbf2c4e22b4644730',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-06 18:54:27','2020-12-02 15:58:10'),('2b3b2761e82ab1b4dd3c28faf543e12c','6d1c017a7a980c6f6852cb5a992424b5','1607672771651.jpg','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('2bd5aa35415bba1773f5f5debbbdd6d1','7cc19c6449bbbde7db04e6f4d99b5c49',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-05 08:28:21','2020-04-07 15:49:29'),('2d2dd20ca98d6c10782028804e1e51e3','3173aa92186f7ec7212dbb25178d772a','1607222761620.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-06 10:46:02','2020-12-11 15:43:50'),('2dfd7751523c1fd98c3cccf1c00b8d36','4f1ba65f0202302491c2338e771e1a35','1606895909993.jpg','481b95ba5cce396c9ec14544b0784751',0,'2020-12-02 15:58:30','2020-12-11 15:43:54'),('2fb4c6957b7f21052e7dadf5596cd953','43b4daaaa4d451c7280d5c35f37d7ca9','1592274435687.webp','c14e9e057cbfd2172db4055cea2bef0a',0,'2020-06-16 10:27:15','2020-06-16 10:28:54'),('301da713dc04c1d0f1f93d12eb741f6d','f0e0aa3defad94066623cecdae7b1623','1606895895720.jpg','481b95ba5cce396c9ec14544b0784751',0,'2020-12-02 15:58:16','2020-12-11 15:43:54'),('313a97c616524447c08ef8e9e993ae56','bffb9a4fb7a06c91e095c5a31d0a8a86','1607672774100.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('31aac7c5644acebb030184cf32ba614c','13070e0e5980f9c657da9ffc30d1c00f','1603352638030.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 15:44:09','2020-10-24 11:14:27'),('3311516638f05402b9448dedca6603ca','1739543a3739e18c934b8182e2c93d4e','1587296390660.jpg','c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 19:39:51','2020-12-11 15:44:07'),('343b3d8b6009677843894b164fa29acb','bfaa54847490e1d9463bb7db85438045','1603524114381.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-24 15:22:09','2020-10-24 15:47:08'),('347cf3fd6d8282ad0582416a6ed4e19e','86c3a1b9d5a8a5c93cd27b25d88dcf80','1605090735823.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-11-11 18:32:17','2020-11-11 18:40:22'),('34aad812f6e123c1c43358c88eabb331','cc9952f52c84dfa51d74ee35a1dc5367',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:52','2020-10-24 16:02:26'),('35dcbf96e396fa7b2e7c22a2131d8e2f','204cff311196d7beb1c75b452def184b',NULL,'c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 19:07:19','2020-04-19 19:07:24'),('3724718fe3ba8724097d031fc49ca83f','d884eddbadadf48ac6b98afc723d6660','1592358046468.png','c14e9e057cbfd2172db4055cea2bef0a',0,'2020-06-17 09:40:48','2020-12-11 15:44:04'),('377420b661da6a0d53075a20fdca5ddb','e4c42b7004e9e5751ebc89433fc8b712',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:23:21','2020-02-01 10:23:21'),('39b0e096d6f78ad83c4128bff6ddf93f','71a7bc29602e467e1d1b66a59d37c3a2',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:19','2020-10-24 16:02:27'),('3d90ea0854f9856700ee1526d7578fbf','858184682eff563a349f595c6b44e5cb',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:46:00','2020-02-01 10:46:00'),('3ed38acd47c9a1732081cc8e70fdd34a','d2607f48f1d1debbd5e2cd73db236fed','1603337766615.png','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 11:36:09','2020-10-24 11:14:45'),('40e8965a26cae981c472dec7450d7243','2e271cabe9e008b6a53c8e7f5fc5f089','1603203047594.jpg','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-20 22:10:51','2020-12-11 15:44:00'),('41351088a487f46b1778ef27ea69c03e','bced93d1d2a087cb164f1a6fda27a151','1606895885694.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-02 15:58:06','2020-12-06 10:45:47'),('41a1acccf0648cda5b2be60664039224','47a411bb35ce2ff270a6e570c5c241cb','1607222761463.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-06 10:46:02','2020-12-11 15:43:50'),('42eb1176715d8af1113a167983198eec','5fe95f6d7ea5eaff1c5b13078147c9b6','1592358397839.jpg','c14e9e057cbfd2172db4055cea2bef0a',0,'2020-06-17 09:46:38','2020-12-11 15:44:04'),('43d3164b2d61524448269ec478e5c440','58be54bbd3f64fc65c0c18ddbeeb995f',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:12'),('447a6e6cbf6ffdf0a3f049f958dd3a03','d2424afcd30ca070d43930d0257097ad',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:14','2020-10-24 16:02:51'),('464bf3674a6c26564380f121cfecea00','e1e3dd2146120bc8ccb3e5555284416a','1606895885604.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-02 15:58:06','2020-12-06 10:45:47'),('475ff2051295659123244b0579b4e93e','623f994c865d462c7338766ff23857ea','1603526094527.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-24 15:54:55','2020-10-24 15:55:14'),('48244373141003545a1bd1e3fa62d4bb','e7710011f0a35e266f2eefc3c29afe09','1607222761230.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-06 10:46:02','2020-12-11 15:43:50'),('497a63891ac73a87b83e9142efd918fb','8f1728247916b80133ba598a6dc3aebd','undefined','481b95ba5cce396c9ec14544b0784751',0,'2020-02-29 16:35:08','2020-04-19 12:02:27'),('497e9cbcf4fea331c0c81a91c6d2446a','44bccc91e13d8cc992585bdd8ebcabaf','1603584895781.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-25 08:14:58','2020-12-02 15:57:24'),('4b761427626d6900b16ab835b77e55fa','598f567494ce3ba2ff279e9103f27d49','1603509302663.png','404d044b3541082e9987ffb4fb0788da',0,'2020-10-24 11:15:03','2020-11-11 15:05:40'),('4bbab12673f675b524a9acbec549fb2f','2efd01d2149310f2fe5f98189223ae39','1606895932155.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-12-02 15:58:52','2020-12-11 15:43:57'),('4beccd2462ab1a2d29ddb0780b67763a','2ebda235685f7167ac8db271bfa6ded3','undefined','481b95ba5cce396c9ec14544b0784751',0,'2020-02-24 09:46:44','2020-11-11 15:07:12'),('4deacdc633ffc1f510b34960dc289e0c','3cf2c985ccceb5e94155d57cda447c36',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-03-24 09:54:05','2020-11-11 15:07:12'),('4df7a21939fd7d81fd008ce3946fdd3b','bb0ca00f93138f2b2307ee099088adad','1603584894391.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-25 08:14:58','2020-12-02 15:57:24'),('4ec7d32c19d00ef5a3efcad5dc050eb6','13a68baba2163dfd5c8fb3f42bb57afd','1602512660254.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:32'),('5029f8b8c70954866f57d5601c63d712','7b05938d51816b93d07ca6eb34d3800f','1602512659750.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:32'),('509d4e1dabdbad116c8e56bf7be1b317','38a6b6fdf308ae23026d58186708de25','1603118025153.jpg','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-19 22:34:35','2020-12-11 15:44:00'),('51a743e97b5bc86ae3b25c039efb172d','1b8d0337b503b1667d5770f202cc02b9',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:37','2020-10-24 16:02:26'),('51b11c32cfea2110cb93c7ccc5e9ca18','5cd0b46a1e6545625bd3e76b5fb336e8','1602512629329.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:23:49','2020-10-22 15:44:55'),('5213302bd2b95e1156ed1f098ab821ef','6bd34691e7294f8d2706d0ac164e025f','1606895932004.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-12-02 15:58:52','2020-12-11 15:43:57'),('52d7301eebe8790ce8ffb666daa4c4c1','39bfeb7fe07eb145db2219ce35953e0d','1603352429141.webp','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 15:40:54','2020-10-24 11:14:37'),('55400589553fd235da3663b681742fd0','d349e93d4521ca6d18b431c2feaa18ee','1603336937001.png','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 11:22:17','2020-10-24 11:14:53'),('555411c348b70e7465d51d327824b7be','a5e49ebbc9d704431cb5615116e77800','1602512629205.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:23:49','2020-10-22 15:44:55'),('564fa3bc5ad32b4714e8203bfd3b9271','dca06b7785df4434091e70a0527fd9a4',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:52','2020-10-24 16:02:26'),('573692467cca496da2ab2aae3541ae16','ec39ef4bb5f09a39dddbe99a571e7d23',NULL,'c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 18:59:55','2020-04-19 19:07:12'),('583eec49d6261dd4298ebbab3b9101e1','c1d5bb9da6c0fe593d57ba95a1c7f3d8',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:42','2020-10-24 16:02:27'),('58804e85dfd9d67ddacb931695fe7e8e','b14fa41e879f83d9025cbbb7139f72f6','1606895910086.jpg','481b95ba5cce396c9ec14544b0784751',0,'2020-12-02 15:58:30','2020-12-11 15:43:54'),('5885ad0ed6eb094a722b0feac73087f7','4d0e051cba97ff3752e97f60114201ec','1603107645131.png','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-19 19:40:46','2020-12-11 15:44:00'),('59a48bdb0d6d37ab1e44482aa55b0e84','80a291b93ee01a9adada67d843be7cb0','1607673162804.jfif','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('59b6fd6c4c1cc4f2ebe441024f504a8c','8dd7c4f4ff0e87f38e1cdcf6190768d2',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:22:48','2020-02-01 10:22:48'),('5d8e70f4237fa805483f62d876a97ba0','27a1b475c5f2acd6c95825f9f72391dd','1605078744828.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-11-11 15:12:24','2020-12-02 15:58:37'),('603b0afe0c29e9ea0ffbe557d1e92777','2f84fab3b2ef5fa75206c596514d9004',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:42','2020-10-24 16:02:27'),('609a706b1efe0bcf0e9635faaf4470cb','35ceea0f6829cbd22255571a526d2a3d','1602512643586.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:03','2020-10-22 15:44:54'),('635fa294443ba1a27deabbb1d6034a02','7a8a5af6264664475f6fadc9df1fa1de',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:42','2020-10-24 16:02:27'),('64354625fe6bcb83a7896e648fad78be','bc38bf6689f327882af1d2855d17cd02','1607222761514.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-06 10:46:02','2020-12-11 15:43:50'),('65813af6b86936fded2d6c255ce4e355','b7cc599479588334b7e799656478b425','undefined','481b95ba5cce396c9ec14544b0784751',0,'2020-02-26 15:36:38','2020-11-11 15:07:12'),('66b55ae473d29b153e012d4902156f91','298ca0c639d2fe7527a639e9f4fc9cc5','1606895885639.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-02 15:58:06','2020-12-06 10:45:47'),('69c73f54c93f1b4157f872b05108f9d2','235cc58878dd63148d05c0f491395a40','1607672772718.jpg','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('6dc3b84160804ccf0536bfce932c29e0','21bb95558a698f8f1348136effde44e3',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:20:30','2020-02-01 10:20:30'),('6ef278b547e77a8ba53119498725e7cc','05b355d8915d479ba7980e65378ddc7b',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:46:43','2020-02-01 10:46:43'),('70735b1f3a89fd64d463e1b80bba876c','f00a58b6c74c5068fe0790c5cfddb552','1607672771575.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('70a96c3b7029a2133bc8213fb3e3eacf','676bb5eb8f5ec3f2d813890c06ca19c3','1603351900420.png','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 15:31:43','2020-10-24 11:14:43'),('7127882dadc458d89134ab037a9a35e3','0dd68f9052954a40703ee23c6fdfc2ab','1602512659789.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:32'),('7151f1a03321f19a1f83abc2b01225ae','c9f0fc69d2f53aaab8bf486fe51291c5',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:29','2020-04-12 17:29:24'),('72000ab9e239e1aaf4df213f0508a4a7','ba42a5a24b2eee3acc61310c0e920599','1602512660049.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:54'),('7202dc6a4be6ac31637f5f68da4259bc','b6d43530eff81cf7b7d95263abf9dc06','1607673163178.jfif','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('730805fa92827552e8296b7e36a973df','70f5b89fe70a28d95e10c19c96bf2e85',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-06 18:54:31','2020-12-02 15:58:10'),('733ae3b43eb09d005177b26c49732449','3a0c80ddf8b99ad269954ebfb3dc2908','1605078649699.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-11-11 15:10:49','2020-11-11 15:12:51'),('74752ad3b61951532c8975d67f16de48','c7b81c797ffac1f7fa6cab21a79040a0','1606895852698.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-12-02 15:57:33','2020-12-11 15:43:45'),('750b28964711ad4a18b705f017f6bbd0','27bc0175365420f9e0fbfc6519f605d4',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:12'),('777ee44048b4fb2d484a2dde4b2d2136','79b385a78c906b3e682fca6cbccaac91','1605091206406.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-11-11 18:40:06','2020-11-11 18:40:22'),('77a3404a5abedcdeeeea775a09690269','812a22ce7a91495497521174577eb206',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-03-24 09:54:05','2020-11-11 15:07:12'),('7816dad5e2bd3f47e6f7bf35ad831244','297010b7b2f653a24f9d555a2de34d71',NULL,'c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 18:58:19','2020-04-19 18:59:49'),('78f260edf7e275adfc5feda06edc341f','b62d80fc5d26ccd7f027c5ebb532daf5','1607673162964.jpg','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('799e65b682cdd37eb08d1c1fe337302b','0fdd33fce233ce21a98ad11f8c3ca885','1605091217759.png','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-11-11 18:40:17','2020-11-11 18:40:25'),('7d95da813a237203a3e8ab7a4eb97f17','26aa87d778250103c3e1887cee63cab3','1602512659877.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:54'),('7edb19809f19af273875d54ad87245fb','f4962eb56fddb57722df5821a475173e',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:12'),('81394df01290c58da91c2c7f2df2f1eb','6ac400164584721a108866e2b2f4fb6e','1600072798574.png','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-09-14 16:40:00','2020-10-12 10:14:28'),('84d05f090dc7fb64c632bed8aeedf3a0','a32437ab2b9422e2abd72eb8f67e2929','1606895895764.jpg','481b95ba5cce396c9ec14544b0784751',0,'2020-12-02 15:58:16','2020-12-11 15:43:54'),('859e2bbc0de9f74be22d6695e66bc071','149645d713d5dd8ae0440205c2c84e10','1606895852965.jfif','29f45d9af53fb31a7d79946970580d20',0,'2020-12-02 15:57:33','2020-12-11 15:43:45'),('85ceda0fff03574aaf837639ef10e3da','2e81ae6bad3780d44e4d52883a218bfc','1603107657551.jpg','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-19 19:40:57','2020-12-11 15:44:00'),('86528925a917dc2a67ec3a87031eb2fe','f70ca7fa2854b870f0828fc31bd31c3f','1606895910068.jpg','481b95ba5cce396c9ec14544b0784751',0,'2020-12-02 15:58:30','2020-12-11 15:43:54'),('86bd182d79a30dff24865af1aa9d21e9','c49a66b73b4deb5bfaaff02b6b23417a','1607672771421.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('87d4b4d12457e4fdfd4b421fc889365c','5576d3640c7c7490ca953a72d5662ec4','1607672771829.jpg','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('89c604f9105a7eb273db1309c3b0340c','aae71f2c737d24e06a6501b44cd77a68','1607672771373.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('89ee19117f41b5476b98f40e6fea5191','ff492f1c5c202abb9a145cec672cd922','1603584896664.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-25 08:14:58','2020-12-02 15:57:24'),('8c55cb8f8364369d2da0c0681c4e6714','19fe6e424a38fbf3dad1b21971c92324','1607222761552.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-06 10:46:02','2020-12-11 15:43:50'),('8d8ada31dc3813ad20da5522092b6e39','acbae1e825bf0db5b5eac08d5c3d5adc','1607673162901.jfif','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('8f45f9ec789d56be574f2d4666d38507','094cf0ae77e9e535f579f07cd99e2082',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-08 15:28:16','2020-04-19 11:41:03'),('8f937abbb4fc21d357fcb95ee8c0e3cf','bf93f5927e6f3cddf27005f16da32d7d','1600502306734.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-09-19 15:58:27','2020-10-12 10:10:10'),('91e17d7392cd34abf33dfbe0f3fa6853','590f0c54d841e8ec7c88921594f8ccbe','1602512637385.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:23:57','2020-10-22 15:44:54'),('923e4b34c4b965d7afa197ef79f59115','4dbcdb05185170c7f31dd12d0bc818d4','1603351983190.png','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 15:33:41','2020-10-24 11:14:41'),('92b46f0f470a63c6430dba9b18abe8a2','c44d167f73d9556c66c5ba207641a6ca',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:52','2020-10-24 16:02:26'),('9457238ba68726025e8f9297a6abfa5b','aee8fc79e1152a6b8ccbe8736e9b8d8b','1603337182596.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 11:26:31','2020-10-24 11:14:50'),('9634ddd103254082c469f70e59305369','11a0ca657864b7e89b7262f22247274e','1607672771164.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:14','2020-12-11 15:46:14'),('97cf3d03cc305a4a43cee1571b630dcf','78c1e35d3498bf3546c015f45f7e1ebc',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:37','2020-10-24 16:02:27'),('9c28fabaa3a7a08d53ee9c6078cdda5f','d01453db03fbb44b4e6df0ee586a9d9f','1607672771618.jpg','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('9d8bf6071772e549f15a2cf00b428b13','be1b94c5f0ebe669c2d4ba78f9291198','1603107657672.jpg','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-19 19:40:57','2020-12-11 15:44:00'),('9de06baa89ef00566514b2f7dc083349','f9d1bb41642acf013fd6022425dfa85f',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:12'),('9dfa3d62132fbc82da66ff71f9f5d2a9','0759b313a044f6e576a4c77703905583','1602512628239.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:23:49','2020-10-22 15:44:55'),('9f2aba9515a43654e2c6310997336cfd','5fae676476807d3e821423ffbc4583ef','1607672771894.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('a201a88914d3bf55ea38ba0ee4c9250a','72b47315ae95bc608ddd7fc5fff58247','1587296390845.png','c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 19:39:51','2020-12-11 15:44:07'),('a20cae2a087ac55d10c7a46c9c2eb115','16be25671eab9cda5a33706e5f7298e3','1603337671207.png','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 11:34:33','2020-10-24 11:14:47'),('a3fa38997db50282ec293de2796ad67a','2ba46887a89c6b3ad8c523000fdc0ad0','1603117886100.jpg','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-19 22:31:28','2020-12-11 15:44:00'),('a40238d12c6d5bd9234d48e7bcb1ae43','608e9648a6e902bafaf30a8392f16b6d','1607672771777.jpg','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('a47a70cbd97fff7ec3b1106884e8beb1','d1a77776d624ff7326732fcd2edc3de3','1601025408253.png','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-09-25 17:16:49','2020-10-12 10:05:20'),('a5f3995d2d2d7321120790f94f987d43','51435e2fa2c45d5c4203278f958f8f52','1607672771466.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('a6bd51375b83f934e69a5090dbb4eeea','962f4f4c73bd145910b67f74d33c2874','1600499990003.png','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-09-19 15:19:50','2020-10-12 10:14:28'),('a8e8fca21c869b68a9efd6b8971b0610','144077b7fc908e2f3c7f4ecaa5069862',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:52','2020-10-24 16:02:26'),('aa2ba57bf17d780422bfd9299c09ce51','7dfb0879380d9ba7ecc811ea17bf76f9','1603510275500.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-24 11:31:22','2020-10-24 11:31:35'),('aa56a5e805d619ae79e88d9ba5fa5b87','adeaf35fdcd2d36ed143d95bc02b1cc2','undefined','481b95ba5cce396c9ec14544b0784751',0,'2020-01-30 22:08:26','2020-12-02 15:58:10'),('abfea720770cf4ffa40f25181c180f11','dbc3fbd79963263875c81423afb047a5','1605078415314.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-11-11 15:06:55','2020-11-11 18:39:55'),('ad439ea388b87be53f6aad7125c7fd44','c7782d374ed2d4bff8e43164ece9244d',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:37','2020-10-24 16:02:27'),('ae0388aba027c118748663232773d419','bb4ba8de81fdcd837bff6d25045ace5f',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:46:57','2020-02-01 10:46:57'),('b0f6ae50434cc62f60da30d8a7cd2dc8','23a842d158f8ededb9119f8e1b5e8f9d','1602512659627.htm','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:54'),('b4069e0a55a31da51acaafdc79684e4c','a050ffc092066cfbf348df62a11715b2','1605078382445.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-11-11 15:06:23','2020-11-11 15:06:46'),('b49ab3b476e91f67e2e749b9a389522a','3047736d57af192ab52c9a7fc1011e52','1606895910050.jpg','481b95ba5cce396c9ec14544b0784751',0,'2020-12-02 15:58:30','2020-12-11 15:43:54'),('b825eb0ba4a062ff40d5c458645e24e9','a84876c500c1311d09ee30544542d0da','1606895885566.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-02 15:58:06','2020-12-06 10:45:47'),('b9c8c79b8dd57fb441cfbc213dbc6f3a','359abf7bc5f7dfe548793eeb775222bd','1606895885751.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-02 15:58:06','2020-12-06 10:45:47'),('baae17f47aef79220fe0b9c9c23e6f4b','2c84327cd21f436601815f430c6e8504',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:21:39','2020-04-12 17:26:39'),('bc22ddd6802fac9ce8642aa0ad6e8f0e','f3515a5c25dcb2d38fc3522b237f7abe','1606895910017.jpg','481b95ba5cce396c9ec14544b0784751',0,'2020-12-02 15:58:30','2020-12-11 15:43:54'),('bd78a0d794e46d77f89a4ae55e904f1f','f9f258dd238b172c1b2058af334660d7','1607673162936.jpg','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('be319113461f98d1058ead6e12d47dd4','1219e6578c8aaa962b93f72e1a774fbc','1602468335796.webp',NULL,1,'2020-10-12 10:05:36','2020-10-12 10:05:36'),('bf0ab4ef7ee9ac2c48a46abe71b8cf41','2c2bed0af1c259e605e73c84e533501f',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:21:42','2020-04-12 17:26:39'),('c1afcf1206e2870dc599d64f9d068cfd','8f59451286c970a77cf3793a0f6657de',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:19','2020-04-12 17:29:09'),('c2c0cf51284e3008b4e986ab687b838c','33f4049d388c1e44ab203cd84c1657db','1603203050420.jpg','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-20 22:10:51','2020-12-11 15:44:00'),('c40835f27f020d28512574fde51cdd25','0821220f93588e198abd7842dd1564f5',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-08 15:27:47','2020-04-19 11:41:34'),('c4f29367cb11f8fb987593339ee61c66','7086872f5fd4647152291a2c7dc0d3b3','1602468575226.webp','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-10-12 10:09:35','2020-10-24 15:16:44'),('c60944ea47657c1ca5cd552657fc29ba','6d3f136678dc0f43620e9849fd3cfe74','1607222761593.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-06 10:46:02','2020-12-11 15:43:50'),('c8e267edce391e23e357f3528fa21e72','da50ebbec69683b543ebf72b389f8af2','undefined','481b95ba5cce396c9ec14544b0784751',0,'2020-01-30 22:08:26','2020-12-02 15:58:10'),('c9c9d12197ae1df349a8652b88512749','0d8f61dc08e78a3f76269c367e51f68a',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:42','2020-10-24 16:02:27'),('cae0fc2d7bd025f563cb651df774a9f4','ba08d19ef9f5b5113479b385903ee1de',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:46:57','2020-02-01 10:46:57'),('cc43ce6b98330f0093d00a1805aa4c0e','6e427f71a9b0714be1ab2d03900052bf','1607222761641.jpg','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-12-06 10:46:02','2020-12-11 15:43:50'),('cdb12faf3f3bfb4cbf7d4c37a5646146','6aa29d78ca8d9fb98c74fff2027a2023',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:20:23','2020-02-01 10:20:23'),('ce68c32ed00b8b2f40f9cfd570861f2e','167eedc9f25803a549d4cd5f0bbb5647',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:12'),('d0b22881fff567ac2e470d463c63bd66','1014089311fa1cc9c7ebcce97e74d2b7','1607673163075.jpg','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('d1651eb087d50083023968fe9616aedd','0276e82116cde0714c49b26f180ae2c1','1602512660019.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:54'),('d2f2aba2f880ebbfab3eb73272256410','e8a7cfa5568a7b560d7b2d5f21c5b4cb','1606895852882.jfif','29f45d9af53fb31a7d79946970580d20',0,'2020-12-02 15:57:33','2020-12-11 15:43:45'),('d335d9d87fdee239d6dc75c8460b0b03','e1ac4c3e2b1816ce6ed46319143400dc','1592274402231.webp','c268ec41fec675b2421e49802cf348b8',0,'2020-06-16 10:26:43','2020-12-11 15:44:07'),('d380c8d36f6298e802e6d5e53ab7221d','ffe1c088d99304a0c3e40e8421ccffbd',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:14','2020-10-12 09:59:00'),('d4486e52e857ce8bad8bfba197276269','48db82518205a60474f38fc0f3def18b','1603584897040.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-25 08:14:58','2020-12-02 15:57:24'),('d533ca0763a80b54a0cbec90b9c0274c','41d3929f68e8f93d5f665fbe819fea5e','1607673163034.jfif','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('d56dbcbbbbd3b35cca4a9035c75ac7b3','63f6ebd934fbeb79c921be787ef8a7f7','1592275236503.png','c14e9e057cbfd2172db4055cea2bef0a',0,'2020-06-16 10:40:38','2020-12-11 15:44:04'),('d5e9cb78df8f27c9e7338fc262b5cbe4','da6da0c71bd31dba89de83a392eb7101','1607673163674.jfif','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('d6b01fede131447343a926775c24c9bf','bad3fbafd5dad5eecbe8b4d32969600e','1587295860492.jpg','c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 19:31:01','2020-12-11 15:44:07'),('d7d5512b7c2f8c1b5124c38d208fd7a2','c24e84fcb9630e6e7884a3982eb8df5d',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:19','2020-10-24 16:02:51'),('d979d95bf56497d00db6b3221290c55f','828227a0f1c736ea393fa4a747b1c5d9',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:52','2020-10-24 16:02:26'),('db052c7a0ad90d39978ace7c18adc84f','3093e537759b2bddff896fb37d5c242f',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:22','2020-10-24 16:02:27'),('ddac543facd01191cf9c40f9d8488b8e','21e6b593145638b53f92fe91df7a8412','1602468733730.png','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 10:12:14','2020-10-22 15:44:55'),('de2beeca9ba17ffca8ab2061f3e695f8','c0f9d197c069e40c1603aaaeb083d8f0','1606895932065.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-12-02 15:58:52','2020-12-11 15:43:57'),('de562d7697a41623009b138804629624','0ec3a3f029bb44f2c511d2b207322c30','1606895853019.jfif','29f45d9af53fb31a7d79946970580d20',0,'2020-12-02 15:57:33','2020-12-11 15:43:45'),('df220f0a4ce60de3ff2a717da4829fa4','ca37885e7b08a7c5bad3d09d8404a51e',NULL,'c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 19:08:50','2020-12-11 15:44:07'),('e000a49e2504b73611d7b859d7056432','71382181ad2219a13008864fe09a7534','1603203066895.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-20 22:11:07','2020-10-22 15:44:32'),('e11677dda0cd75a9b93cfa2ee816a4a6','3dab9866f9ac1867d3845918d4b5b748',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:22','2020-10-24 16:02:27'),('e1697e31413e26e9cb3ee4082386fc6d','a5d33ee8735ca074666f909b06ed40b5','1592358325424.jpg','c14e9e057cbfd2172db4055cea2bef0a',0,'2020-06-17 09:45:26','2020-12-11 15:44:04'),('e19fdb9d3b15ada4f0ba6048e5fdce88','d88c3f894e101017168039fec9406b8a',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:21:24','2020-04-12 17:26:39'),('e1ebc507fc7465def354f8dd151bac59','61eb64355e240b3ebea768d4ed33b7ca','1603118221457.jpg','92cf11c9aa7459847832640f3a0810fa',0,'2020-10-19 22:38:18','2020-12-11 15:44:00'),('e23d4e73853508da375e84ecfe695282','d641becdc63155fc7a77f8e0d35a8c30','1587295860631.jpg','c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 19:31:01','2020-12-11 15:44:07'),('e32970c1bf963faa2ee5c23d09bf5570','f771d483f23dcc8ff4cb5d406ef91d3c','1607673163115.jfif','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('e3d42a5f242d2daae4a2c3d60347c9de','d2594cf03fcebe3a1d8103a51d68cc21','1603523799340.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-24 15:16:39','2020-10-24 15:18:23'),('e3f8ef31eb655f896c75012253dd4a59','c57e12f9d4895d3a36261df106134e0d','1602512660294.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:54'),('e5457c7d430a55b2a83d52f3312730c5','afe8c0e532a6ee2f4e9adda5417d5c08','1603717862371.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-26 21:11:04','2020-10-26 21:11:07'),('e73cf621853b0dcdaedecf3fb7348e5b','6ab1e89918da357782a1c5492d7916bc',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:23:37','2020-10-24 16:02:27'),('e89719bd1b6f43e4b4126fceeb682b52','32b27d2cb90e5b6336858ec14d225ee6','1602512659687.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:54'),('ec90be8f7dcb6a5cb526edacd3c17a4d','568291a0928406ee7ec69558b5cd9c9d','1602512660099.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:20','2020-10-22 15:44:54'),('ecfee7ac87fa674b655baba37d5b0008','2599457449009cafe97fbc46c8c28ee3','1606895853098.jfif','29f45d9af53fb31a7d79946970580d20',0,'2020-12-02 15:57:34','2020-12-11 15:43:45'),('ed25a758d8770f29c537efed0dfc3432','772036151e48e5bd40d4183aab08ae67','1603337213876.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 11:26:59','2020-10-24 11:14:48'),('ed5942be9ec61876eeb044c0a45ebf28','ee5fd755a6f28df835361c005d0b867b',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-03-24 09:54:05','2020-11-11 15:07:12'),('ee2c4832ba5b9aae12643754d21ff01d','33f8407082a521fddb37204c4d4a9b5f',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-02-01 10:46:53','2020-02-01 10:46:53'),('ee5517b2c4ba0f04877e30c5fb362d1a','808e310c02f10be658c98ba1a5ab14dc','1607672771526.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('f05a016fa3402716e04346cb03c395c9','f58d18eac69fc82f6a179c4f63717ffa','1607672771941.jpg','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('f0b689591b6c0c14d14ce5c0af8f5a24','353e9f6f708940fa167369d747313073','1603203083484.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-20 22:11:23','2020-10-22 15:44:32'),('f0fdce2ae020b1aa60bf664e4efc63d4','d77a20d228f70b5538650ddae1605656',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-03-24 09:54:45','2020-11-11 15:07:12'),('f14c06e31317b82b7af3360a8cd7278d','2da8a6151284326105dce88f51f9a366','1602512629401.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:23:49','2020-10-22 15:44:55'),('f20b308ca4739da24479247ef46f63c8','7eb647473e898a9c0a85d6ca18264382','1602512643395.jpg','29f45d9af53fb31a7d79946970580d20',0,'2020-10-12 22:24:03','2020-10-22 15:44:54'),('f26bf0f1b0c4128aa32f4b6fa9337e40','b9d6793bfcea4da7d67274cda673e136',NULL,'c268ec41fec675b2421e49802cf348b8',0,'2020-04-19 19:07:19','2020-12-11 15:44:07'),('f2a6fc07b497b6ccc724775174c92285','2ea6d2a5935188a1cbcc158f1883cee6','1606895932119.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-12-02 15:58:52','2020-12-11 15:43:57'),('f2b878f65ead268ba44d58064707ef9f','f11f1fbd9bde32d5bf20e255486f7315',NULL,'976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-03-17 09:22:42','2020-04-12 17:29:24'),('f4c77ee305ae2961300d9ad55dc24487','9f45252b76c4182a37c0a4d0bd81ea9b','1607673162996.jfif','976dbeb57cb6d5234c1c73e1de8522cf',1,'2020-12-11 15:52:44','2020-12-11 15:52:44'),('f773e67c7ba57d1821253acd21115f9b','ca15a25bb9256fd6b945d4f0e8fe0151','1603352411518.jpg','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 15:40:13','2020-10-24 11:14:40'),('f7c145409c2986b34ad8b0b82b85169a','d5e23b87e356018488853df17e027670',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-04-19 11:42:40','2020-11-11 15:07:12'),('f8834e5002f45c3eed1e678b87d5ac57','eb7801d1f8929420262a9a072a257099','1607672771919.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('fa4fb6b85bd260abb6d5c71714df079d','b5ac21304ccd22e56bfcae3ae8aef4cf',NULL,'481b95ba5cce396c9ec14544b0784751',0,'2020-03-24 09:54:05','2020-11-11 15:07:12'),('fac59a0c821e94722aa57c79fd8ae01b','7f14f9f4346cefdf58195caf89c940b7','1600502329461.png','976dbeb57cb6d5234c1c73e1de8522cf',0,'2020-09-19 15:58:49','2020-10-12 10:10:08'),('fb28547cddf4745a6727b0468b946751','451ab97d0b200f4309f44e71ddbc8b16','1603584896000.png','29f45d9af53fb31a7d79946970580d20',0,'2020-10-25 08:14:58','2020-12-02 15:57:24'),('fc4267a8eea763c603cb87c61d68f31d','0051cb722bb1bd89e1ec57b5f970c287','1607672771698.jfif','29f45d9af53fb31a7d79946970580d20',1,'2020-12-11 15:46:15','2020-12-11 15:46:15'),('fe53d5119671136dac475e201243b6a8','faa9c1d13323faf06ac79e89ad14696d','1603336919377.png','404d044b3541082e9987ffb4fb0788da',0,'2020-10-22 11:22:03','2020-10-24 11:14:55'),('ff90e72a99c6e00d4674661148052eb2','207fecc04931d722404f6b9584e11446',NULL,'676268e609d08412d0e2d5ce1b1a0d0c',0,'2020-03-09 08:52:51','2020-03-09 08:52:51');

/*Table structure for table `t_picture_sort` */

DROP TABLE IF EXISTS `t_picture_sort`;

CREATE TABLE `t_picture_sort` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `file_uid` varchar(32) DEFAULT NULL COMMENT '分类图片uid',
  `name` varchar(255) DEFAULT NULL COMMENT '分类名',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `parent_uid` varchar(32) DEFAULT NULL,
  `sort` int DEFAULT '0' COMMENT '排序字段，越大越靠前',
  `is_show` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否显示，1：是，0，否',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='图片分类表';

/*Data for the table `t_picture_sort` */

insert  into `t_picture_sort`(`uid`,`file_uid`,`name`,`status`,`create_time`,`update_time`,`parent_uid`,`sort`,`is_show`) values ('21824c9b86dc8ad6c378cacfb664f275','ee5fd755a6f28df835361c005d0b867b','测试3',0,'2020-04-07 15:49:00','2020-04-07 15:49:03',NULL,0,1),('29f45d9af53fb31a7d79946970580d20','2168150dfa4d7e91bd13a989c3eb98fd','测试分类',1,'2020-04-19 18:46:13','2020-12-11 15:45:53',NULL,5,1),('404d044b3541082e9987ffb4fb0788da',NULL,'Minio测试',0,'2020-10-22 11:21:40','2020-12-11 15:44:18',NULL,0,1),('481b95ba5cce396c9ec14544b0784751','58be54bbd3f64fc65c0c18ddbeeb995f','测试图片',0,'2020-01-30 22:08:10','2020-12-11 15:44:20',NULL,2,1),('543a083eedbb76f1d558b038d68d5ba1','null','123',0,'2020-03-20 13:34:22','2020-03-20 13:34:22',NULL,0,1),('676268e609d08412d0e2d5ce1b1a0d0c','3e6d4c73afeb338ad5e9c2d5be0bea14','测试分类',0,'2020-03-09 08:52:27','2020-03-09 08:52:27',NULL,1,1),('92cf11c9aa7459847832640f3a0810fa','cc9952f52c84dfa51d74ee35a1dc5367','图片2',0,'2020-10-19 19:26:09','2020-12-11 15:44:16',NULL,0,1),('976dbeb57cb6d5234c1c73e1de8522cf','f4f7e50df629bdea99a2cd8481017cc9','测试分类2',1,'2020-03-17 09:18:53','2020-10-12 10:10:30',NULL,4,1),('c14e9e057cbfd2172db4055cea2bef0a','828227a0f1c736ea393fa4a747b1c5d9','测试分类4',0,'2020-06-16 10:26:59','2020-12-11 15:44:14',NULL,0,1),('c268ec41fec675b2421e49802cf348b8','b9d6793bfcea4da7d67274cda673e136','图床2',0,'2020-04-19 18:48:10','2020-12-11 15:44:11',NULL,0,1),('d4fc04eb7f3ad15679b9e93bf1d87d62','null','null',0,'2020-03-20 13:22:33','2020-03-20 13:22:33',NULL,0,1),('ddcd55f1545326e8bbdc0c72a884437d','ee5fd755a6f28df835361c005d0b867b','测试3',0,'2020-04-07 15:48:17','2020-04-07 15:48:30',NULL,3,1);

/*Table structure for table `t_resource_sort` */

DROP TABLE IF EXISTS `t_resource_sort`;

CREATE TABLE `t_resource_sort` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `file_uid` varchar(32) DEFAULT NULL COMMENT '分类图片uid',
  `sort_name` varchar(255) DEFAULT NULL COMMENT '分类名',
  `content` varchar(255) DEFAULT NULL COMMENT '分类介绍',
  `click_count` varchar(255) DEFAULT NULL COMMENT '点击数',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `parent_uid` varchar(32) DEFAULT NULL COMMENT '父UID',
  `sort` int DEFAULT '0' COMMENT '排序字段',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='资源分类表';

/*Data for the table `t_resource_sort` */

insert  into `t_resource_sort`(`uid`,`file_uid`,`sort_name`,`content`,`click_count`,`status`,`create_time`,`update_time`,`parent_uid`,`sort`) values ('6d00af642cbff05e3bf5ffcaeefa97cb','adeaf35fdcd2d36ed143d95bc02b1cc2','测试分类2','测试分类2',NULL,0,'2020-03-09 09:06:42','2020-03-09 09:06:42',NULL,0),('a442a4d5c4e07a9032af7de99f301de4','3e6d4c73afeb338ad5e9c2d5be0bea14','测试分类2','测试分类',NULL,1,'2020-03-09 09:21:21','2020-03-09 09:21:21',NULL,2),('cf2fa0b814489b81eec18f2e7f879f19','dd34fc59ff945ca781cd46c23f7d7b65','测试分类','测试分类',NULL,1,'2020-02-01 12:35:35','2020-02-01 12:35:35',NULL,1);

/*Table structure for table `t_role` */

DROP TABLE IF EXISTS `t_role`;

CREATE TABLE `t_role` (
  `uid` varchar(32) NOT NULL COMMENT '角色id',
  `role_name` varchar(255) NOT NULL COMMENT '角色名',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `summary` varchar(255) DEFAULT NULL COMMENT '角色介绍',
  `category_menu_uids` text COMMENT '角色管辖的菜单的UID',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_role` */

insert  into `t_role`(`uid`,`role_name`,`create_time`,`update_time`,`status`,`summary`,`category_menu_uids`) values ('434994947c5a4ee3a710cd277357c7c3','超级管理员','2018-10-16 07:56:26','2020-12-08 20:38:50',1,'超级管理员，管理全部菜单和功能','[\"49b42250abcb47ff876bad699cf34f03\",\"1f01cd1d2f474743b241d74008b12333\",\"e5218b0b1cf016ae21eced4e47b628ac\",\"fe45ea293f75dc88b96cab96c218512a\",\"0cab1fcdcd01f394768e2e2674e56773\",\"16a75a3c38e71c1046b443b4b64dd930\",\"2b983c5439ac07f2cf07437ba9fff6be\",\"7ada0a7053be4ad4b31f6be64315d03a\",\"9db7ffbded9717f13a1a97fca46bc17c\",\"0a035547bbec404eb3ee0ef43312148d\",\"2a733ff390af9b44ecda4e8c4634d75d\",\"327d945daf4ddb71976c4ab3830e7c66\",\"6c8a8c50c77429fab210bd52ed8c50bb\",\"72d26cf940bf9dfb6bde0a590ff40882\",\"80ee135af885f02d52ecb67d5a05b173\",\"aef85c40b54320d7c5a9d78697e12910\",\"f87d2f9b4539abbade38583420dc8b89\",\"fbc30e4ae5bb33b39baca7bf6bd8ce99\",\"78ab104b123f4950af14d65798afb756\",\"6606b7e646d545e5a25c70b5e5fade9f\",\"2a733ff390af9b44ecda4e8c4634d75f\",\"327d945daf4ddb71976c4ab3830e7c6h\",\"6c8a8c50c77429fab210bd52ed8c50ba\",\"72d26cf940bf9dfb6bde0a590ff4088g\",\"80ee135af885f02d52ecb67d5a05b17b\",\"aef85c40b54320d7c5a9d78697e1291c\",\"f87d2f9b4539abbade38583420dc8b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9d\",\"7cb1a6b7462832bf831a18a28eea94cd\",\"237d410f90d0c70b894f87a87718d88c\",\"5bf9bd28d387ef923f2c5d11ec01fbbd\",\"86508603e6d78036db0bf9222946f68c\",\"bcfac78203944094040851cc0a9bb095\",\"da32aa8f92ae7fe7e7f445bf1028d2df\",\"ed535411a72bb5cdd62aade25ca6e9c9\",\"3e92f2fd6cf012d30bfae2d9cdb7092d\",\"a8bad1abec6c8fc8d4bce5a27829c878\",\"b21105b915a5b54588c2cd458a94d2d5\",\"ccc0dced06919403832647a871312f09\",\"e76ec0b7226985a414f035e2ecbd00b4\",\"fa1e85a9c7734d27df07bc730206bd1a\",\"1d9a5030142e9fd7690f554c20e3bc90\",\"f874529321a37e84f099488a4eaf5a0b\",\"badf0010422b432ba6ec9c83a25012ed\",\"78f24799307cb63bc3759413dadf4d1a\",\"587e2697fa4d85046feece8ab9d0706c\",\"f87d2f9b4539abbade38583420dc8byl\",\"fbc30e4ae5bb33b39baca7bf6bd8cezm\",\"2fb47d3b6dbd44279c8206740a263543\",\"f87d2f9b4539abbade38583420dc8bpl\",\"fbc30e4ae5bb33b39baca7bf6bd8ceom\",\"faccfe476b89483791c05019ad5b4906\",\"2a733ff390af9b44ecda4e8c4634dm8k\",\"f87d2f9b4539abbade38583420dc8l9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ck0m\",\"c28f0b052e0b930299dd53de59cc32d7\",\"2a733ff390af9b44ecda4e8c4634dh8k\",\"327d945daf4ddb71976c4ab3830e7g7i\",\"f87d2f9b4539abbade38583420dc8i9l\",\"fbc30e4ae5bb33b39baca7bf6bd8cj0m\",\"9002d1ae905c4cb79c2a485333dad2f7\",\"2a733ff390af9b44ecda4e8c4634d78k\",\"327d945daf4ddb71976c4ab3830e7c7i\",\"aef85c40b54320d7c5a9d78697e1296n\",\"f87d2f9b4539abbade38583420dc8b9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ce0m\",\"3eacc357e23b0b17e4f835c2f998ed34\",\"2496af227b283bc79d9261b73e3ea743\",\"25b3ea9639872aa730ad6147baf61641\",\"82962bbcdb674a3fdd57aec131114d56\",\"8b40ea466efc42f497c49c8a610c9c20\",\"c2a1218dd07747a57b055f184ddae217\",\"26bcccf0164bf84f12ab20448388d346\",\"62c91c47c4646661c045727f0a8eb9d4\",\"7be9dee2f91165d8562aaa80c7e5b936\",\"9e73a9b1de18e4f1cb19eca5e8cd321d\",\"ab1289c29b336dccda87a9fa8b711aa2\",\"e91945e49c5fdb207f996bc9668cd965\",\"062087bce19d00312b3787b6e24c21d1\",\"2a733ff390af9b44ecda4e8c4634d7ck\",\"327d945daf4ddb71976c4ab3830e7cdi\",\"f87d2f9b4539abbade38583420dc8bbl\",\"fbc30e4ae5bb33b39baca7bf6bd8ceam\",\"d3a19221259d439b916f475e43edb13d\",\"aa225cdae6464bc0acebd732192f8362\",\"2a733ff390af9b44ecda4e8c4634d73k\",\"327d945daf4ddb71976c4ab3830e7c4i\",\"aef85c40b54320d7c5a9d78697e1295n\",\"f87d2f9b4539abbade38583420dc8b2l\",\"fbc30e4ae5bb33b39baca7bf6bd8ce1m\",\"879cfcd4dfd3e5bc1bb6ea2c0f1f82c0\",\"5010ae46511e4c0b9f30d1c63ad3f0c1\",\"2a733ff390af9b44ecda4e8c4634d7uk\",\"327d945daf4ddb71976c4ab3830e7cvi\",\"f87d2f9b4539abbade38583420dc8btl\",\"fbc30e4ae5bb33b39baca7bf6bd8cesm\",\"2de247af3b0a459095e937d7ab9f5864\",\"2a733ff390af9b44ecda4e8c4634d7lk\",\"327d945daf4ddb71976c4ab3830e7cmi\",\"72d26cf940bf9dfb6bde0a590ff408nj\",\"f87d2f9b4539abbade38583420dc8bkl\",\"fbc30e4ae5bb33b39baca7bf6bd8cejm\",\"f4697cdf85920369179b90ff45a5982d\",\"f3a559635f9d46ee3356d072f5896fcb\",\"672b093002b618293befd8e1a164e4cc\",\"407a263eb12eff5aac31e9f62901cea0\",\"34c1b7b1bd3118979fe1f9f9a1147fa5\",\"c519725da92b42f3acf0cc9fad58c664\",\"fb4237a353d0418ab42c748b7c1d64c6\",\"065cda845549289b2afcd0129d87c2c0\",\"2a733ff390af9b44ecda4e8c4634d75t\",\"72d26cf940bf9dfb6bde0a590ff4088s\",\"f87d2f9b4539abbade38583420dc8b8r\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9q\",\"b511cae571834971a392ae4779270034\",\"98b82be8785e41dc939b6a5517fdfa53\",\"a5902692a3ed4fd794895bf634f97b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8celm\",\"9e91b4f993c946cba4bf720b2c1b2e90\",\"fbc30e4ae5bb33b39baca7bf6bd8cemm\",\"4337f63d13d84b9aba64b9d7a69fd066\",\"fbc30e4ae5bb33b39baca7bf6bd8cekm\",\"bcf4a9bc21c14b559bcb015fb7912266\",\"9beb7caa2c844b36a02789262dc76fbe\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9m\",\"2a733ff390af9b44ecda4e8c4634d75k\",\"327d945daf4ddb71976c4ab3830e7c6i\",\"72d26cf940bf9dfb6bde0a590ff4088j\",\"f87d2f9b4539abbade38583420dc8b8l\",\"6228ff4e9ebd42c89599b322201a0345\",\"9c91231f1682aabd765225a7e503bb43\",\"f87d2f9b4539abbade38583420dc8bxl\",\"fbc30e4ae5bb33b39baca7bf6bd8cewm\",\"baace3dc03d34c54b81761dce8243814\",\"af0e753d3ea0adf5cd8cf1dd55f162c2\",\"f9276eb8e3274c8aa05577c86e4dc8c1\",\"e4a482c089d04a30b6ecbaadb81b70f8\",\"d4d92c53d3614d00865e9219b8292a90\",\"acbb5d09da25e6c9e019cc361b35d159\",\"65e22f3d36d94bcea47478aba02895a1\",\"4dea9c4f39d2480983e8c4333d35e036\",\"2a733ff390af9b44ecda4e8c4634d7pk\",\"327d945daf4ddb71976c4ab3830e7cqi\",\"aef85c40b54320d7c5a9d78697e129rn\",\"f87d2f9b4539abbade38583420dc8bol\",\"fbc30e4ae5bb33b39baca7bf6bd8cenm\",\"1cc493d36e17fad535f2bf70242162b0\",\"2a733ff390af9b44ecda4e8c4634d7gk\",\"327d945daf4ddb71976c4ab3830e7cfi\",\"72d26cf940bf9dfb6bde0a590ff408ej\",\"f87d2f9b4539abbade38583420dc8bhl\",\"fbc30e4ae5bb33b39baca7bf6bd8ceim\",\"510483ce569b4fc88299f346147b1314\",\"e1e54aea65cc22d9f8a4c74ce8d23749\",\"4062db4658392e71c177758bb51bb4cb\",\"5ef38a4f70c6d859155528776a30cda7\",\"688beda820a236b50f18ccdd5dc9fee9\",\"94bee9c48a4611c96b89112b845c7f28\",\"baa21ccb45ee133b064187185edb2ac0\",\"ffc6e9ca2cc243febf6d2f476b849163\",\"2a733ff390af9b44ecda4e8c4634dh8c\",\"327d945daf4ddb71976c4ab3830e7g7d\",\"f87d2f9b4539abbade38583420dc8i9b\",\"fbc30e4ae5bb33b39baca7bf6bd8cj0a\",\"9449ce5dd5e24b21a9d15f806cb36e87\",\"2a733ff390af9b44ecda4e8c4634db8k\",\"327d945daf4ddb71976c4ab3830e7d7i\",\"aef85c40b54320d7c5a9d78697e12e6n\",\"f87d2f9b4539abbade38583420dc8c9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ca0m\",\"147cd431cbb9007bde87444d7987b151\",\"a0c40ddd3fe15bb3f2edf9ec242a1511\",\"14bcfc15d02f0d568adf2d383c0342d8\",\"bfcb9b002c3de18f269189c573b985f8\",\"2d5cd8a387fc2d010c245acd65fefd3b\",\"99f5d4233d446a809b9937961c590766\",\"a9396f1a3fbdec3d4cb614f388a22bea\",\"152216a4fd9b995aa20bfa1eec6312c2\",\"238352fc7e86340c339b9a575b1b7086\",\"cbd7ba11c1b38c66b569405ed9185f35\",\"505b4769b77617a314a3ed78e4acdff7\",\"93f7fd9a6e81735c47649e6b36042b5d\",\"bfc9463e59a3ca250dcfc1c86627e034\",\"2a733ff390af9b44ecda4e8c4634d75u\",\"02ea2f9ef5d44f559fb66189b05f6769\",\"2a733ff390af9b44ecda4e8c4634d75v\"]'),('434994947c5a4ee3a710cd277357c7c4','文章管理员','2018-10-15 07:56:21','2020-10-07 15:23:29',0,'管理文章','[\"49b42250abcb47ff876bad699cf34f03\",\"1f01cd1d2f474743b241d74008b12333\",\"fe45ea293f75dc88b96cab96c218512a\",\"e5218b0b1cf016ae21eced4e47b628ac\",\"0cab1fcdcd01f394768e2e2674e56773\",\"16a75a3c38e71c1046b443b4b64dd930\",\"2b983c5439ac07f2cf07437ba9fff6be\",\"7ada0a7053be4ad4b31f6be64315d03a\",\"0a035547bbec404eb3ee0ef43312148d\",\"2a733ff390af9b44ecda4e8c4634d75d\",\"327d945daf4ddb71976c4ab3830e7c66\",\"6c8a8c50c77429fab210bd52ed8c50bb\",\"72d26cf940bf9dfb6bde0a590ff40882\",\"80ee135af885f02d52ecb67d5a05b173\",\"aef85c40b54320d7c5a9d78697e12910\",\"f87d2f9b4539abbade38583420dc8b89\",\"fbc30e4ae5bb33b39baca7bf6bd8ce99\",\"78ab104b123f4950af14d65798afb756\",\"6606b7e646d545e5a25c70b5e5fade9f\",\"2a733ff390af9b44ecda4e8c4634d75f\",\"327d945daf4ddb71976c4ab3830e7c6h\",\"6c8a8c50c77429fab210bd52ed8c50ba\",\"72d26cf940bf9dfb6bde0a590ff4088g\",\"80ee135af885f02d52ecb67d5a05b17b\",\"aef85c40b54320d7c5a9d78697e1291c\",\"f87d2f9b4539abbade38583420dc8b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9d\",\"1d9a5030142e9fd7690f554c20e3bc90\",\"bcf4a9bc21c14b559bcb015fb7912266\",\"9beb7caa2c844b36a02789262dc76fbe\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9m\",\"2a733ff390af9b44ecda4e8c4634d75k\",\"327d945daf4ddb71976c4ab3830e7c6i\",\"72d26cf940bf9dfb6bde0a590ff4088j\",\"f87d2f9b4539abbade38583420dc8b8l\",\"6228ff4e9ebd42c89599b322201a0345\",\"9c91231f1682aabd765225a7e503bb43\",\"f87d2f9b4539abbade38583420dc8bxl\",\"fbc30e4ae5bb33b39baca7bf6bd8cewm\",\"fbc30e4ae5bb33b39baca7bf6bd8ceim\"]'),('ad92f1639508ca405728f4981770793b','演示角色','2020-03-22 08:24:29','2020-12-11 21:02:38',1,'具备所有的查询权限和部分操作权限','[\"e5218b0b1cf016ae21eced4e47b628ac\",\"fe45ea293f75dc88b96cab96c218512a\",\"0cab1fcdcd01f394768e2e2674e56773\",\"2b983c5439ac07f2cf07437ba9fff6be\",\"7ada0a7053be4ad4b31f6be64315d03a\",\"9db7ffbded9717f13a1a97fca46bc17c\",\"0a035547bbec404eb3ee0ef43312148d\",\"2a733ff390af9b44ecda4e8c4634d75d\",\"327d945daf4ddb71976c4ab3830e7c66\",\"6c8a8c50c77429fab210bd52ed8c50bb\",\"72d26cf940bf9dfb6bde0a590ff40882\",\"80ee135af885f02d52ecb67d5a05b173\",\"aef85c40b54320d7c5a9d78697e12910\",\"f87d2f9b4539abbade38583420dc8b89\",\"fbc30e4ae5bb33b39baca7bf6bd8ce99\",\"6606b7e646d545e5a25c70b5e5fade9f\",\"2a733ff390af9b44ecda4e8c4634d75f\",\"327d945daf4ddb71976c4ab3830e7c6h\",\"6c8a8c50c77429fab210bd52ed8c50ba\",\"72d26cf940bf9dfb6bde0a590ff4088g\",\"80ee135af885f02d52ecb67d5a05b17b\",\"aef85c40b54320d7c5a9d78697e1291c\",\"f87d2f9b4539abbade38583420dc8b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9d\",\"7cb1a6b7462832bf831a18a28eea94cd\",\"237d410f90d0c70b894f87a87718d88c\",\"5bf9bd28d387ef923f2c5d11ec01fbbd\",\"86508603e6d78036db0bf9222946f68c\",\"bcfac78203944094040851cc0a9bb095\",\"da32aa8f92ae7fe7e7f445bf1028d2df\",\"ed535411a72bb5cdd62aade25ca6e9c9\",\"3e92f2fd6cf012d30bfae2d9cdb7092d\",\"a8bad1abec6c8fc8d4bce5a27829c878\",\"b21105b915a5b54588c2cd458a94d2d5\",\"ccc0dced06919403832647a871312f09\",\"e76ec0b7226985a414f035e2ecbd00b4\",\"fa1e85a9c7734d27df07bc730206bd1a\",\"1d9a5030142e9fd7690f554c20e3bc90\",\"f874529321a37e84f099488a4eaf5a0b\",\"fbc30e4ae5bb33b39baca7bf6bd8cezm\",\"fbc30e4ae5bb33b39baca7bf6bd8ceom\",\"fbc30e4ae5bb33b39baca7bf6bd8ck0m\",\"fbc30e4ae5bb33b39baca7bf6bd8cj0m\",\"9002d1ae905c4cb79c2a485333dad2f7\",\"2a733ff390af9b44ecda4e8c4634d78k\",\"327d945daf4ddb71976c4ab3830e7c7i\",\"aef85c40b54320d7c5a9d78697e1296n\",\"f87d2f9b4539abbade38583420dc8b9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ce0m\",\"c2a1218dd07747a57b055f184ddae217\",\"62c91c47c4646661c045727f0a8eb9d4\",\"fbc30e4ae5bb33b39baca7bf6bd8ceam\",\"fbc30e4ae5bb33b39baca7bf6bd8ce1m\",\"879cfcd4dfd3e5bc1bb6ea2c0f1f82c0\",\"fbc30e4ae5bb33b39baca7bf6bd8cesm\",\"fbc30e4ae5bb33b39baca7bf6bd8cejm\",\"f4697cdf85920369179b90ff45a5982d\",\"f3a559635f9d46ee3356d072f5896fcb\",\"672b093002b618293befd8e1a164e4cc\",\"407a263eb12eff5aac31e9f62901cea0\",\"34c1b7b1bd3118979fe1f9f9a1147fa5\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9q\",\"b511cae571834971a392ae4779270034\",\"98b82be8785e41dc939b6a5517fdfa53\",\"a5902692a3ed4fd794895bf634f97b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8celm\",\"9e91b4f993c946cba4bf720b2c1b2e90\",\"fbc30e4ae5bb33b39baca7bf6bd8cemm\",\"4337f63d13d84b9aba64b9d7a69fd066\",\"fbc30e4ae5bb33b39baca7bf6bd8cekm\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9m\",\"fbc30e4ae5bb33b39baca7bf6bd8cewm\",\"baace3dc03d34c54b81761dce8243814\",\"af0e753d3ea0adf5cd8cf1dd55f162c2\",\"f9276eb8e3274c8aa05577c86e4dc8c1\",\"e4a482c089d04a30b6ecbaadb81b70f8\",\"d4d92c53d3614d00865e9219b8292a90\",\"acbb5d09da25e6c9e019cc361b35d159\",\"fbc30e4ae5bb33b39baca7bf6bd8cenm\",\"fbc30e4ae5bb33b39baca7bf6bd8ceim\",\"510483ce569b4fc88299f346147b1314\",\"e1e54aea65cc22d9f8a4c74ce8d23749\",\"4062db4658392e71c177758bb51bb4cb\",\"5ef38a4f70c6d859155528776a30cda7\",\"688beda820a236b50f18ccdd5dc9fee9\",\"94bee9c48a4611c96b89112b845c7f28\",\"baa21ccb45ee133b064187185edb2ac0\",\"ffc6e9ca2cc243febf6d2f476b849163\",\"2a733ff390af9b44ecda4e8c4634dh8c\",\"327d945daf4ddb71976c4ab3830e7g7d\",\"f87d2f9b4539abbade38583420dc8i9b\",\"fbc30e4ae5bb33b39baca7bf6bd8cj0a\",\"9449ce5dd5e24b21a9d15f806cb36e87\",\"2a733ff390af9b44ecda4e8c4634db8k\",\"327d945daf4ddb71976c4ab3830e7d7i\",\"aef85c40b54320d7c5a9d78697e12e6n\",\"f87d2f9b4539abbade38583420dc8c9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ca0m\",\"147cd431cbb9007bde87444d7987b151\",\"a0c40ddd3fe15bb3f2edf9ec242a1511\",\"14bcfc15d02f0d568adf2d383c0342d8\",\"bfcb9b002c3de18f269189c573b985f8\",\"2d5cd8a387fc2d010c245acd65fefd3b\",\"99f5d4233d446a809b9937961c590766\",\"a9396f1a3fbdec3d4cb614f388a22bea\",\"152216a4fd9b995aa20bfa1eec6312c2\",\"238352fc7e86340c339b9a575b1b7086\",\"cbd7ba11c1b38c66b569405ed9185f35\",\"505b4769b77617a314a3ed78e4acdff7\",\"93f7fd9a6e81735c47649e6b36042b5d\",\"bfc9463e59a3ca250dcfc1c86627e034\",\"2a733ff390af9b44ecda4e8c4634d75u\",\"02ea2f9ef5d44f559fb66189b05f6769\",\"2a733ff390af9b44ecda4e8c4634d75v\"]'),('d105da79260f4d6a8a03571e4a2b17bc','一般管理员','2019-05-29 00:43:26','2020-10-07 15:23:07',1,'一般管理员','[\"49b42250abcb47ff876bad699cf34f03\",\"1f01cd1d2f474743b241d74008b12333\",\"fe45ea293f75dc88b96cab96c218512a\",\"0cab1fcdcd01f394768e2e2674e56773\",\"e5218b0b1cf016ae21eced4e47b628ac\",\"16a75a3c38e71c1046b443b4b64dd930\",\"2b983c5439ac07f2cf07437ba9fff6be\",\"7ada0a7053be4ad4b31f6be64315d03a\",\"9db7ffbded9717f13a1a97fca46bc17c\",\"0a035547bbec404eb3ee0ef43312148d\",\"2a733ff390af9b44ecda4e8c4634d75d\",\"327d945daf4ddb71976c4ab3830e7c66\",\"6c8a8c50c77429fab210bd52ed8c50bb\",\"72d26cf940bf9dfb6bde0a590ff40882\",\"80ee135af885f02d52ecb67d5a05b173\",\"aef85c40b54320d7c5a9d78697e12910\",\"f87d2f9b4539abbade38583420dc8b89\",\"fbc30e4ae5bb33b39baca7bf6bd8ce99\",\"78ab104b123f4950af14d65798afb756\",\"6606b7e646d545e5a25c70b5e5fade9f\",\"2a733ff390af9b44ecda4e8c4634d75f\",\"327d945daf4ddb71976c4ab3830e7c6h\",\"6c8a8c50c77429fab210bd52ed8c50ba\",\"72d26cf940bf9dfb6bde0a590ff4088g\",\"80ee135af885f02d52ecb67d5a05b17b\",\"aef85c40b54320d7c5a9d78697e1291c\",\"f87d2f9b4539abbade38583420dc8b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9d\",\"7cb1a6b7462832bf831a18a28eea94cd\",\"237d410f90d0c70b894f87a87718d88c\",\"86508603e6d78036db0bf9222946f68c\",\"bcfac78203944094040851cc0a9bb095\",\"da32aa8f92ae7fe7e7f445bf1028d2df\",\"ed535411a72bb5cdd62aade25ca6e9c9\",\"3e92f2fd6cf012d30bfae2d9cdb7092d\",\"a8bad1abec6c8fc8d4bce5a27829c878\",\"b21105b915a5b54588c2cd458a94d2d5\",\"ccc0dced06919403832647a871312f09\",\"e76ec0b7226985a414f035e2ecbd00b4\",\"fa1e85a9c7734d27df07bc730206bd1a\",\"1d9a5030142e9fd7690f554c20e3bc90\",\"f874529321a37e84f099488a4eaf5a0b\",\"badf0010422b432ba6ec9c83a25012ed\",\"78f24799307cb63bc3759413dadf4d1a\",\"587e2697fa4d85046feece8ab9d0706c\",\"f87d2f9b4539abbade38583420dc8byl\",\"fbc30e4ae5bb33b39baca7bf6bd8cezm\",\"2fb47d3b6dbd44279c8206740a263543\",\"f87d2f9b4539abbade38583420dc8bpl\",\"fbc30e4ae5bb33b39baca7bf6bd8ceom\",\"faccfe476b89483791c05019ad5b4906\",\"2a733ff390af9b44ecda4e8c4634dm8k\",\"f87d2f9b4539abbade38583420dc8l9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ck0m\",\"c28f0b052e0b930299dd53de59cc32d7\",\"2a733ff390af9b44ecda4e8c4634dh8k\",\"327d945daf4ddb71976c4ab3830e7g7i\",\"f87d2f9b4539abbade38583420dc8i9l\",\"fbc30e4ae5bb33b39baca7bf6bd8cj0m\",\"9002d1ae905c4cb79c2a485333dad2f7\",\"2a733ff390af9b44ecda4e8c4634d78k\",\"327d945daf4ddb71976c4ab3830e7c7i\",\"aef85c40b54320d7c5a9d78697e1296n\",\"f87d2f9b4539abbade38583420dc8b9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ce0m\",\"3eacc357e23b0b17e4f835c2f998ed34\",\"2496af227b283bc79d9261b73e3ea743\",\"25b3ea9639872aa730ad6147baf61641\",\"82962bbcdb674a3fdd57aec131114d56\",\"8b40ea466efc42f497c49c8a610c9c20\",\"c2a1218dd07747a57b055f184ddae217\",\"26bcccf0164bf84f12ab20448388d346\",\"62c91c47c4646661c045727f0a8eb9d4\",\"7be9dee2f91165d8562aaa80c7e5b936\",\"9e73a9b1de18e4f1cb19eca5e8cd321d\",\"ab1289c29b336dccda87a9fa8b711aa2\",\"e91945e49c5fdb207f996bc9668cd965\",\"062087bce19d00312b3787b6e24c21d1\",\"2a733ff390af9b44ecda4e8c4634d7ck\",\"327d945daf4ddb71976c4ab3830e7cdi\",\"f87d2f9b4539abbade38583420dc8bbl\",\"fbc30e4ae5bb33b39baca7bf6bd8ceam\",\"c519725da92b42f3acf0cc9fad58c664\",\"fb4237a353d0418ab42c748b7c1d64c6\",\"065cda845549289b2afcd0129d87c2c0\",\"2a733ff390af9b44ecda4e8c4634d75t\",\"72d26cf940bf9dfb6bde0a590ff4088s\",\"f87d2f9b4539abbade38583420dc8b8r\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9q\",\"b511cae571834971a392ae4779270034\",\"98b82be8785e41dc939b6a5517fdfa53\",\"a5902692a3ed4fd794895bf634f97b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8celm\",\"9e91b4f993c946cba4bf720b2c1b2e90\",\"fbc30e4ae5bb33b39baca7bf6bd8cemm\",\"4337f63d13d84b9aba64b9d7a69fd066\",\"fbc30e4ae5bb33b39baca7bf6bd8cekm\",\"bcf4a9bc21c14b559bcb015fb7912266\",\"9beb7caa2c844b36a02789262dc76fbe\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9m\",\"2a733ff390af9b44ecda4e8c4634d75k\",\"327d945daf4ddb71976c4ab3830e7c6i\",\"72d26cf940bf9dfb6bde0a590ff4088j\",\"f87d2f9b4539abbade38583420dc8b8l\",\"6228ff4e9ebd42c89599b322201a0345\",\"9c91231f1682aabd765225a7e503bb43\",\"f87d2f9b4539abbade38583420dc8bxl\",\"fbc30e4ae5bb33b39baca7bf6bd8cewm\",\"baace3dc03d34c54b81761dce8243814\",\"f9276eb8e3274c8aa05577c86e4dc8c1\",\"e4a482c089d04a30b6ecbaadb81b70f8\",\"d4d92c53d3614d00865e9219b8292a90\",\"acbb5d09da25e6c9e019cc361b35d159\",\"65e22f3d36d94bcea47478aba02895a1\",\"4dea9c4f39d2480983e8c4333d35e036\",\"2a733ff390af9b44ecda4e8c4634d7pk\",\"327d945daf4ddb71976c4ab3830e7cqi\",\"aef85c40b54320d7c5a9d78697e129rn\",\"f87d2f9b4539abbade38583420dc8bol\",\"fbc30e4ae5bb33b39baca7bf6bd8cenm\",\"1cc493d36e17fad535f2bf70242162b0\",\"2a733ff390af9b44ecda4e8c4634d7gk\",\"327d945daf4ddb71976c4ab3830e7cfi\",\"72d26cf940bf9dfb6bde0a590ff408ej\",\"f87d2f9b4539abbade38583420dc8bhl\",\"fbc30e4ae5bb33b39baca7bf6bd8ceim\",\"99f5d4233d446a809b9937961c590766\",\"02ea2f9ef5d44f559fb66189b05f6769\",\"2a733ff390af9b44ecda4e8c4634d75v\"]');

/*Table structure for table `t_study_video` */

DROP TABLE IF EXISTS `t_study_video`;

CREATE TABLE `t_study_video` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `file_uid` varchar(32) DEFAULT NULL COMMENT '视频封面图片uid',
  `resource_sort_uid` varchar(255) DEFAULT NULL COMMENT '资源分类UID',
  `name` varchar(255) DEFAULT NULL COMMENT '视频名称',
  `summary` varchar(255) DEFAULT NULL COMMENT '视频简介',
  `content` varchar(255) DEFAULT NULL COMMENT '分类介绍',
  `baidu_path` varchar(255) DEFAULT NULL COMMENT '百度云完整路径',
  `click_count` varchar(255) DEFAULT NULL COMMENT '点击数',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `parent_uid` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='学习视频表';

/*Data for the table `t_study_video` */

insert  into `t_study_video`(`uid`,`file_uid`,`resource_sort_uid`,`name`,`summary`,`content`,`baidu_path`,`click_count`,`status`,`create_time`,`update_time`,`parent_uid`) values ('b396e08946a3571ab5de04dae522f255','dd34fc59ff945ca781cd46c23f7d7b65','cf2fa0b814489b81eec18f2e7f879f19','测试','测试','<p>测试</p>\n','测试','0',0,'2020-02-01 12:37:28','2020-10-29 09:18:06',NULL);

/*Table structure for table `t_subject` */

DROP TABLE IF EXISTS `t_subject`;

CREATE TABLE `t_subject` (
  `uid` varchar(32) NOT NULL COMMENT '主键',
  `subject_name` varchar(255) DEFAULT NULL COMMENT '专题名称',
  `summary` varchar(255) DEFAULT NULL COMMENT '简介',
  `file_uid` varchar(32) DEFAULT NULL COMMENT '封面图片UID',
  `click_count` int NOT NULL DEFAULT '0' COMMENT '专题点击数',
  `collect_count` int NOT NULL DEFAULT '0' COMMENT '专题收藏数',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `sort` int NOT NULL DEFAULT '0' COMMENT '排序字段',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='专题表';

/*Data for the table `t_subject` */

insert  into `t_subject`(`uid`,`subject_name`,`summary`,`file_uid`,`click_count`,`collect_count`,`status`,`sort`,`create_time`,`update_time`) values ('026b7d3453ff74d3d6a31a10abc39a48','Java学习笔记','测试简介','af067859a0dc43c83e57e5f5b80b8347',0,0,1,0,'2020-08-23 08:59:17','2021-01-23 10:19:59'),('136b547482b8734840cfaacb639e2496','专题管理15','专题管理15','5fae676476807d3e821423ffbc4583ef',0,0,1,0,'2020-08-23 15:57:20','2021-01-23 10:21:24'),('13e64cddf5efc221dfba1986cd049ad8','专题管理11','专题管理11','608e9648a6e902bafaf30a8392f16b6d',0,0,1,0,'2020-08-23 15:55:58','2021-01-23 10:21:17'),('199b78b4bbf7c8d6bab290f1e30e3507','专题4介绍','专题4介绍','51435e2fa2c45d5c4203278f958f8f52',0,0,1,0,'2020-08-31 08:25:17','2021-01-23 10:21:12'),('1a520cc46876d0e47c4af403f5ff318b','专题管理6','专题管理6','808e310c02f10be658c98ba1a5ab14dc',0,0,1,0,'2020-08-23 15:54:39','2021-01-23 10:21:08'),('1c71beeab364d1dfdf7f0cf5edafb0c5','专题管理5','专题管理5','f58d18eac69fc82f6a179c4f63717ffa',0,0,1,0,'2020-08-23 15:54:28','2021-01-23 10:20:33'),('21315371525ad12a991922329f205d5b','专题管理10','专题管理10','eb7801d1f8929420262a9a072a257099',0,0,1,0,'2020-08-23 15:55:47','2021-01-23 10:20:26'),('34bdc099224854aa3b9df4ffe56100fe','专题管理18','专题管理18','0051cb722bb1bd89e1ec57b5f970c287',0,0,1,0,'2020-08-23 15:58:06','2021-01-23 10:20:21'),('4488ba98b5ace6a837a1ecc244b6a2df','测试专题2','测试专题2','6d1c017a7a980c6f6852cb5a992424b5',0,0,1,0,'2020-08-23 15:37:59','2021-01-23 10:20:16'),('448f45e5432689ba706587aa759125d6','专题管理3','专题管理3','11a0ca657864b7e89b7262f22247274e',0,0,1,0,'2020-08-23 15:54:06','2021-01-23 10:20:11'),('58a6150e6d8bd5df877dee8d82fffc4d','测试图片2','测试图片2','235cc58878dd63148d05c0f491395a40',0,0,1,0,'2020-09-15 20:26:18','2021-01-23 10:20:06'),('615131f559b437909fefa86b21883f30','专题管理17','专题管理17','0051cb722bb1bd89e1ec57b5f970c287',0,0,1,0,'2020-08-23 15:57:44','2021-01-23 10:18:56'),('6c9db5a10516afe8035a445d1172fd01','专题管理4','专题管理4','ffe1c088d99304a0c3e40e8421ccffbd',0,0,0,0,'2020-08-23 15:54:18','2020-08-31 08:19:59'),('758a106b566a4799e2f0b24f52b35bdb','专题管理14','专题管理14','235cc58878dd63148d05c0f491395a40',0,0,1,0,'2020-08-23 15:56:53','2021-01-23 10:19:54'),('7eca5f77f692078824572f7a7d3a45f2','专题管理13','专题管理13','6d1c017a7a980c6f6852cb5a992424b5',0,0,1,1,'2020-08-23 15:56:41','2021-01-23 10:18:50'),('92b43c5787fd23424b567830fdbce6b8','专题管理9','专题管理9','c49a66b73b4deb5bfaaff02b6b23417a',0,0,1,0,'2020-08-23 15:55:38','2021-01-23 10:19:46'),('b9a9ec4db002857a98c5090a18109225','专题管理7','专题管理7','aae71f2c737d24e06a6501b44cd77a68',0,0,1,0,'2020-08-23 15:54:49','2021-01-23 10:19:39'),('d9325e8af33baead15ff318a12fa790d','123','123','d01453db03fbb44b4e6df0ee586a9d9f',0,0,1,0,'2020-09-15 20:26:34','2021-01-23 10:19:32'),('db235c13e4fd66356e38c4b9f874c78a','测试测试',NULL,'5fae676476807d3e821423ffbc4583ef',0,0,1,0,'2020-10-07 16:27:03','2021-01-23 10:19:26'),('e57ab21562973029e0324476948511f5','专题管理8','专题管理8','51435e2fa2c45d5c4203278f958f8f52',0,0,1,0,'2020-08-23 15:55:30','2021-01-23 10:19:20'),('f256e3a37941d998d8371798c1dff3fd','专题管理16','专题管理16','808e310c02f10be658c98ba1a5ab14dc',0,0,1,0,'2020-08-23 15:57:31','2021-01-23 10:19:15'),('ffb9f021c6822e16277fcb952c2adc26','专题管理19','专题管理19','f58d18eac69fc82f6a179c4f63717ffa',0,0,1,0,'2020-08-23 15:58:14','2021-01-23 10:19:07'),('ffd65140d630f6355a033a213bf0197b','专题管理12','专题管理12','eb7801d1f8929420262a9a072a257099',0,0,1,0,'2020-08-23 15:56:27','2021-01-23 10:19:01');

/*Table structure for table `t_subject_item` */

DROP TABLE IF EXISTS `t_subject_item`;

CREATE TABLE `t_subject_item` (
  `uid` varchar(32) NOT NULL COMMENT '主键',
  `subject_uid` varchar(32) NOT NULL COMMENT '专题uid',
  `blog_uid` varchar(32) NOT NULL COMMENT '博客uid',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `sort` int NOT NULL DEFAULT '0' COMMENT '排序字段',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='专题Item表';

/*Data for the table `t_subject_item` */

insert  into `t_subject_item`(`uid`,`subject_uid`,`blog_uid`,`status`,`sort`,`create_time`,`update_time`) values ('12028222cea8e1543f99dd8482bdbf66','7eca5f77f692078824572f7a7d3a45f2','7135efc7f536769efd0d0483c687ba07',1,0,'2020-11-01 15:45:14','2020-11-01 15:45:14'),('130065b278652653d52c104afc30c8b0','7eca5f77f692078824572f7a7d3a45f2','062ca3475e8193a4a81853a4bf41a8fa',1,0,'2020-11-01 15:45:14','2020-11-01 15:45:14'),('3a26e109f7a1dc08ee01c291c16ce864','7eca5f77f692078824572f7a7d3a45f2','9fa1fcd046b6cddb67c7859d050aeecd',1,2,'2020-11-01 15:45:14','2020-11-01 15:45:32'),('4da924dc6ec5e7d3203d9cc9647d5b0a','7eca5f77f692078824572f7a7d3a45f2','80d3eae77c16cea10e119b9f1a1da4c8',1,4,'2020-10-11 16:35:22','2020-11-01 15:45:32'),('4f305449bf0eba3bfc5b78e378865aab','026b7d3453ff74d3d6a31a10abc39a48','80d3eae77c16cea10e119b9f1a1da4c8',1,0,'2020-09-04 14:53:02','2020-09-04 14:53:02'),('6e7a470a098c9f81a1af10c4eef1635d','199b78b4bbf7c8d6bab290f1e30e3507','7a7ad19472d53147150eb7fdb0978bb2',1,0,'2020-10-07 16:36:41','2020-10-07 16:36:41'),('7005b920cd3131768b54518f9d80d613','7eca5f77f692078824572f7a7d3a45f2','11e0cace2148383e201439a682432d59',1,1,'2020-11-01 15:45:14','2020-11-01 15:45:32'),('7a8106f2a213995beec8f0d17f69d1ae','13e64cddf5efc221dfba1986cd049ad8','7a7ad19472d53147150eb7fdb0978bb2',1,0,'2020-10-07 16:35:42','2020-10-07 16:35:42'),('82e0fb0e5b5451a37c70f16af717ed29','7eca5f77f692078824572f7a7d3a45f2','9d7a6531cd55f415a0b26712f6fecc7a',1,0,'2020-11-01 15:45:14','2020-11-01 15:45:14'),('9065cfb24b5d04b54a6d8056e4bb73ef','7eca5f77f692078824572f7a7d3a45f2','c58083675437f407d73d3322ca01b995',1,0,'2020-11-01 15:45:14','2020-11-01 15:45:14'),('9da779fb5361008c0aa908d572646adb','199b78b4bbf7c8d6bab290f1e30e3507','80d3eae77c16cea10e119b9f1a1da4c8',1,0,'2020-10-07 16:36:41','2020-10-07 16:36:41'),('a6bb817a4338014a3c4bcc6f65615dea','7eca5f77f692078824572f7a7d3a45f2','635fc430e3378403a7d3f1e2a4e726a9',1,0,'2020-11-01 15:45:14','2020-11-01 15:45:14'),('b5437af7ae1bc21b50bb2876d449bdfb','7eca5f77f692078824572f7a7d3a45f2','7a7ad19472d53147150eb7fdb0978bb2',1,3,'2020-10-11 16:35:22','2020-11-01 15:45:32'),('cf108ab9e61de1c2ec0486bddfdac9e1','7eca5f77f692078824572f7a7d3a45f2','8dc52bd61e36fa56cfc7699815375572',1,5,'2020-11-01 15:45:14','2020-11-01 15:45:32'),('de8ea588b0601465d1afb68672463b19','136b547482b8734840cfaacb639e2496','7a7ad19472d53147150eb7fdb0978bb2',1,0,'2020-10-13 08:35:01','2020-10-13 08:35:01'),('dfa84fb363d659bf0416553aff3cb6db','136b547482b8734840cfaacb639e2496','80d3eae77c16cea10e119b9f1a1da4c8',1,0,'2020-10-13 08:35:01','2020-10-13 08:35:01'),('f104aacfb7485784d42956705da452ea','026b7d3453ff74d3d6a31a10abc39a48','7a7ad19472d53147150eb7fdb0978bb2',1,0,'2020-09-04 14:53:02','2020-09-04 14:53:02'),('f9104455cdece248058a4dd90d336dda','13e64cddf5efc221dfba1986cd049ad8','80d3eae77c16cea10e119b9f1a1da4c8',1,0,'2020-10-07 16:35:42','2020-10-07 16:35:42');

/*Table structure for table `t_sys_dict_data` */

DROP TABLE IF EXISTS `t_sys_dict_data`;

CREATE TABLE `t_sys_dict_data` (
  `uid` varchar(32) NOT NULL COMMENT '主键',
  `oid` int NOT NULL AUTO_INCREMENT COMMENT '自增键oid',
  `dict_type_uid` varchar(255) DEFAULT NULL COMMENT '字典类型UID',
  `dict_label` varchar(255) DEFAULT NULL COMMENT '字典标签',
  `dict_value` varchar(255) DEFAULT NULL COMMENT '字典键值',
  `css_class` varchar(255) DEFAULT NULL COMMENT '样式属性（其他样式扩展）',
  `list_class` varchar(255) DEFAULT NULL COMMENT '表格回显样式',
  `is_default` tinyint(1) DEFAULT '0' COMMENT '是否默认（1是 0否）,默认为0',
  `create_by_uid` varchar(32) DEFAULT NULL COMMENT '创建人UID',
  `update_by_uid` varchar(32) DEFAULT NULL COMMENT '最后更新人UID',
  `remark` varchar(255) DEFAULT NULL COMMENT '备注',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `is_publish` varchar(1) NOT NULL DEFAULT '1' COMMENT '是否发布(1:是，0:否)',
  `sort` int NOT NULL DEFAULT '0' COMMENT '排序字段',
  PRIMARY KEY (`uid`),
  KEY `oid` (`oid`)
) ENGINE=InnoDB AUTO_INCREMENT=81 DEFAULT CHARSET=utf8 COMMENT='字典数据表';

/*Data for the table `t_sys_dict_data` */

insert  into `t_sys_dict_data`(`uid`,`oid`,`dict_type_uid`,`dict_label`,`dict_value`,`css_class`,`list_class`,`is_default`,`create_by_uid`,`update_by_uid`,`remark`,`status`,`create_time`,`update_time`,`is_publish`,`sort`) values ('026b7d3453ff74d3d6a31a10abc39a47',10,'b0c90de7ebeb138e9a0487f6ba86275a','删除','3',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','删除操作',1,'2020-02-17 21:25:04','2020-02-17 21:25:04','1',0),('03bfb8183ef66828f7b04487bfbe35c7',27,'904965b87673d2dd762c9ac2b6726813','七牛云对象存储','1',NULL,'primary',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','图片显示优先级  七牛云',1,'2020-02-18 09:45:27','2020-10-22 10:04:42','1',0),('03ebe4234670f7cfeb0b19c8794bdaea',19,'e582ff889b2e64fffed194737d78fa98','二级推荐','2',NULL,'success',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','推荐等级 二级推荐',1,'2020-02-17 22:05:34','2020-02-17 22:05:34','1',3),('0cb01485ad75f7ec37a29d388e7d6013',7,'e2fa1d1024a2570f13ec7f684c08bd25','女','2',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','性别 女',1,'2020-02-16 20:49:56','2020-02-16 20:49:56','1',0),('0d5183928308f7945bfb300f873b1f1e',44,'147b16259a5f482e86b75893d09e10d4','上架','1',NULL,'success',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','友链状态 上线中',1,'2020-03-15 08:50:28','2020-03-15 08:50:28','1',0),('0f2833c5c24480bab9c4e3e5a815002a',70,'904965b87673d2dd762c9ac2b6726813','Minio对象存储','2',NULL,'primary',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','使用Minio构建本地对象存储服务',1,'2020-10-22 10:04:02','2020-10-22 10:05:39','1',0),('0fb5f67e224f91638e71935eb6a38467',21,'e582ff889b2e64fffed194737d78fa98','四级推荐','4',NULL,'primary',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','推荐等级 四级推荐',1,'2020-02-17 22:06:13','2020-02-17 22:06:13','1',1),('10e538229ea9ee8552672ed1cb5575e0',61,'5c956299119cbbcbcf2009558ce503d0','是','1',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','是否跳转外链  是',1,'2020-07-03 21:20:09','2020-07-03 21:43:33','1',1),('1e666c133099dc361ec0dbaa8b6203cc',56,'80dfd5fa0b8226c8c0102da80cc6fedb','三级菜单','3',NULL,'info',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单管理 三级菜单  按钮',1,'2020-03-21 18:02:22','2020-03-21 18:02:22','1',0),('2388fa41c446c4f870b6010bc404473f',31,'94ba24e6adb46cd094bb2217f1028285','原创','1',NULL,'success',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','原创博客',1,'2020-02-19 09:54:52','2020-02-19 09:54:52','1',1),('23b55a610d84470e052e09abf110dccc',17,'e582ff889b2e64fffed194737d78fa98','正常','0',NULL,'info',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','推荐等级 正常',1,'2020-02-17 22:01:56','2020-02-17 22:01:56','1',5),('24f6c115ecfbb9c1818f9603990c8971',80,'f1929a18eac0a6dfa9007aa8024899a2','Solr搜索','2',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','搜索模式：Solr搜索',1,'2021-09-11 16:18:17','2021-09-11 16:18:17','1',0),('2ebdf915ac4003d4ed5e2b4c78038acf',59,'eaef85e78f7f88bd0efd428f32033f2f','博客详情','BLOG_INFO',NULL,'warning',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论来源 博客详情',1,'2020-04-04 21:27:11','2020-04-04 21:27:11','1',0),('30a04bbb52add36a22211f6b93fc882e',13,'5ce79da03dbedef627e8c6fb002b1a29','是','1',NULL,'success',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','系统是否  是',1,'2020-02-17 21:56:35','2020-02-17 21:56:35','1',1),('3151f138e5c2858112da60b70a699469',23,'ba386b930c4a3580357b1df8a2e24c8a','华北','z1',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','存储区域 华北',1,'2020-02-17 23:37:31','2020-02-17 23:37:31','1',0),('3555747751ef69d66109280797dd2859',57,'eaef85e78f7f88bd0efd428f32033f2f','留言板','MESSAGE_BOARD',NULL,'primary',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论来源 留言板',1,'2020-04-04 21:25:34','2020-04-04 21:25:34','1',0),('39cf99bab1bd3ca0683424f99f1a9fee',26,'ba386b930c4a3580357b1df8a2e24c8a','东南亚','as0',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','存储区域 东南亚',1,'2020-02-17 23:38:32','2020-02-17 23:38:32','1',0),('3b38f16f39b491acb52d6a3a2be6e9c6',58,'eaef85e78f7f88bd0efd428f32033f2f','关于我','ABOUT',NULL,'success',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论来源 关于我',1,'2020-04-04 21:26:14','2020-04-04 21:26:14','1',0),('3f47a55713b1ea101b7f38af0fe1efa9',37,'20a4dd3551aa6264f7e43c2274820763','GITEE','GITEE',NULL,'primary',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','账号类型 Gitee',1,'2020-03-10 12:09:07','2020-03-10 12:09:07','1',0),('40b08947b62bc34793b0655c944d2eec',34,'20a4dd3551aa6264f7e43c2274820763','Gitee','Gitee',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','账号类型 Gitee',0,'2020-03-10 11:59:26','2020-03-10 11:59:26','1',0),('416abb075fd0f8d4a512d204121c15b2',15,'f4c0b7c14e1857a8453af396e1537556','发布','1',NULL,'success',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','发布状态  上架',1,'2020-02-17 22:00:01','2020-02-17 22:00:01','1',1),('431eb64cba73239ebd01b0b823e5f36f',64,'b96483ba6cd5122b2d33981681db8b1c','否','0',NULL,'info',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','参数类型 是否内置  否',1,'2020-07-21 17:16:16','2020-07-21 17:16:16','1',0),('464f9e4a13d53494bff10df5e966b0cf',39,'397114076512e421458806e5d0050af6','禁言','0',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论状态 禁言',1,'2020-03-10 13:01:20','2020-03-10 13:01:20','1',0),('47559bf170909797709381e3b8c1a796',38,'20a4dd3551aa6264f7e43c2274820763','GITHUB','GITHUB',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','账号类型 Github',1,'2020-03-10 12:09:20','2020-03-10 12:09:20','1',0),('490b20a757bc11fbb0b089a91c169830',14,'5ce79da03dbedef627e8c6fb002b1a29','否','0',NULL,'warning',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','系统是否  否',1,'2020-02-17 21:56:47','2020-02-17 21:56:47','1',0),('49d73b6c112e6d3233e11cc97c4ae231',71,'a7be558b1c601b94126cc6ab5d5d008d','博客','0',NULL,'default',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','文章类型：博客',1,'2020-11-07 10:15:56','2020-11-07 10:19:05','1',1),('4a3e898c54f9ddcfa52a5c40e5a647dd',45,'147b16259a5f482e86b75893d09e10d4','下架','2',NULL,'warning',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','友链状态  已下架',1,'2020-03-15 08:52:20','2020-03-15 08:52:20','1',0),('4a90a207068f8044c65cae80fbbb7309',62,'5c956299119cbbcbcf2009558ce503d0','否','0',NULL,'info',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','是否跳转外链  否',1,'2020-07-03 21:20:22','2020-07-03 21:43:26','1',0),('4dcc00f8566473020608d9609a1686e5',46,'6472ff63369e0118d2e0b907437d631d','已开启','0',NULL,'warning',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','反馈状态 已开启',1,'2020-03-16 09:20:38','2020-03-16 09:20:38','1',4),('4f243578b444646a6bc1349a10d1be9f',8,'b0c90de7ebeb138e9a0487f6ba86275a','新增','1',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','新增操作',1,'2020-02-17 21:24:29','2020-02-17 21:24:29','1',0),('5130d2cf209bcf02e97322491b4e611e',4,'861dfd0f77c8b053d40e020f23702df4','隐藏','0',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单状态 隐藏',1,'2020-02-16 13:23:39','2020-02-16 13:23:39','1',0),('57968d6ea419bc4868ef8a4518c1f90c',69,'a9eade09410e392988140adb1710e447','超时','5000_10000000',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','接口耗时  超时  5000_100000',1,'2020-09-22 20:15:46','2020-09-22 20:35:19','1',0),('5b6f8111b8296906b887ec5d4420721b',52,'4d4a35b3dfc16d23b65a82073c88c0e6','博主','2',NULL,'danger',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','用户标签  博主',1,'2020-03-18 09:25:33','2020-03-18 09:25:33','1',0),('5f554b9bae92a1d630a1b89b8f88bc65',47,'6472ff63369e0118d2e0b907437d631d','进行中','1',NULL,'primary',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','反馈状态 进行中',1,'2020-03-16 09:20:56','2020-03-16 09:20:56','1',2),('614a593ba613eb6f5c591f2d2430538a',49,'6472ff63369e0118d2e0b907437d631d','已拒绝','3',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','反馈状态 已拒绝',1,'2020-03-16 09:21:33','2020-03-16 09:21:33','1',1),('66aa82856368c573e0bfe012ec6d0ab6',22,'ba386b930c4a3580357b1df8a2e24c8a','华东','z0',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','存储区域 华东',1,'2020-02-17 23:37:12','2020-02-17 23:37:12','1',0),('6caab28eb72a7331ecac4d01c616f023',67,'a9eade09410e392988140adb1710e447','正常','0_2000',NULL,'primary',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','接口耗时  正常  0_2000',1,'2020-09-22 20:14:36','2020-09-22 20:25:39','1',0),('6e19e89f593b2e378ae98e209972004b',51,'4d4a35b3dfc16d23b65a82073c88c0e6','管理员','1',NULL,'warning',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','用户标签 管理员',1,'2020-03-18 09:25:09','2020-03-18 09:25:09','1',0),('71bb6611f581413baa7b654dd271deca',16,'f4c0b7c14e1857a8453af396e1537556','下架','0',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','发布状态  下架',1,'2020-02-17 22:00:15','2020-02-17 22:00:15','1',0),('763bb526d9aa6ebd5bc0b7db69548c57',30,'80dfd5fa0b8226c8c0102da80cc6fedb','二级菜单','2',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单等级 二级菜单',1,'2020-02-19 08:45:53','2020-02-19 08:45:53','1',2),('78a4a2573f5fe9bd22813a9e4b1f38a8',60,'20a4dd3551aa6264f7e43c2274820763','QQ','QQ',NULL,'primary',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','账号类型 QQ',1,'2020-05-28 09:13:00','2020-05-28 09:13:09','1',0),('7a88a80ab90ed03c86ec3276bd9748cb',65,'6634c313a8883f6c876806a15b9cc4b1','富文本编辑器','0',NULL,'primary',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','富文本编辑器Markdown',1,'2020-08-29 08:14:32','2020-08-29 08:47:11','1',1),('7c99aecb7b9b50c06b1c643c19568a4d',25,'ba386b930c4a3580357b1df8a2e24c8a','北美','na0',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','存储区域 北美',1,'2020-02-17 23:38:16','2020-02-17 23:38:16','1',0),('82d7c4c2fcbd2d3b9aa856ac33420c45',2,'861dfd0f77c8b053d40e020f23702df4','显示','1',NULL,NULL,1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单状态 显示',1,'2020-02-16 12:40:51','2020-10-15 10:17:39','1',1),('868d1b0c1df6915a4a6ca574b46d4ac8',18,'e582ff889b2e64fffed194737d78fa98','一级推荐','1',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','推荐等级 一级推荐',1,'2020-02-17 22:05:19','2020-02-17 22:05:19','1',4),('8cb9f3d3fa091a581a333102dec732ab',20,'e582ff889b2e64fffed194737d78fa98','三级推荐','3',NULL,'warning',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','推荐等级 三级推荐',1,'2020-02-17 22:05:55','2020-02-17 22:05:55','1',2),('9288f39aa07aee842952fbc7dd1fe4a2',66,'6634c313a8883f6c876806a15b9cc4b1','Markdown编辑器','1',NULL,'warning',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','Markdown编辑器',1,'2020-08-29 08:14:59','2020-08-29 08:14:59','1',0),('95b43081a93a53727b0474098242d64c',33,'20a4dd3551aa6264f7e43c2274820763','Github','Github',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','账号类型 Github',0,'2020-03-10 11:59:12','2020-03-10 11:59:12','1',0),('964945d3c156ea7dcc64b13741b02923',63,'b96483ba6cd5122b2d33981681db8b1c','是','1',NULL,'primary',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','参数类型  是否内置  是',1,'2020-07-21 17:15:49','2020-07-21 17:16:29','1',1),('9673bcc91bb2f22c31381c8364d4726b',9,'b0c90de7ebeb138e9a0487f6ba86275a','编辑','2',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','编辑操作',1,'2020-02-17 21:24:45','2020-02-17 21:24:45','1',0),('a03e72c6f457bb282d3a7f62ff5f4598',55,'6bf52bf12dce9d0bc56f2d0e10ceccbe','按钮','1',NULL,'warning',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单类型 按钮',1,'2020-03-21 09:28:32','2020-03-21 09:28:32','1',0),('a94dadf4a2a5c003c3bb38dd6075ebe3',35,'20a4dd3551aa6264f7e43c2274820763','Mogu','Mogu',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','账号类型 蘑菇博客',0,'2020-03-10 11:59:53','2020-03-10 11:59:53','1',0),('ac72222bb8ac26959460f87328c97d59',24,'ba386b930c4a3580357b1df8a2e24c8a','华南','z2',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','存储区域 华南',1,'2020-02-17 23:38:00','2020-02-17 23:38:00','1',0),('b0e0e31c66fa52f481ea1982348ee703',12,'e7a80c0adce2b69035dfa505d998ba74','关闭','0',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','系统开关 关闭',1,'2020-02-17 21:50:22','2020-02-17 21:50:22','1',0),('b8764efefb7a78d4a2d84466daf34084',40,'397114076512e421458806e5d0050af6','正常','1',NULL,'success',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论状态 正常',1,'2020-03-10 13:01:35','2020-03-10 13:01:35','1',0),('bc852b3bbec6b9641a508fa32c49a40d',54,'6bf52bf12dce9d0bc56f2d0e10ceccbe','菜单','0',NULL,'success',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单类型  菜单',1,'2020-03-21 09:28:13','2020-03-21 09:28:13','1',1),('bc9c1933052d66f8424b09a6869972d0',79,'f1929a18eac0a6dfa9007aa8024899a2','ES搜素','1',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','搜索模式：开启ElasticSearch全文检索',1,'2021-09-11 15:27:36','2021-09-11 16:17:54','1',0),('bd14282cf7e3db5831e1b9e7e899024e',42,'d3d9f373ae0c344fa0a24eadd23a191b','评论','0',NULL,'warning',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论类型 评论',1,'2020-03-15 08:49:18','2020-05-14 18:50:12','1',0),('c027f76096eb89ee6364b25f7b366388',78,'f1929a18eac0a6dfa9007aa8024899a2','SQL搜索','0',NULL,NULL,1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','搜索模式：SQL搜索',1,'2021-09-11 15:27:00','2021-09-11 15:27:00','1',0),('c3299bf019caeff6690e90c358e67e43',53,'861dfd0f77c8b053d40e020f23702df4','123','123',NULL,NULL,0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333',NULL,0,'2020-03-20 11:51:09','2020-03-20 11:51:09','1',0),('ca66f4c186c3ceb69057ae0432bd43d6',11,'e7a80c0adce2b69035dfa505d998ba74','开启','1',NULL,'primary',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','系统开关 开启',1,'2020-02-17 21:50:06','2020-02-17 21:50:06','1',1),('cc7cc52fbe8b7b4c89a6f1670d09c060',6,'e2fa1d1024a2570f13ec7f684c08bd25','男','1',NULL,NULL,1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','性别 男',1,'2020-02-16 20:49:40','2020-02-16 20:49:40','1',2),('d350119289186d520e0ccbb9b320e07a',48,'6472ff63369e0118d2e0b907437d631d','已完成','2',NULL,'success',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','反馈状态 已完成',1,'2020-03-16 09:21:13','2020-03-16 09:21:13','1',3),('d3fe3ce87880595aad04b3e8077da223',32,'94ba24e6adb46cd094bb2217f1028285','转载','0',NULL,'info',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','转载博客',1,'2020-02-19 09:55:09','2020-02-19 09:55:09','1',0),('dc3c52a18d8ad99b83337751187e7359',29,'80dfd5fa0b8226c8c0102da80cc6fedb','一级菜单','1',NULL,'success',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单等级 一级菜单',1,'2020-02-19 08:45:31','2020-02-19 08:45:31','1',3),('e42847ffae93e9f494dfc6cc65eaedce',68,'a9eade09410e392988140adb1710e447','一般','2000_5000',NULL,'warning',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','接口耗时 一般  2000_5000',1,'2020-09-22 20:14:57','2020-09-22 20:25:30','1',0),('e6d918372233a8b48b9609fa70326c89',43,'147b16259a5f482e86b75893d09e10d4','申请','0',NULL,'danger',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','友链状态  申请中',1,'2020-03-15 08:49:57','2020-03-15 08:49:57','1',0),('e7dbddd726ae81086364e49abb12c539',41,'d3d9f373ae0c344fa0a24eadd23a191b','点赞','1',NULL,'success',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论类型  点赞',1,'2020-03-15 08:49:02','2020-03-15 08:49:02','1',0),('e9d6bc86f8ffa4e8dcf85b98069211dd',28,'904965b87673d2dd762c9ac2b6726813','本地文件存储','0',NULL,'primary',1,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','图片显示优先级  本地',1,'2020-02-18 09:45:45','2020-10-22 10:04:36','1',0),('f3d2ded0e31673ce545b905aacce627f',72,'a7be558b1c601b94126cc6ab5d5d008d','推广','1',NULL,'default',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','文章类型：推广',1,'2020-11-07 10:16:16','2020-11-07 10:16:16','1',0),('f6fdd4f421d31989b57d932422ec5528',50,'4d4a35b3dfc16d23b65a82073c88c0e6','普通用户','0',NULL,'info',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','用户标签 普通用户',1,'2020-03-18 09:24:40','2020-03-18 09:24:40','1',0),('f963505ec3462cb63f9a590c9df08ac8',36,'20a4dd3551aa6264f7e43c2274820763','MOGU','MOGU',NULL,'success',0,'1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','账号类型 蘑菇博客',1,'2020-03-10 12:08:50','2020-03-10 12:08:50','1',0);

/*Table structure for table `t_sys_dict_type` */

DROP TABLE IF EXISTS `t_sys_dict_type`;

CREATE TABLE `t_sys_dict_type` (
  `uid` varchar(32) NOT NULL COMMENT '主键',
  `oid` int NOT NULL AUTO_INCREMENT COMMENT '自增键oid',
  `dict_name` varchar(255) DEFAULT NULL COMMENT '字典名称',
  `dict_type` varchar(255) DEFAULT NULL COMMENT '字典类型',
  `create_by_uid` varchar(32) NOT NULL COMMENT '创建人UID',
  `update_by_uid` varchar(32) NOT NULL COMMENT '最后更新人UID',
  `remark` varchar(255) DEFAULT NULL COMMENT '备注',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `is_publish` varchar(1) NOT NULL DEFAULT '1' COMMENT '是否发布(1:是，0:否)',
  `sort` int NOT NULL DEFAULT '0' COMMENT '排序字段',
  PRIMARY KEY (`uid`),
  KEY `oid` (`oid`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 COMMENT='字典类型表';

/*Data for the table `t_sys_dict_type` */

insert  into `t_sys_dict_type`(`uid`,`oid`,`dict_name`,`dict_type`,`create_by_uid`,`update_by_uid`,`remark`,`status`,`create_time`,`update_time`,`is_publish`,`sort`) values ('147b16259a5f482e86b75893d09e10d4',18,'友链状态','sys_link_status','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','友链状态',1,'2020-03-15 08:47:56','2020-03-15 08:47:56','1',0),('20a4dd3551aa6264f7e43c2274820763',15,'用户账号来源','sys_account_source','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','用户账号来源',1,'2020-03-10 11:57:40','2020-03-10 12:12:45','1',0),('397114076512e421458806e5d0050af6',16,'评论状态','sys_comment_status','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论状态',1,'2020-03-10 13:00:24','2020-03-10 13:00:24','1',0),('4d4a35b3dfc16d23b65a82073c88c0e6',20,'用户标签','sys_user_tag','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','用户标签：普通用户，管理员，博主',1,'2020-03-18 09:23:56','2020-03-18 09:24:07','1',0),('5c907ad864bc904851bde2506851cb88',8,'通知类型','sys_notice_type','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','通知类型列表',1,'2020-02-17 21:40:53','2020-02-17 21:40:53','1',0),('5c956299119cbbcbcf2009558ce503d0',23,'跳转外链','sys_jump_external','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','是否跳转外部链接',1,'2020-07-03 21:19:39','2020-07-03 21:19:39','1',0),('5ce79da03dbedef627e8c6fb002b1a29',7,'系统是否','sys_yes_no','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','系统是否列表',1,'2020-02-17 21:40:24','2020-02-17 23:28:38','1',0),('6472ff63369e0118d2e0b907437d631d',19,'反馈状态','sys_feedback_status','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','反馈状态',1,'2020-03-16 09:20:06','2020-03-16 09:20:06','1',0),('6634c313a8883f6c876806a15b9cc4b1',25,'编辑器模式','sys_editor_modal','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','用于选择编辑器是富文本或者markdown',1,'2020-08-29 08:13:46','2020-08-29 08:13:46','1',0),('6bf52bf12dce9d0bc56f2d0e10ceccbe',21,'菜单类型','sys_menu_type','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单类型',1,'2020-03-21 09:27:49','2020-03-21 09:27:49','1',0),('80dfd5fa0b8226c8c0102da80cc6fedb',14,'菜单等级','sys_menu_level','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','菜单管理 菜单等级',1,'2020-02-19 08:45:01','2020-02-19 08:45:01','1',0),('861dfd0f77c8b053d40e020f23702df4',3,'显示状态','sys_show_hide','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','显示状态',1,'2020-02-16 10:48:38','2020-10-15 10:20:40','1',3),('904965b87673d2dd762c9ac2b6726813',13,'图片显示优先级','sys_picture_priority','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','七牛云、本地、Minio显示优先级',1,'2020-02-18 09:44:59','2020-10-22 09:59:08','1',0),('94ba24e6adb46cd094bb2217f1028285',11,'原创状态','sys_original_status','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','原创状态列表',1,'2020-02-17 21:45:52','2020-02-17 23:31:37','1',1),('a7be558b1c601b94126cc6ab5d5d008d',27,'文章类型','sys_blog_type','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','文章类型：博客，推广',1,'2020-11-07 10:14:58','2020-11-07 10:14:58','1',0),('a9eade09410e392988140adb1710e447',26,'接口耗时','sys_spend_time','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','日志接口耗时区间',1,'2020-09-22 20:13:17','2020-09-22 20:13:52','1',0),('b0c90de7ebeb138e9a0487f6ba86275a',5,'操作类型','sys_oper_type','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','操作类型',1,'2020-02-16 12:56:40','2020-02-16 12:56:40','1',0),('b96483ba6cd5122b2d33981681db8b1c',24,'参数类型','sys_params_type','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','参数类型',1,'2020-07-21 17:14:50','2020-07-21 17:14:50','1',0),('ba386b930c4a3580357b1df8a2e24c8a',12,'存储区域','sys_storage_region','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','七牛云存储区域',1,'2020-02-17 23:36:21','2020-02-17 23:36:21','1',0),('d3d9f373ae0c344fa0a24eadd23a191b',17,'评论类型','sys_comment_type','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论类型',1,'2020-03-15 08:47:37','2020-03-15 08:47:37','1',0),('e2fa1d1024a2570f13ec7f684c08bd25',2,'用户性别','sys_user_sex','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','用户性别列表',1,'2020-02-16 10:40:49','2020-02-17 23:31:49','1',2),('e582ff889b2e64fffed194737d78fa98',9,'推荐等级','sys_recommend_level','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','推荐等级列表',1,'2020-02-17 21:41:59','2020-02-17 21:41:59','1',0),('e7a80c0adce2b69035dfa505d998ba74',6,'系统开关','sys_normal_disable','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','系统开关列表',1,'2020-02-17 21:38:55','2020-02-17 21:40:00','1',0),('eaef85e78f7f88bd0efd428f32033f2f',22,'评论来源','sys_comment_source','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','评论来源',1,'2020-04-04 21:24:55','2020-04-04 21:24:55','1',0),('f1929a18eac0a6dfa9007aa8024899a2',30,'搜索模式','sys_search_model','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','搜索模式：SQL搜索、全文检索',1,'2021-09-11 15:26:35','2021-09-11 15:26:35','1',0),('f4c0b7c14e1857a8453af396e1537556',10,'发布状态','sys_publish_status','1f01cd1d2f474743b241d74008b12333','1f01cd1d2f474743b241d74008b12333','发布状态列表',1,'2020-02-17 21:44:09','2020-02-17 21:44:09','1',0);

/*Table structure for table `t_sys_log` */

DROP TABLE IF EXISTS `t_sys_log`;

CREATE TABLE `t_sys_log` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `user_name` varchar(255) NOT NULL COMMENT '用户名',
  `admin_uid` varchar(32) DEFAULT NULL COMMENT '管理员uid',
  `ip` varchar(50) DEFAULT NULL COMMENT '请求ip地址',
  `url` varchar(255) DEFAULT NULL COMMENT '请求url',
  `type` varchar(32) DEFAULT NULL COMMENT '请求方式',
  `class_path` varchar(255) DEFAULT NULL COMMENT '请求类路径',
  `method` varchar(32) DEFAULT NULL COMMENT '请求方法名',
  `params` longtext COMMENT '请求参数',
  `operation` varchar(32) DEFAULT NULL COMMENT '描述',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `ip_source` varchar(255) DEFAULT NULL COMMENT 'ip来源',
  `spend_time` int DEFAULT '0' COMMENT '方法请求花费的时间',
  PRIMARY KEY (`uid`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_sys_log` */

insert  into `t_sys_log`(`uid`,`user_name`,`admin_uid`,`ip`,`url`,`type`,`class_path`,`method`,`params`,`operation`,`status`,`create_time`,`update_time`,`ip_source`,`spend_time`) values ('05c3c9f284c36c4b9503bbcb6970d7b1','admin','1f01cd1d2f474743b241d74008b12333','0:0:0:0:0:0:0:1','/systemConfig/editSystemConfig','POST','com.moxi.mogublog.admin.restapi.SystemConfigRestApi','editSystemConfig','{\"systemConfigVO\":SystemConfigVO(qiNiuAccessKey=, qiNiuSecretKey=, qiNiuBucket=, qiNiuArea=, uploadQiNiu=0, uploadLocal=1, picturePriority=0, contentPicturePriority=0, localPictureBaseUrl=http://47.111.4.185:8600/, qiNiuPictureBaseUrl=, email=123456789@qq.com, emailUserName=null, emailPassword=, smtpAddress=null, smtpPort=, startEmailNotification=0, editorModel=0, themeColor=#172524, uploadMinio=0, minioEndPoint=, minioAccessKey=, minioSecretKey=, minioBucket=, minioPictureBaseUrl=, dashboardNotification=<p>欢迎来到蘑菇博客项目，开源项目离不开大家的支持，希望小伙伴能随手点赞一下，你的点赞就是我维护的动力~</p>\n\n<p>项目源码：<a href=\"https://gitee.com/moxi159753/mogu_blog_v2\"><span style=\"color:#0000cd\">点我传送</span></a>，项目文档：<a href=\"http://moxi159753.gitee.io/mogu_blog_doc/#/\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a>，项目官网：<a href=\"http://www.moguit.cn/#/\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a>，学习笔记：<a href=\"https://gitee.com/moxi159753/LearningNotes\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a></p>\n\n<p>蘑菇博客使用了一些监控的Spring Cloud组件，但是并不一定都需要部署，必须启动的服务包含</p>\n\n<p><code>nacos</code>，<code>nginx</code>，<code>rabbitmq</code>，&nbsp;<code>redis</code>，<code>mysql</code>，<code>mogu-gateway</code>,&nbsp;&nbsp;<code>mogu-sms</code>，<code>mogu-picture</code>，&nbsp;<code>mogu-web</code>,&nbsp;<code>mogu-admin</code></p>\n\n<p>其它的服务都可以不启动，也不影正常使用，可以根据自身服务器配置来启动</p>\n\n<p>最低配置：1核2G&nbsp;<code>需要开启虚拟内存</code></p>\n\n<p>推荐配置：2核4G 【双十二特惠】</p>\n\n<p>双12活动开始喽~，本次优惠力度非常大，如果有需求的，欢迎点击下面链接购买</p>\n\n<p>【阿里云】云服务器双12狂欢特惠，1核2G 5M轻量级应用服务器114元/年【博主使用】&nbsp;<a href=\"https://www.aliyun.com/minisite/goods?userCode=w7aungxw\"><span style=\"color:#0000ff\">点我传送</span></a></p>\n\n<p>【腾讯云】云产品限时秒杀，爆款1核2G云服务器，首年99元（老用户重新用微信QQ注册即可）&nbsp;<a href=\"https://curl.qcloud.com/zry6xub9\"><span style=\"color:#0000ff\">点我进入</span></a></p>\n\n<p>服务器和域名等服务的购买和续费都会产生一定的费用，为了维持项目的正常运作，如果觉得本项目对您有帮助的话</p>\n\n<p>欢迎朋友能够给予一些支持，非常感谢~（ps.. 小伙伴赞赏的时候可以备注一下下~）</p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\n	<tbody>\n		<tr>\n			<td style=\"text-align:center\">微信</td>\n			<td style=\"text-align:center\">支付宝</td>\n		</tr>\n		<tr>\n			<td><img alt=\"\" src=\"http://demopicture.moguit.cn//blog/admin/png/2020/12/11/1607690861847.png\" /></td>\n			<td><img alt=\"\" src=\"http://demopicture.moguit.cn//blog/admin/png/2020/12/11/1607690798874.png\" /></td>\n		</tr>\n	</tbody>\n</table>\n, openDashboardNotification=1)}','修改系统配置',1,'2021-03-13 15:40:53','2021-03-13 15:40:53',NULL,512),('10f2881e76c54d49701c176b96b42b38','mogu2018','7621746caa93ce605e2de7143a3787b5','61.174.209.98','/tag/stick','POST','com.moxi.mogublog.admin.restapi.TagRestApi','stick','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"tagVO\":TagVO(content=null, sort=null)}','置顶标签',1,'2021-02-06 11:21:03','2021-02-06 11:21:03','中国|浙江省|绍兴市|电信',345),('1314bb348ecc8c10ab56b73c5c1b2603','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=测试图片2, summary=测试图片2, fileUid=235cc58878dd63148d05c0f491395a40, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:20:06','2021-01-23 10:20:06','中国|江西省|赣州市|移动',45),('2275ecf26e7d6a8d48b10a57f5c96e6d','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/systemConfig/editSystemConfig','POST','com.moxi.mogublog.admin.restapi.SystemConfigRestApi','editSystemConfig','{\"systemConfigVO\":SystemConfigVO(qiNiuAccessKey=, qiNiuSecretKey=, qiNiuBucket=, qiNiuArea=, uploadQiNiu=0, uploadLocal=1, picturePriority=0, localPictureBaseUrl=http://47.111.4.185:8600/, qiNiuPictureBaseUrl=, email=123456789@qq.com, emailUserName=null, emailPassword=, smtpAddress=null, smtpPort=, startEmailNotification=0, editorModel=0, themeColor=#5D5DF4, uploadMinio=0, minioEndPoint=, minioAccessKey=, minioSecretKey=, minioBucket=, minioPictureBaseUrl=, dashboardNotification=<p>欢迎来到蘑菇博客项目，开源项目离不开大家的支持，希望小伙伴能随手点赞一下，你的点赞就是我维护的动力~</p>\n\n<p>项目源码：<a href=\"https://gitee.com/moxi159753/mogu_blog_v2\"><span style=\"color:#0000cd\">点我传送</span></a>，项目文档：<a href=\"http://moxi159753.gitee.io/mogu_blog_doc/#/\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a>，项目官网：<a href=\"http://www.moguit.cn/#/\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a>，学习笔记：<a href=\"https://gitee.com/moxi159753/LearningNotes\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a></p>\n\n<p>蘑菇博客使用了一些监控的Spring Cloud组件，但是并不一定都需要部署，必须启动的服务包含</p>\n\n<p><code>nacos</code>，<code>nginx</code>，<code>rabbitmq</code>，&nbsp;<code>redis</code>，<code>mysql</code>，<code>mogu-gateway</code>,&nbsp;&nbsp;<code>mogu-sms</code>，<code>mogu-picture</code>，&nbsp;<code>mogu-web</code>,&nbsp;<code>mogu-admin</code></p>\n\n<p>其它的服务都可以不启动，也不影正常使用，可以根据自身服务器配置来启动</p>\n\n<p>最低配置：1核2G&nbsp;<code>需要开启虚拟内存</code></p>\n\n<p>推荐配置：2核4G 【双十二特惠】</p>\n\n<p>双12活动开始喽~，本次优惠力度非常大，如果有需求的，欢迎点击下面链接购买</p>\n\n<p>【阿里云】云服务器双12狂欢特惠，1核2G 5M轻量级应用服务器114元/年【博主使用】&nbsp;<a href=\"https://www.aliyun.com/minisite/goods?userCode=w7aungxw\"><span style=\"color:#0000ff\">点我传送</span></a></p>\n\n<p>【腾讯云】云产品限时秒杀，爆款1核2G云服务器，首年99元（老用户重新用微信QQ注册即可）&nbsp;<a href=\"https://curl.qcloud.com/zry6xub9\"><span style=\"color:#0000ff\">点我进入</span></a></p>\n\n<p>服务器和域名等服务的购买和续费都会产生一定的费用，为了维持项目的正常运作，如果觉得本项目对您有帮助的话</p>\n\n<p>欢迎朋友能够给予一些支持，非常感谢~（ps.. 小伙伴赞赏的时候可以备注一下下~）</p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\n	<tbody>\n		<tr>\n			<td style=\"text-align:center\">微信</td>\n			<td style=\"text-align:center\">支付宝</td>\n		</tr>\n		<tr>\n			<td><img alt=\"\" src=\"http://demopicture.moguit.cn//blog/admin/png/2020/12/11/1607690861847.png\" /></td>\n			<td><img alt=\"\" src=\"http://demopicture.moguit.cn//blog/admin/png/2020/12/11/1607690798874.png\" /></td>\n		</tr>\n	</tbody>\n</table>\n, openDashboardNotification=1)}','修改系统配置',1,'2021-01-23 10:17:22','2021-01-23 10:17:22','中国|江西省|赣州市|移动',295),('2a184a2e629d5fc37ce2ae12e4ed0c79','mogu2018','7621746caa93ce605e2de7143a3787b5','122.236.136.91','/blog/editBatch','POST','com.moxi.mogublog.admin.restapi.BlogRestApi','editBatch','{\"blogVOList\":[BlogVO(title=【阿里云】云服务器双11狂欢特惠，1核2G 最低仅需84.97元/年 , summary=【阿里云】云服务器双11狂欢特惠，1核2G 最低仅需84.97元/年 , content=<p>【阿里云】云服务器双11狂欢特惠，1核2G 最低仅需84.97元/年&nbsp; <a href=\"https://www.aliyun.com/1111/home?userCode=w7aungxw\" target=\"_blank\">点我传送</a></p>\n, tagUid=5626932d452c2ad863d9b3cb0b69d22d, blogSortUid=337806254f9c42999043de5c5ee09e77, fileUid=0051cb722bb1bd89e1ec57b5f970c287, adminUid=1f01cd1d2f474743b241d74008b12333, isPublish=1, isOriginal=1, author=陌溪, articlesPart=蘑菇博客, level=2, type=1, outsideLink=https://www.aliyun.com/1111/home?userCode=w7aungxw, tagList=[Tag(content=学习笔记, clickCount=216, sort=5)], photoList=[http://47.111.4.185:8600//blog/admin/jfif/2020/12/11/1607672771699.jfif], blogSort=BlogSort(sortName=技术新闻, content=发现世界的每一天, clickCount=58, sort=0), praiseCount=null, copyright=null, levelKeyword=null, useSort=0, sort=2, openComment=1),BlogVO(title=【腾讯云】双十一活动2核4G 100G盘700元/3年, summary=【腾讯云】双十一活动2核4G 100G盘700元/3年, content=<p>【腾讯云】双十一活动2核4G 100G盘700元/3年&nbsp; <a href=\"https://cloud.tencent.com/act/seckill?from=double11\" target=\"_blank\">点我传送</a></p>\n, tagUid=1d1fd6d26c8e40a38637ef6126c45cd0, blogSortUid=a03d7290b1c04b6eaf46659661b47032, fileUid=51435e2fa2c45d5c4203278f958f8f52, adminUid=1f01cd1d2f474743b241d74008b12333, isPublish=1, isOriginal=1, author=admin, articlesPart=蘑菇博客, level=2, type=1, outsideLink=https://cloud.tencent.com/act/seckill?from=double11, tagList=[Tag(content=Linux, clickCount=336, sort=1)], photoList=[http://47.111.4.185:8600//blog/admin/jfif/2020/12/11/1607672771466.jfif], blogSort=BlogSort(sortName=后端开发, content=后端开发专题, clickCount=362, sort=6), praiseCount=null, copyright=null, levelKeyword=null, useSort=0, sort=1, openComment=1)]}','推荐博客排序调整',1,'2021-02-06 16:20:19','2021-02-06 16:20:19','中国|浙江省|绍兴市|电信',2328),('2c0ddaec4fed92f2e51e60f91ccf588e','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理14, summary=专题管理14, fileUid=235cc58878dd63148d05c0f491395a40, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:54','2021-01-23 10:19:54','中国|江西省|赣州市|移动',63),('2c21cb4edaecd571ab5b677b281517f1','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理16, summary=专题管理16, fileUid=808e310c02f10be658c98ba1a5ab14dc, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:15','2021-01-23 10:19:15','中国|江西省|赣州市|移动',241),('4ab641f6b91fe2cf96aa40129ab85797','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理17, summary=专题管理17, fileUid=0051cb722bb1bd89e1ec57b5f970c287, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:18:56','2021-01-23 10:18:56','中国|江西省|赣州市|移动',72),('52188b92053a5072f2058f1cfab29782','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题4介绍, summary=专题4介绍, fileUid=51435e2fa2c45d5c4203278f958f8f52, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:21:12','2021-01-23 10:21:12','中国|江西省|赣州市|移动',28),('6346b618fefc2ad660ebed0e2843e221','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理13, summary=专题管理13, fileUid=6d1c017a7a980c6f6852cb5a992424b5, sort=1, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:18:50','2021-01-23 10:18:50','中国|江西省|赣州市|移动',116),('6982d0bd5d34a2d34df10eda1df8a4da','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理5, summary=专题管理5, fileUid=f58d18eac69fc82f6a179c4f63717ffa, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:20:33','2021-01-23 10:20:33','中国|江西省|赣州市|移动',39),('6bc40577c79fae387fe314e9b06ec9b9','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理7, summary=专题管理7, fileUid=aae71f2c737d24e06a6501b44cd77a68, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:39','2021-01-23 10:19:39','中国|江西省|赣州市|移动',35),('7094b04428314ae82b288c3083de2c73','admin','1f01cd1d2f474743b241d74008b12333','110.152.33.218','/systemConfig/editSystemConfig','POST','com.moxi.mogublog.admin.restapi.SystemConfigRestApi','editSystemConfig','{\"systemConfigVO\":SystemConfigVO(qiNiuAccessKey=, qiNiuSecretKey=, qiNiuBucket=, qiNiuArea=, uploadQiNiu=0, uploadLocal=1, picturePriority=0, contentPicturePriority=0, localPictureBaseUrl=http://47.111.4.185:8600/, qiNiuPictureBaseUrl=, email=123456789@qq.com, emailUserName=null, emailPassword=, smtpAddress=null, smtpPort=, startEmailNotification=0, editorModel=0, themeColor=#0EEEE7, uploadMinio=0, minioEndPoint=, minioAccessKey=, minioSecretKey=, minioBucket=, minioPictureBaseUrl=, dashboardNotification=<p>欢迎来到蘑菇博客项目，开源项目离不开大家的支持，希望小伙伴能随手点赞一下，你的点赞就是我维护的动力~</p>\n\n<p>项目源码：<a href=\"https://gitee.com/moxi159753/mogu_blog_v2\"><span style=\"color:#0000cd\">点我传送</span></a>，项目文档：<a href=\"http://moxi159753.gitee.io/mogu_blog_doc/#/\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a>，项目官网：<a href=\"http://www.moguit.cn/#/\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a>，学习笔记：<a href=\"https://gitee.com/moxi159753/LearningNotes\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a></p>\n\n<p>蘑菇博客使用了一些监控的Spring Cloud组件，但是并不一定都需要部署，必须启动的服务包含</p>\n\n<p><code>nacos</code>，<code>nginx</code>，<code>rabbitmq</code>，&nbsp;<code>redis</code>，<code>mysql</code>，<code>mogu-gateway</code>,&nbsp;&nbsp;<code>mogu-sms</code>，<code>mogu-picture</code>，&nbsp;<code>mogu-web</code>,&nbsp;<code>mogu-admin</code></p>\n\n<p>其它的服务都可以不启动，也不影正常使用，可以根据自身服务器配置来启动</p>\n\n<p>最低配置：1核2G&nbsp;<code>需要开启虚拟内存</code></p>\n\n<p>推荐配置：2核4G 【双十二特惠】</p>\n\n<p>双12活动开始喽~，本次优惠力度非常大，如果有需求的，欢迎点击下面链接购买</p>\n\n<p>【阿里云】云服务器双12狂欢特惠，1核2G 5M轻量级应用服务器114元/年【博主使用】&nbsp;<a href=\"https://www.aliyun.com/minisite/goods?userCode=w7aungxw\"><span style=\"color:#0000ff\">点我传送</span></a></p>\n\n<p>【腾讯云】云产品限时秒杀，爆款1核2G云服务器，首年99元（老用户重新用微信QQ注册即可）&nbsp;<a href=\"https://curl.qcloud.com/zry6xub9\"><span style=\"color:#0000ff\">点我进入</span></a></p>\n\n<p>服务器和域名等服务的购买和续费都会产生一定的费用，为了维持项目的正常运作，如果觉得本项目对您有帮助的话</p>\n\n<p>欢迎朋友能够给予一些支持，非常感谢~（ps.. 小伙伴赞赏的时候可以备注一下下~）</p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\n	<tbody>\n		<tr>\n			<td style=\"text-align:center\">微信</td>\n			<td style=\"text-align:center\">支付宝</td>\n		</tr>\n		<tr>\n			<td><img alt=\"\" src=\"http://demopicture.moguit.cn//blog/admin/png/2020/12/11/1607690861847.png\" /></td>\n			<td><img alt=\"\" src=\"http://demopicture.moguit.cn//blog/admin/png/2020/12/11/1607690798874.png\" /></td>\n		</tr>\n	</tbody>\n</table>\n, openDashboardNotification=1)}','修改系统配置',1,'2021-03-02 09:57:58','2021-03-02 09:57:58','中国|新疆|乌鲁木齐市|电信',646),('721395d7dcc63a25ace0de8c192cda8f','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理15, summary=专题管理15, fileUid=5fae676476807d3e821423ffbc4583ef, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:21:24','2021-01-23 10:21:24','中国|江西省|赣州市|移动',47),('7997904648bba24f6bc99f07e3add880','admin','1f01cd1d2f474743b241d74008b12333','0:0:0:0:0:0:0:1','/webConfig/editWebConfig','POST','com.moxi.mogublog.admin.restapi.WebConfigRestApi','editWebConfig','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"webConfigVO\":WebConfigVO(logo=,f9f258dd238b172c1b2058af334660d7, name=蘑菇博客, title=一个专注于技术分享的博客平台, summary=一个专注于技术分享的博客平台，大家以共同学习，乐于分享，拥抱开源的价值观进行学习交流, keyword=\"蘑菇博客,蘑菇社区,蘑菇技术社区,,蘑菇IT社区,IT社区,技术社区,Java技术分享,Spring教程,开发者社区, author=陌溪, recordNum=赣ICP备18014504号, aliPay=b4bb7ba9905203188eb89895f0e7c121, weixinPay=0a55fb8d7181493e4fe781a08ff522ad, openComment=1, openMobileComment=0, openAdmiration=1, openMobileAdmiration=0, github=https://github.com/moxi624, gitee=https://gitee.com/moxi159753, qqNumber=979515003, qqGroup=950309755, weChat=, email=1595833114@qq.com, showList=[\"2\",\"3\",\"4\",\"5\",\"1\"], loginTypeList=[\"3\",\"4\",\"2\",\"1\"], photoList=[http://47.111.4.185:8600//blog/admin/jpg/2020/12/11/1607673162936.jpg], aliPayPhoto=http://47.111.4.185:8600//blog/admin/png/2020/12/11/1607690952699.png, weixinPayPhoto=http://47.111.4.185:8600//blog/admin/png/2020/12/11/1607690956176.png)}','修改网站配置',1,'2021-03-18 21:08:51','2021-03-18 21:08:51',NULL,462),('856568b03644245d6dffbf60c823122d','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理12, summary=专题管理12, fileUid=eb7801d1f8929420262a9a072a257099, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:01','2021-01-23 10:19:01','中国|江西省|赣州市|移动',38),('a6de4df098b8e0fc84f1850ec813b6b0','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=测试测试, summary=null, fileUid=5fae676476807d3e821423ffbc4583ef, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:26','2021-01-23 10:19:26','中国|江西省|赣州市|移动',122),('b0ce1f6d87822a883e1bcda23992c063','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=123, summary=123, fileUid=d01453db03fbb44b4e6df0ee586a9d9f, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:32','2021-01-23 10:19:32','中国|江西省|赣州市|移动',89),('b1c81ae03224a7c8530e908398311652','admin','1f01cd1d2f474743b241d74008b12333','116.1.3.233','/role/edit','POST','com.moxi.mogublog.admin.restapi.RoleRestApi','update','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"roleVO\":RoleVO(roleName=演示角色, summary=具备所有的查询权限和部分操作权限, categoryMenuUids=[\"e5218b0b1cf016ae21eced4e47b628ac\",\"fe45ea293f75dc88b96cab96c218512a\",\"0cab1fcdcd01f394768e2e2674e56773\",\"2b983c5439ac07f2cf07437ba9fff6be\",\"7ada0a7053be4ad4b31f6be64315d03a\",\"9db7ffbded9717f13a1a97fca46bc17c\",\"0a035547bbec404eb3ee0ef43312148d\",\"2a733ff390af9b44ecda4e8c4634d75d\",\"327d945daf4ddb71976c4ab3830e7c66\",\"6c8a8c50c77429fab210bd52ed8c50bb\",\"72d26cf940bf9dfb6bde0a590ff40882\",\"80ee135af885f02d52ecb67d5a05b173\",\"aef85c40b54320d7c5a9d78697e12910\",\"f87d2f9b4539abbade38583420dc8b89\",\"fbc30e4ae5bb33b39baca7bf6bd8ce99\",\"6606b7e646d545e5a25c70b5e5fade9f\",\"2a733ff390af9b44ecda4e8c4634d75f\",\"327d945daf4ddb71976c4ab3830e7c6h\",\"6c8a8c50c77429fab210bd52ed8c50ba\",\"72d26cf940bf9dfb6bde0a590ff4088g\",\"80ee135af885f02d52ecb67d5a05b17b\",\"aef85c40b54320d7c5a9d78697e1291c\",\"f87d2f9b4539abbade38583420dc8b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9d\",\"7cb1a6b7462832bf831a18a28eea94cd\",\"237d410f90d0c70b894f87a87718d88c\",\"5bf9bd28d387ef923f2c5d11ec01fbbd\",\"86508603e6d78036db0bf9222946f68c\",\"bcfac78203944094040851cc0a9bb095\",\"da32aa8f92ae7fe7e7f445bf1028d2df\",\"ed535411a72bb5cdd62aade25ca6e9c9\",\"3e92f2fd6cf012d30bfae2d9cdb7092d\",\"a8bad1abec6c8fc8d4bce5a27829c878\",\"b21105b915a5b54588c2cd458a94d2d5\",\"ccc0dced06919403832647a871312f09\",\"e76ec0b7226985a414f035e2ecbd00b4\",\"fa1e85a9c7734d27df07bc730206bd1a\",\"1d9a5030142e9fd7690f554c20e3bc90\",\"f874529321a37e84f099488a4eaf5a0b\",\"fbc30e4ae5bb33b39baca7bf6bd8cezm\",\"fbc30e4ae5bb33b39baca7bf6bd8ceom\",\"fbc30e4ae5bb33b39baca7bf6bd8ck0m\",\"fbc30e4ae5bb33b39baca7bf6bd8cj0m\",\"9002d1ae905c4cb79c2a485333dad2f7\",\"2a733ff390af9b44ecda4e8c4634d78k\",\"327d945daf4ddb71976c4ab3830e7c7i\",\"aef85c40b54320d7c5a9d78697e1296n\",\"f87d2f9b4539abbade38583420dc8b9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ce0m\",\"c2a1218dd07747a57b055f184ddae217\",\"62c91c47c4646661c045727f0a8eb9d4\",\"fbc30e4ae5bb33b39baca7bf6bd8ceam\",\"fbc30e4ae5bb33b39baca7bf6bd8ce1m\",\"879cfcd4dfd3e5bc1bb6ea2c0f1f82c0\",\"fbc30e4ae5bb33b39baca7bf6bd8cesm\",\"fbc30e4ae5bb33b39baca7bf6bd8cejm\",\"f4697cdf85920369179b90ff45a5982d\",\"f3a559635f9d46ee3356d072f5896fcb\",\"672b093002b618293befd8e1a164e4cc\",\"407a263eb12eff5aac31e9f62901cea0\",\"34c1b7b1bd3118979fe1f9f9a1147fa5\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9q\",\"b511cae571834971a392ae4779270034\",\"98b82be8785e41dc939b6a5517fdfa53\",\"a5902692a3ed4fd794895bf634f97b8e\",\"fbc30e4ae5bb33b39baca7bf6bd8celm\",\"9e91b4f993c946cba4bf720b2c1b2e90\",\"fbc30e4ae5bb33b39baca7bf6bd8cemm\",\"4337f63d13d84b9aba64b9d7a69fd066\",\"fbc30e4ae5bb33b39baca7bf6bd8cekm\",\"fbc30e4ae5bb33b39baca7bf6bd8ce9m\",\"fbc30e4ae5bb33b39baca7bf6bd8cewm\",\"baace3dc03d34c54b81761dce8243814\",\"af0e753d3ea0adf5cd8cf1dd55f162c2\",\"f9276eb8e3274c8aa05577c86e4dc8c1\",\"e4a482c089d04a30b6ecbaadb81b70f8\",\"d4d92c53d3614d00865e9219b8292a90\",\"acbb5d09da25e6c9e019cc361b35d159\",\"fbc30e4ae5bb33b39baca7bf6bd8cenm\",\"fbc30e4ae5bb33b39baca7bf6bd8ceim\",\"510483ce569b4fc88299f346147b1314\",\"e1e54aea65cc22d9f8a4c74ce8d23749\",\"4062db4658392e71c177758bb51bb4cb\",\"5ef38a4f70c6d859155528776a30cda7\",\"688beda820a236b50f18ccdd5dc9fee9\",\"94bee9c48a4611c96b89112b845c7f28\",\"baa21ccb45ee133b064187185edb2ac0\",\"ffc6e9ca2cc243febf6d2f476b849163\",\"2a733ff390af9b44ecda4e8c4634dh8c\",\"327d945daf4ddb71976c4ab3830e7g7d\",\"f87d2f9b4539abbade38583420dc8i9b\",\"fbc30e4ae5bb33b39baca7bf6bd8cj0a\",\"9449ce5dd5e24b21a9d15f806cb36e87\",\"2a733ff390af9b44ecda4e8c4634db8k\",\"327d945daf4ddb71976c4ab3830e7d7i\",\"aef85c40b54320d7c5a9d78697e12e6n\",\"f87d2f9b4539abbade38583420dc8c9l\",\"fbc30e4ae5bb33b39baca7bf6bd8ca0m\",\"147cd431cbb9007bde87444d7987b151\",\"a0c40ddd3fe15bb3f2edf9ec242a1511\",\"14bcfc15d02f0d568adf2d383c0342d8\",\"bfcb9b002c3de18f269189c573b985f8\",\"2d5cd8a387fc2d010c245acd65fefd3b\",\"99f5d4233d446a809b9937961c590766\",\"a9396f1a3fbdec3d4cb614f388a22bea\",\"152216a4fd9b995aa20bfa1eec6312c2\",\"238352fc7e86340c339b9a575b1b7086\",\"cbd7ba11c1b38c66b569405ed9185f35\",\"505b4769b77617a314a3ed78e4acdff7\",\"93f7fd9a6e81735c47649e6b36042b5d\",\"bfc9463e59a3ca250dcfc1c86627e034\",\"2a733ff390af9b44ecda4e8c4634d75u\",\"02ea2f9ef5d44f559fb66189b05f6769\",\"2a733ff390af9b44ecda4e8c4634d75v\"])}','更新角色信息',1,'2020-12-11 21:02:38','2020-12-11 21:02:38','中国|广西|桂林市|电信',15),('b1f5200fcfa548c7381896686ff1ab44','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理18, summary=专题管理18, fileUid=0051cb722bb1bd89e1ec57b5f970c287, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:20:21','2021-01-23 10:20:21','中国|江西省|赣州市|移动',31),('b2fd7baf54780d637c2509d0becadbde','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理9, summary=专题管理9, fileUid=c49a66b73b4deb5bfaaff02b6b23417a, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:46','2021-01-23 10:19:46','中国|江西省|赣州市|移动',54),('bf666cf34a567f7ccdc89d7af80f38f3','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理8, summary=专题管理8, fileUid=51435e2fa2c45d5c4203278f958f8f52, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:20','2021-01-23 10:19:20','中国|江西省|赣州市|移动',169),('c24f48eee52f2898829f84afdf390153','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理10, summary=专题管理10, fileUid=eb7801d1f8929420262a9a072a257099, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:20:26','2021-01-23 10:20:26','中国|江西省|赣州市|移动',85),('cb04709cc52adc5286843d299ae2e9d7','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理3, summary=专题管理3, fileUid=11a0ca657864b7e89b7262f22247274e, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:20:11','2021-01-23 10:20:11','中国|江西省|赣州市|移动',42),('d08c6c3529a34edf75ad40e0f471d370','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理11, summary=专题管理11, fileUid=608e9648a6e902bafaf30a8392f16b6d, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:21:17','2021-01-23 10:21:17','中国|江西省|赣州市|移动',83),('d5009c0a9209261822f511cab3f6b5fe','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=Java学习笔记, summary=测试简介, fileUid=af067859a0dc43c83e57e5f5b80b8347, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:59','2021-01-23 10:19:59','中国|江西省|赣州市|移动',65),('eb5c6b8170a332120ae95182cf3b9c65','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理19, summary=专题管理19, fileUid=f58d18eac69fc82f6a179c4f63717ffa, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:19:07','2021-01-23 10:19:07','中国|江西省|赣州市|移动',56),('f3dda778df6bc5aa1dd91bc898cdac0e','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=测试专题2, summary=测试专题2, fileUid=6d1c017a7a980c6f6852cb5a992424b5, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:20:16','2021-01-23 10:20:16','中国|江西省|赣州市|移动',20),('f5da264d9fa5b2eae7bad98d91d3df2f','admin','1f01cd1d2f474743b241d74008b12333','183.218.57.87','/subject/edit','POST','com.moxi.mogublog.admin.restapi.SubjectRestApi','edit','{\"result\":org.springframework.validation.BeanPropertyBindingResult: 0 errors,\"subjectVO\":SubjectVO(subjectName=专题管理6, summary=专题管理6, fileUid=808e310c02f10be658c98ba1a5ab14dc, sort=0, clickCount=0, collectCount=0)}','编辑专题',1,'2021-01-23 10:21:08','2021-01-23 10:21:08','中国|江西省|赣州市|移动',72);

/*Table structure for table `t_sys_params` */

DROP TABLE IF EXISTS `t_sys_params`;

CREATE TABLE `t_sys_params` (
  `uid` varchar(32) NOT NULL COMMENT '主键',
  `params_type` varchar(1) NOT NULL DEFAULT '1' COMMENT '配置类型 是否系统内置(1:，是 0:否)',
  `params_name` varchar(255) DEFAULT NULL COMMENT '参数名称',
  `params_key` varchar(255) DEFAULT NULL COMMENT '参数键名',
  `remark` varchar(255) DEFAULT NULL COMMENT '备注',
  `params_value` varchar(255) DEFAULT NULL COMMENT '参数键值',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `sort` int NOT NULL DEFAULT '0' COMMENT '排序字段',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='参数配置表';

/*Data for the table `t_sys_params` */

insert  into `t_sys_params`(`uid`,`params_type`,`params_name`,`params_key`,`remark`,`params_value`,`status`,`create_time`,`update_time`,`sort`) values ('099427a9a5305f99ab46bb1c56080d3e','1','文件上传路径','FILE_UPLOAD_PATH','图片本地上传路径','D:/mogu_blog/data/',0,'2020-07-21 22:35:43','2020-08-20 17:55:42',0),('0b2757bec99cb1c4eba3163fc6ab7cf2','1','二级推荐','BLOG_SECOND_COUNT','首页博客 二级推荐数量','2',1,'2020-07-21 22:28:03','2020-07-28 18:02:58',0),('0e5273aeee0058ee8737b94c6d955fe0','1','热门标签数量','HOT_TAG_COUNT','首页 热门标签数量','20',1,'2020-07-21 22:41:04','2020-09-19 15:04:30',0),('13102852ad56f478324ae13e9f83d7a6','1','一级推荐','BLOG_FIRST_COUNT','首页博客 一级推荐数量','5',1,'2020-07-21 22:27:27','2020-08-30 07:59:57',0),('1cbff65d4982066709fdfc3d4d2799eb','1','三级推荐','BLOG_THIRD_COUNT','首页博客 三级推荐数量','3',1,'2020-07-21 22:28:34','2020-07-21 22:28:34',0),('1ee3e63885637fcee9ab7dcdefbabeaa','1','默认密码','SYS_DEFAULT_PASSWORD','管理员默认密码','mogu2018',1,'2020-07-21 17:26:42','2020-10-05 09:34:33',2),('207812ebc591b6754a5d655c24d4a58d','1','最新博客数量','BLOG_NEW_COUNT','首页 最新显示的博客数量','15',1,'2020-07-21 22:26:44','2020-08-30 07:59:46',0),('23b1b89ada85a09bb0075eab906958ce','1','令牌过期时间','TOKEN_EXPIRE_TIME','后端令牌过期时间  1小时','3600',1,'2020-07-21 22:31:58','2020-08-20 17:55:46',0),('3434f8d9895956311c1deeb71a7e52e4','1','友情链接数','FRIENDLY_LINK_COUNT','友情链接数目','20',1,'2020-07-21 22:40:30','2020-07-28 18:32:55',0),('62bde28353d8de9b7426d778f899830f','1','网盘最大容量','MAX_STORAGE_SIZE','单个管理员账号，网盘最大容量，单位MB','500',1,'2020-10-09 10:01:25','2020-10-09 10:12:02',0),('7c3c02a3874ca6fe6fd6207b978cf785','1','项目名称','PROJECT_NAME','项目中文名称','蘑菇博客',1,'2020-07-28 17:18:59','2020-07-28 17:18:59',0),('81270e541b3476f61fdae4435407c143','1','热门博客数量','BLOG_HOT_COUNT','热门博客数量','5',1,'2020-07-21 22:26:02','2020-07-21 22:26:02',0),('c69da7fccb13d22ee616e0972d5413af','1','四级推荐','BLOG_FOURTH_COUNT','首页博客 四级推荐数量','5',1,'2020-07-21 22:29:11','2020-07-21 22:33:19',0),('d1c75145ad11d7ba66d5f88a12c19079','1','令牌刷新时间','TOKEN_REFRESH_TIME','后端令牌刷新时间 5分钟','300',0,'2020-07-21 22:33:04','2020-08-20 17:55:44',0),('db28ba09b3edec8a479c6f07e742a31b','1','用户令牌存活时间','USER_TOKEN_SURVIVAL_TIME','toekn令牌存活时间7*24=7天','168',0,'2020-07-21 22:41:46','2020-08-20 17:55:39',0);

/*Table structure for table `t_system_config` */

DROP TABLE IF EXISTS `t_system_config`;

CREATE TABLE `t_system_config` (
  `uid` varchar(32) NOT NULL COMMENT '主键',
  `qi_niu_access_key` varchar(255) DEFAULT NULL COMMENT '七牛云公钥',
  `qi_niu_secret_key` varchar(255) DEFAULT NULL COMMENT '七牛云私钥',
  `email` varchar(255) DEFAULT NULL COMMENT '邮箱账号',
  `email_user_name` varchar(255) DEFAULT NULL COMMENT '邮箱发件人用户名',
  `email_password` varchar(255) DEFAULT NULL COMMENT '邮箱密码',
  `smtp_address` varchar(20) DEFAULT NULL COMMENT 'SMTP地址',
  `smtp_port` varchar(6) DEFAULT '1' COMMENT 'SMTP端口',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT NULL COMMENT '更新时间',
  `qi_niu_bucket` varchar(255) DEFAULT NULL COMMENT '七牛云上传空间',
  `qi_niu_area` varchar(10) DEFAULT NULL COMMENT '七牛云存储区域 华东（z0），华北(z1)，华南(z2)，北美(na0)，东南亚(as0)',
  `upload_qi_niu` varchar(1) DEFAULT '1' COMMENT '图片是否上传七牛云 (0:否， 1：是)',
  `upload_local` varchar(1) DEFAULT '1' COMMENT '图片是否上传本地存储 (0:否， 1：是)',
  `picture_priority` varchar(1) DEFAULT '1' COMMENT '图片显示优先级（ 1 展示 七牛云,  0 本地）',
  `qi_niu_picture_base_url` varchar(255) DEFAULT NULL COMMENT '七牛云域名前缀：http://images.moguit.cn',
  `local_picture_base_url` varchar(255) DEFAULT NULL COMMENT '本地服务器域名前缀：http://localhost:8600',
  `start_email_notification` varchar(1) NOT NULL DEFAULT '0' COMMENT '是否开启邮件通知(0:否， 1:是)',
  `editor_model` tinyint(1) NOT NULL DEFAULT '0' COMMENT '编辑器模式，(0：富文本编辑器CKEditor，1：markdown编辑器Veditor)',
  `theme_color` varchar(10) NOT NULL DEFAULT '#409EFF' COMMENT '主题颜色',
  `minio_end_point` varchar(255) DEFAULT NULL COMMENT 'Minio远程连接地址',
  `minio_access_key` varchar(255) DEFAULT NULL COMMENT 'Minio公钥',
  `minio_secret_key` varchar(255) DEFAULT NULL COMMENT 'Minio私钥',
  `minio_bucket` varchar(255) DEFAULT NULL COMMENT 'Minio桶',
  `upload_minio` tinyint(1) NOT NULL DEFAULT '0' COMMENT '图片是否上传Minio (0:否， 1：是)',
  `minio_picture_base_url` varchar(255) DEFAULT NULL COMMENT 'Minio服务器文件域名前缀',
  `open_dashboard_notification` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否开启仪表盘通知(0:否， 1:是)',
  `dashboard_notification` longtext COMMENT '仪表盘通知【用于首次登录弹框】',
  `content_picture_priority` tinyint(1) NOT NULL DEFAULT '0' COMMENT '博客详情图片显示优先级（ 0:本地  1: 七牛云 2: Minio）',
  `open_email_activate` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否开启用户邮件激活功能【0 关闭，1 开启】',
  `search_model` tinyint(1) NOT NULL DEFAULT '0' COMMENT '搜索模式【0:SQL搜索 、1：全文检索】',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='系统配置表';

/*Data for the table `t_system_config` */

insert  into `t_system_config`(`uid`,`qi_niu_access_key`,`qi_niu_secret_key`,`email`,`email_user_name`,`email_password`,`smtp_address`,`smtp_port`,`status`,`create_time`,`update_time`,`qi_niu_bucket`,`qi_niu_area`,`upload_qi_niu`,`upload_local`,`picture_priority`,`qi_niu_picture_base_url`,`local_picture_base_url`,`start_email_notification`,`editor_model`,`theme_color`,`minio_end_point`,`minio_access_key`,`minio_secret_key`,`minio_bucket`,`upload_minio`,`minio_picture_base_url`,`open_dashboard_notification`,`dashboard_notification`,`content_picture_priority`,`open_email_activate`,`search_model`) values ('37d492e35dc6e3fbb9dfedfd2079a123','','','123456789@qq.com',NULL,'',NULL,'',1,'2020-01-29 19:14:26','2021-03-13 15:40:52','','','0','1','0','','http://47.111.4.185:8600/','0',0,'#172524','','','','',0,'',1,'<p>欢迎来到蘑菇博客项目，开源项目离不开大家的支持，希望小伙伴能随手点赞一下，你的点赞就是我维护的动力~</p>\n\n<p>项目源码：<a href=\"https://gitee.com/moxi159753/mogu_blog_v2\"><span style=\"color:#0000cd\">点我传送</span></a>，项目文档：<a href=\"http://moxi159753.gitee.io/mogu_blog_doc/#/\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a>，项目官网：<a href=\"http://www.moguit.cn/#/\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a>，学习笔记：<a href=\"https://gitee.com/moxi159753/LearningNotes\" target=\"_blank\"><span style=\"color:#0000ff\">点我传送</span></a></p>\n\n<p>蘑菇博客使用了一些监控的Spring Cloud组件，但是并不一定都需要部署，必须启动的服务包含</p>\n\n<p><code>nacos</code>，<code>nginx</code>，<code>rabbitmq</code>，&nbsp;<code>redis</code>，<code>mysql</code>，<code>mogu-gateway</code>,&nbsp;&nbsp;<code>mogu-sms</code>，<code>mogu-picture</code>，&nbsp;<code>mogu-web</code>,&nbsp;<code>mogu-admin</code></p>\n\n<p>其它的服务都可以不启动，也不影正常使用，可以根据自身服务器配置来启动</p>\n\n<p>最低配置：1核2G&nbsp;<code>需要开启虚拟内存</code></p>\n\n<p>推荐配置：2核4G 【双十二特惠】</p>\n\n<p>双12活动开始喽~，本次优惠力度非常大，如果有需求的，欢迎点击下面链接购买</p>\n\n<p>【阿里云】云服务器双12狂欢特惠，1核2G 5M轻量级应用服务器114元/年【博主使用】&nbsp;<a href=\"https://www.aliyun.com/minisite/goods?userCode=w7aungxw\"><span style=\"color:#0000ff\">点我传送</span></a></p>\n\n<p>【腾讯云】云产品限时秒杀，爆款1核2G云服务器，首年99元（老用户重新用微信QQ注册即可）&nbsp;<a href=\"https://curl.qcloud.com/zry6xub9\"><span style=\"color:#0000ff\">点我进入</span></a></p>\n\n<p>服务器和域名等服务的购买和续费都会产生一定的费用，为了维持项目的正常运作，如果觉得本项目对您有帮助的话</p>\n\n<p>欢迎朋友能够给予一些支持，非常感谢~（ps.. 小伙伴赞赏的时候可以备注一下下~）</p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\n	<tbody>\n		<tr>\n			<td style=\"text-align:center\">微信</td>\n			<td style=\"text-align:center\">支付宝</td>\n		</tr>\n		<tr>\n			<td><img alt=\"\" src=\"http://demopicture.moguit.cn//blog/admin/png/2020/12/11/1607690861847.png\" /></td>\n			<td><img alt=\"\" src=\"http://demopicture.moguit.cn//blog/admin/png/2020/12/11/1607690798874.png\" /></td>\n		</tr>\n	</tbody>\n</table>\n',0,0,0);

/*Table structure for table `t_tag` */

DROP TABLE IF EXISTS `t_tag`;

CREATE TABLE `t_tag` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `content` varchar(1000) DEFAULT NULL COMMENT '标签内容',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `click_count` int DEFAULT '0' COMMENT '标签简介',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `sort` int DEFAULT '0' COMMENT '排序字段，越大越靠前',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='标签表';

/*Data for the table `t_tag` */

insert  into `t_tag`(`uid`,`content`,`status`,`click_count`,`create_time`,`update_time`,`sort`) values ('0b51c75ed5744cdcadefe0ad947be9b6','数据库',1,77,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('15721a34adba068763b5a2fb1991fc57','JVM',1,32,'2020-10-13 10:01:00','2020-12-11 20:26:57',3),('188396dc0efcae369856fe472df1ed09','标签2',0,0,'2020-10-13 10:01:10','2020-10-13 10:01:15',6),('1c76b9848f5f4d71a5e88b20dbaf38f4','RabbitMQ',1,105,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('1d1fd6d26c8e40a38637ef6126c45cd0','Linux',1,336,'2020-10-13 10:01:00','2020-10-13 10:01:03',1),('2a31dd6c2b1b464e9e222a1198bc739a','虚拟机',1,57,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('2f5779e877da48958c985d69b311d0d6','大数据',1,71,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('3c16b9093e9b1bfddbdfcb599b23d835','Nginx',1,31,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('53c5a0f3142e4f54820315936f78383b','Spring Boot',1,72,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('5626932d452c2ad863d9b3cb0b69d22d','学习笔记',1,216,'2020-10-13 10:01:00','2021-01-23 10:18:02',5),('5c939107ddb746b989156737805df625','机器学习',1,110,'2020-10-13 10:01:00','2020-12-11 20:27:03',0),('618346963de0fc724e44c6f9120aea9c','Github',1,17,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('6d35ddd5075f4c0e885ffb2e3b3a0365','Tomcat',1,58,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('7e0e93ea6cdb44ae92e58f48e6496ed7','Java',1,1648,'2020-10-13 10:01:00','2021-05-04 00:08:55',7),('8c9d43de144245eb8176854eca5ae244','AI',1,20,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('8d5ce3e0c0784b95adb7f9e7b76dca93','建站系统',1,100,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('a9a747d944c24845815356f72723ef8e','前端开发',1,115,'2020-10-13 10:01:00','2020-12-11 20:27:00',0),('b22b9bdc32a442dd65dee82cdc5cf800','计算机网络',1,16,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('ca928e8718654aa5a802e2f69277b137','面试',1,193,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('d3c3fc43f38445389c970ff0732a6586','NLP',1,39,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('dececd440fdc4fa28dffe6404e696dd4','Python',1,19,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('e2c7913050cf4ab9aa92902316aaf075','校园生活',1,170,'2020-10-13 10:01:00','2020-12-11 20:27:06',0),('e81bc2dca42c4031be7d66fef4a71e16','Spring Cloud',1,109,'2020-10-13 10:01:00','2020-10-13 10:01:03',2),('ebf63989f11741bc89494c52fc6bae4c','Docker',1,96,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('f5d458db6a044eaebc22232efa1e3b54','深度学习',1,66,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('f90d3c2fd9434302951130e897a89164','Vue',1,90,'2020-10-13 10:01:00','2020-10-13 10:01:03',0),('fb72516226474cf0bfa0f310bfa75426','Redis',1,61,'2020-10-13 10:01:00','2020-10-13 10:01:03',0);

/*Table structure for table `t_todo` */

DROP TABLE IF EXISTS `t_todo`;

CREATE TABLE `t_todo` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `admin_uid` varchar(32) DEFAULT NULL COMMENT '管理员uid',
  `text` varchar(255) DEFAULT NULL COMMENT '内容',
  `done` tinyint unsigned NOT NULL DEFAULT '0' COMMENT '表示事项是否完成（0：未完成 1：已完成）',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='代办事项表';

/*Data for the table `t_todo` */

insert  into `t_todo`(`uid`,`admin_uid`,`text`,`done`,`status`,`create_time`,`update_time`) values ('12575ab33b5c9679cd3f60474cfcc10d','7621746caa93ce605e2de7143a3787b5','希望能随手star支持一下~',0,1,'2020-12-11 20:28:11','2020-12-11 20:28:11'),('1f9081bbb47070772d9092cefc9f72e3','7621746caa93ce605e2de7143a3787b5','欢迎来到蘑菇博客演示环境',0,0,'2020-12-11 20:24:47','2020-12-11 20:26:08'),('2ed69c3adfe60ce3df5bc300f6c6825f','1723ad77a1ca06b29a011471036a2dd6','我是已经完成的代办事项',1,1,'2020-03-23 08:07:49','2020-03-23 08:07:49'),('309d869db882c9e0025f6f181b657cb6','1723ad77a1ca06b29a011471036a2dd6','我是代办事项2',0,1,'2020-03-23 08:07:40','2020-03-23 08:07:40'),('38cd3e190715ec7e41d369677aa237f7','7621746caa93ce605e2de7143a3787b5','你的点赞，就是我维护的动力~',0,1,'2020-12-11 20:28:02','2020-12-11 20:28:02'),('41da90f73049eb428b70235eb791df2c','1f01cd1d2f474743b241d74008b12333','add',1,1,'2020-03-23 08:06:21','2020-09-10 09:11:38'),('4b95b6606fee399c623327f55fb465a5','7621746caa93ce605e2de7143a3787b5','注：为了维护演示环境的正常使用，因此只开放了部分权限，如需体验完整环境，可以下载源码后按照文档教程进行搭建，谢谢~',0,1,'2020-12-11 20:27:46','2020-12-11 20:27:46'),('700f3e94f5b5c9f1b6d0c8599c2e98f2','1723ad77a1ca06b29a011471036a2dd6','我是代办事项5',0,1,'2020-03-23 08:08:16','2020-03-23 08:08:16'),('81576c796f8d1086a7789e088763b8fb','1723ad77a1ca06b29a011471036a2dd6','我是代办事项3',0,1,'2020-03-23 08:08:00','2020-03-23 08:08:00'),('9493f3d7dea2a61ccc38eae41a29b1ff','1f01cd1d2f474743b241d74008b12333','测试',0,1,'2020-10-12 08:35:35','2020-10-12 08:35:35'),('963be23b6ed33c5f53070aec38d19f60','1f01cd1d2f474743b241d74008b12333','测试2',0,1,'2020-10-12 08:35:51','2020-10-12 08:35:51'),('9dd83b398543ce751e81adacfd3704fc','1f01cd1d2f474743b241d74008b12333','测试代办事项',1,1,'2020-09-10 08:57:29','2020-09-10 09:11:37'),('9f78b828b62c638530bef7e6c6b56342','1f01cd1d2f474743b241d74008b12333','测试代办',0,1,'2020-09-16 07:56:49','2020-09-16 07:56:49'),('abfa6e0cc5b4c67e1f2199a95236bd23','1f01cd1d2f474743b241d74008b12333','测试3',0,0,'2020-10-12 08:38:23','2020-10-12 08:38:29'),('b93dc02abbab9c5cb674629632740670','7621746caa93ce605e2de7143a3787b5','如果你刚好来到这里',0,1,'2020-12-11 20:28:17','2020-12-11 20:28:17'),('ba75e80f78960dd44fe3b7489fe115c2','7621746caa93ce605e2de7143a3787b5','欢迎来到蘑菇博客演示环境',0,1,'2020-12-11 20:28:31','2020-12-11 20:28:31'),('d8045d8ae222443c163ff479f413987b','1723ad77a1ca06b29a011471036a2dd6','我是代办事项1',0,1,'2020-03-23 08:07:32','2020-03-23 08:07:32'),('de0979521fdbffdb26776a538c20cbbc','1f01cd1d2f474743b241d74008b12333','测试代办2',1,0,'2020-10-12 08:38:35','2020-10-12 08:38:45'),('f046531905026dab8389ac405389aad2','1723ad77a1ca06b29a011471036a2dd6','我是代办事项4',0,1,'2020-03-23 08:08:10','2020-03-23 08:08:10'),('f221759435272792159eeec80e37d690','7621746caa93ce605e2de7143a3787b5','开源项目离不开大家的支持',0,1,'2020-12-11 20:28:25','2020-12-11 20:28:25'),('faf496c22af2a9cf5b98fd968712ee8a','1f01cd1d2f474743b241d74008b12333','代办事项3',0,0,'2020-09-10 08:57:34','2020-10-12 08:37:46'),('fc471a59421e87e325009003f4ed05b3','1f01cd1d2f474743b241d74008b12333','代办事项',1,1,'2020-09-10 08:57:31','2020-09-10 09:11:36');

/*Table structure for table `t_user` */

DROP TABLE IF EXISTS `t_user`;

CREATE TABLE `t_user` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `user_name` varchar(255) NOT NULL COMMENT '用户名',
  `pass_word` varchar(32) NOT NULL COMMENT '密码',
  `gender` tinyint unsigned DEFAULT NULL COMMENT '性别(1:男2:女)',
  `avatar` varchar(100) DEFAULT NULL COMMENT '个人头像',
  `email` varchar(60) DEFAULT NULL COMMENT '邮箱',
  `birthday` date DEFAULT NULL COMMENT '出生年月日',
  `mobile` varchar(50) DEFAULT NULL COMMENT '手机',
  `valid_code` varchar(50) DEFAULT NULL COMMENT '邮箱验证码',
  `summary` varchar(200) DEFAULT NULL COMMENT '自我简介最多150字',
  `login_count` int unsigned DEFAULT '0' COMMENT '登录次数',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `last_login_ip` varchar(50) DEFAULT '127.0.0.1' COMMENT '最后登录IP',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `nick_name` varchar(255) DEFAULT NULL COMMENT '昵称',
  `source` varchar(255) DEFAULT NULL COMMENT '资料来源',
  `uuid` varchar(255) DEFAULT NULL COMMENT '平台uuid',
  `qq_number` varchar(20) DEFAULT NULL COMMENT 'QQ号',
  `we_chat` varchar(255) DEFAULT NULL COMMENT '微信号',
  `occupation` varchar(255) DEFAULT NULL COMMENT '职业',
  `comment_status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '评论状态 1:正常 0:禁言',
  `ip_source` varchar(255) DEFAULT NULL COMMENT 'ip来源',
  `browser` varchar(255) DEFAULT NULL COMMENT '浏览器',
  `os` varchar(255) DEFAULT NULL COMMENT '操作系统',
  `start_email_notification` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否开启邮件通知 1:开启 0:关闭',
  `user_tag` tinyint(1) NOT NULL DEFAULT '0' COMMENT '用户标签：0：普通用户，1：管理员，2：博主 等',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户表';

/*Data for the table `t_user` */

insert  into `t_user`(`uid`,`user_name`,`pass_word`,`gender`,`avatar`,`email`,`birthday`,`mobile`,`valid_code`,`summary`,`login_count`,`last_login_time`,`last_login_ip`,`status`,`create_time`,`update_time`,`nick_name`,`source`,`uuid`,`qq_number`,`we_chat`,`occupation`,`comment_status`,`ip_source`,`browser`,`os`,`start_email_notification`,`user_tag`) values ('4eaa601ace694ec33664900ae1ffc0bc','龙德传仁文化','2aba30fd22fb81e675e9c6a67c100d78',NULL,NULL,'446412648@qq.com',NULL,NULL,NULL,NULL,0,NULL,'110.152.33.218',2,'2021-03-02 09:23:15','2021-03-02 09:23:15','龙德传仁文化','MOGU',NULL,NULL,NULL,NULL,1,NULL,'Chrome-70.0.3538.25','Windows',0,0),('6795d72d4b27b24e02acb38723ccc5d6','mogu2018','972d768bb099b1de8fd2362275256fac',NULL,'5293654068d8527d855dd2885943835e','mogublog@163.com',NULL,NULL,NULL,NULL,0,'2020-12-11 20:58:38','116.1.3.233',1,'2020-12-11 20:51:38','2020-12-11 20:59:08','mogu2018','MOGU',NULL,NULL,NULL,NULL,1,NULL,'Chrome-86.0.4240.75','Windows',0,0),('f23ab1cd1819373ce57ec242be60cf3b','龙德传仁文化','2aba30fd22fb81e675e9c6a67c100d78',NULL,NULL,'446412648@qq.com',NULL,NULL,NULL,NULL,0,NULL,'110.152.33.218',2,'2021-03-02 09:23:17','2021-03-02 09:23:17','龙德传仁文化','MOGU',NULL,NULL,NULL,NULL,1,NULL,'Chrome-70.0.3538.25','Windows',0,0);

/*Table structure for table `t_visitor` */

DROP TABLE IF EXISTS `t_visitor`;

CREATE TABLE `t_visitor` (
  `uid` varchar(32) NOT NULL COMMENT '唯一uid',
  `user_name` varchar(255) DEFAULT NULL COMMENT '用户名',
  `email` varchar(255) NOT NULL COMMENT '邮箱',
  `login_count` int unsigned DEFAULT '0' COMMENT '登录次数',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `last_login_ip` varchar(50) DEFAULT '127.0.0.1' COMMENT '最后登录IP',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='游客表';

/*Data for the table `t_visitor` */

/*Table structure for table `t_web_config` */

DROP TABLE IF EXISTS `t_web_config`;

CREATE TABLE `t_web_config` (
  `uid` varchar(32) NOT NULL COMMENT '主键',
  `logo` varchar(255) NOT NULL COMMENT 'logo(文件UID)',
  `name` varchar(255) NOT NULL COMMENT '网站名称',
  `summary` varchar(255) NOT NULL COMMENT '介绍',
  `keyword` varchar(255) NOT NULL COMMENT '关键字',
  `author` varchar(255) NOT NULL COMMENT '作者',
  `record_num` varchar(255) NOT NULL COMMENT '备案号',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `title` varchar(255) DEFAULT NULL COMMENT '标题',
  `ali_pay` varchar(32) DEFAULT NULL COMMENT '支付宝收款码FileId',
  `weixin_pay` varchar(32) DEFAULT NULL COMMENT '微信收款码FileId',
  `github` varchar(255) DEFAULT NULL COMMENT 'github地址',
  `gitee` varchar(255) DEFAULT NULL COMMENT 'gitee地址',
  `qq_number` varchar(20) DEFAULT NULL COMMENT 'QQ号',
  `qq_group` varchar(20) DEFAULT NULL COMMENT 'QQ群',
  `we_chat` varchar(255) DEFAULT NULL COMMENT '微信号',
  `email` varchar(255) DEFAULT NULL COMMENT '邮箱',
  `show_list` varchar(255) DEFAULT NULL COMMENT '显示的列表（用于控制邮箱、QQ、QQ群、Github、Gitee、微信是否显示在前端）',
  `login_type_list` varchar(255) DEFAULT NULL COMMENT '登录方式列表（用于控制前端登录方式，如账号密码,码云,Github,QQ,微信）',
  `open_comment` varchar(1) DEFAULT '1' COMMENT '是否开启评论(0:否 1:是)',
  `open_mobile_comment` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否开启移动端评论(0:否， 1:是)',
  `open_admiration` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否开启赞赏(0:否， 1:是)',
  `open_mobile_admiration` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否开启移动端赞赏(0:否， 1:是)',
  `link_apply_template` varchar(2018) DEFAULT NULL COMMENT '友链申请模板, 添加友链申请模板格式',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_web_config` */

insert  into `t_web_config`(`uid`,`logo`,`name`,`summary`,`keyword`,`author`,`record_num`,`status`,`create_time`,`update_time`,`title`,`ali_pay`,`weixin_pay`,`github`,`gitee`,`qq_number`,`qq_group`,`we_chat`,`email`,`show_list`,`login_type_list`,`open_comment`,`open_mobile_comment`,`open_admiration`,`open_mobile_admiration`,`link_apply_template`) values ('a331e4933cf54afcbb8c0cb11ec0830e',',f9f258dd238b172c1b2058af334660d7','蘑菇博客','一个专注于技术分享的博客平台，大家以共同学习，乐于分享，拥抱开源的价值观进行学习交流','\"蘑菇博客,蘑菇社区,蘑菇技术社区,,蘑菇IT社区,IT社区,技术社区,Java技术分享,Spring教程,开发者社区','陌溪','赣ICP备18014504号',1,'2018-11-17 08:15:27','2021-03-18 21:08:50','一个专注于技术分享的博客平台','b4bb7ba9905203188eb89895f0e7c121','0a55fb8d7181493e4fe781a08ff522ad','https://github.com/moxi624','https://gitee.com/moxi159753','979515003','950309755','','1595833114@qq.com','[\"2\",\"3\",\"4\",\"5\",\"1\"]','[\"3\",\"4\",\"2\",\"1\"]','1',0,1,0,NULL);

/*Table structure for table `t_web_navbar` */

DROP TABLE IF EXISTS `t_web_navbar`;

CREATE TABLE `t_web_navbar` (
  `uid` varchar(96) DEFAULT NULL,
  `name` varchar(765) DEFAULT NULL,
  `navbar_level` tinyint(1) DEFAULT NULL,
  `summary` varchar(600) DEFAULT NULL,
  `parent_uid` varchar(96) DEFAULT NULL,
  `url` varchar(765) DEFAULT NULL,
  `icon` varchar(150) DEFAULT NULL,
  `is_show` tinyint(1) DEFAULT NULL,
  `is_jump_external_url` tinyint(1) DEFAULT NULL,
  `sort` int DEFAULT NULL,
  `status` tinyint(1) DEFAULT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_web_navbar` */

insert  into `t_web_navbar`(`uid`,`name`,`navbar_level`,`summary`,`parent_uid`,`url`,`icon`,`is_show`,`is_jump_external_url`,`sort`,`status`,`create_time`,`update_time`) values ('e186d3225e1405a0ee73995347b1c239','首页',1,'首页',NULL,'/','el-icon-remove',1,0,7,1,'2021-02-23 13:17:30','2021-02-23 17:05:31'),('c3e10b3c8d576ed24387934d5d0c0b81','关于我',1,'关于我',NULL,'/about','el-icon-user',1,0,6,1,'2021-02-23 13:18:43','2021-02-23 18:06:14'),('55bca78a37694c5a72b2910adde12d96','归档',1,'归档',NULL,'/sort','el-icon-camera',1,0,5,1,'2021-02-23 13:19:11','2021-02-23 15:30:37'),('abe6c960aa65fba7f728480fd933807f','分类',1,'博客分类',NULL,'/classify','el-icon-folder-checked',1,0,4,1,'2021-02-23 13:19:38','2021-02-23 15:30:43'),('0de9cfa4227c80530e43c534712156f5','标签',1,'博客标签',NULL,'/tag','el-icon-headset',1,0,3,1,'2021-02-23 13:20:01','2021-02-23 15:30:47'),('40277498960cfc2fb428c1ee4429676c','专题',1,'博客专题',NULL,'/subject','el-icon-data-analysis',1,0,2,1,'2021-02-23 13:20:22','2021-02-23 15:30:50'),('0d8a13137502ed28649888cfea40ee80','留言板',1,'留言板',NULL,'/messageBoard','el-icon-money',1,0,1,1,'2021-02-23 13:20:47','2021-02-23 15:30:53'),('94d59134ab64aac6d7994c80c6698f8a','博客源码',1,'博客源码',NULL,'https://gitee.com/moxi159753/mogu_blog_v2','el-icon-zoom-in',1,1,0,1,'2021-02-23 18:07:24','2021-02-27 13:05:34'),('a26eb81119b47bb34f733c4c38432021','博客详情',1,'博客详情页',NULL,'/info','el-icon-user',0,0,0,1,'2021-02-23 18:40:54','2021-02-23 18:40:54'),('7fb0684401ff99073c64dc956a9cb28a','博客列表',1,'博客列表',NULL,'/list','el-icon-picture-outline-round',0,0,0,1,'2021-02-23 18:57:19','2021-02-23 18:57:19'),('25bdfd2a854ea4af1bf1adcd676a711b','学习笔记',2,'学习笔记','94d59134ab64aac6d7994c80c6698f8a','https://gitee.com/moxi159753/LearningNotes','el-icon-folder-opened',1,1,0,1,'2021-02-27 12:43:40','2021-02-27 12:43:40'),('51f9db7329ccd382255c01f4ef371108','博客源码',2,'蘑菇博客源码','94d59134ab64aac6d7994c80c6698f8a','https://gitee.com/moxi159753/mogu_blog_v2','el-icon-tickets',1,1,0,1,'2021-02-27 13:06:13','2021-02-27 13:06:13');

/*Table structure for table `t_web_visit` */

DROP TABLE IF EXISTS `t_web_visit`;

CREATE TABLE `t_web_visit` (
  `uid` varchar(32) NOT NULL COMMENT '主键',
  `user_uid` varchar(255) DEFAULT NULL COMMENT '用户uid',
  `ip` varchar(255) DEFAULT NULL COMMENT '访问ip地址',
  `behavior` varchar(255) DEFAULT NULL COMMENT '用户行为',
  `module_uid` varchar(255) DEFAULT NULL COMMENT '模块uid（文章uid，标签uid，分类uid）',
  `other_data` varchar(255) DEFAULT NULL COMMENT '附加数据(比如搜索内容)',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `os` varchar(255) DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(255) DEFAULT NULL COMMENT '浏览器',
  `ip_source` varchar(255) DEFAULT NULL COMMENT 'ip来源',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Web访问记录表';

/*Data for the table `t_web_visit` */

insert  into `t_web_visit`(`uid`,`user_uid`,`ip`,`behavior`,`module_uid`,`other_data`,`status`,`create_time`,`update_time`,`os`,`browser`,`ip_source`) values ('012e89b4d9228c743e81e4d98e1d9ab9',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:08:13','2021-03-18 21:08:13','Windows','Chrome-88.0.4324.190',NULL),('03878a28799d63baf0c1be8f7bc76217',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-18 21:03:58','2021-03-18 21:03:58','Windows','Chrome-88.0.4324.190',NULL),('03dcf9b9158e5ddb66bf5b9767e4e412',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-04-16 14:31:36','2021-04-16 14:31:36','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('05ed9a92d78a6c8cf9c1962e18d7427b',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-11 23:54:48','2021-09-11 23:54:48','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('0630432c3a3a39e8bf2da4a6c119e906',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:04:09','2021-03-18 21:04:09','Windows','Chrome-88.0.4324.190',NULL),('0b6f5e56e5c3d184814921a110645f13',NULL,'183.218.57.87','visit_page',NULL,'关于我',1,'2021-01-23 10:18:00','2021-01-23 10:18:00','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('0baecaaec6cf6f5d950207d081601762',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-12 14:46:17','2021-03-12 14:46:17','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('0d7b5d51781f05eaea67150430e906b5',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:48:48','2021-03-18 20:48:48','Windows','Chrome-88.0.4324.190',NULL),('0e07d932c2eafaf1f3dccf17898aa52f',NULL,'183.218.58.131','visit_page',NULL,'INDEX',1,'2021-03-01 08:04:05','2021-03-01 08:04:05','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('0fc4609d97c6ec2e5772b4d6533aeb30',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-11 23:54:19','2021-09-11 23:54:19','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('1115ae854b41e887545a741eed2013ed',NULL,'116.1.3.238','visit_page',NULL,'INDEX',1,'2021-03-13 09:58:29','2021-03-13 09:58:29','Mac','Safari-14.0.3','中国|广西|桂林市|电信'),('11dab0420d4263cbaedd438be6967de2',NULL,'183.216.232.40','visit_page',NULL,'INDEX',1,'2021-02-17 16:04:51','2021-02-17 16:04:51','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('14e7b01168d4343a7e82bdabbe975d74',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-13 15:45:37','2021-03-13 15:45:37','Windows','Chrome-88.0.4324.190',NULL),('156b5c3e1eb7e926c4ef81487c4be019',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-18 21:04:57','2021-03-18 21:04:57','Windows','Chrome-88.0.4324.190',NULL),('159d8fe38a664f52ec80c5c090ab264e',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-11 23:56:52','2021-09-11 23:56:52','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('169373cfbcacaa602ae3fe7e72ce67e5',NULL,'0:0:0:0:0:0:0:1','visit_sort',NULL,'2020年10月',1,'2021-03-13 15:44:26','2021-03-13 15:44:26','Windows','Chrome-88.0.4324.190',NULL),('1ab8483c03b385e2898de60b1b1c0c97',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-18 21:10:13','2021-03-18 21:10:13','Windows','Chrome-88.0.4324.190',NULL),('1bee826fcb14ebee040c6b367668f93e',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:07:11','2021-03-18 21:07:11','Windows','Chrome-88.0.4324.190',NULL),('1ca4f6e11cc740b6279b283fd2661e47',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-13 15:44:21','2021-03-13 15:44:21','Windows','Chrome-88.0.4324.190',NULL),('229da20c34556ca1143ff42b42ea2ce4',NULL,'183.216.232.40','visit_sort',NULL,'2020年10月',1,'2021-02-17 16:04:54','2021-02-17 16:04:54','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('2498a18d8c3fd175e0cca39d96234130',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:49:41','2021-03-18 20:49:41','Windows','Chrome-88.0.4324.190',NULL),('24cde717ac6fae85cdcb97f0a2bb3930',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-18 21:10:14','2021-03-18 21:10:14','Windows','Chrome-88.0.4324.190',NULL),('24eed2c79a63cf5acd7f5876ba7de775',NULL,'183.218.58.4','visit_page',NULL,'INDEX',1,'2021-02-28 21:08:37','2021-02-28 21:08:37','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('251f0ec820f089498c441ab0716c4e65',NULL,'116.1.3.198','visit_sort',NULL,'2020年10月',1,'2021-03-03 09:19:46','2021-03-03 09:19:46','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('2677df09bfddbbe15230a0385c1e1e03',NULL,'180.163.220.67','visit_page',NULL,'INDEX',1,'2021-05-03 20:39:14','2021-05-03 20:39:14','Android','Safari-4.0','中国|上海|上海市|电信'),('273f5b05a4e2026052daf8052605a11e',NULL,'183.218.58.131','visit_page',NULL,'关于我',1,'2021-03-01 08:04:14','2021-03-01 08:04:14','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('290e4fa1daf9d27e27fbfd427677bb31',NULL,'110.152.33.218','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-02 09:31:50','2021-03-02 09:31:50','Windows','Chrome-70.0.3538.25','中国|新疆|乌鲁木齐市|电信'),('29297dc68bb226a0095d2367371891d6',NULL,'116.1.3.198','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-03 09:20:07','2021-03-03 09:20:07','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('2a91eac597b73cdb7484a565f12a71db',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-09 15:18:47','2021-03-09 15:18:47','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('2ab8ace4b6a43d9842452f245b87a1f2',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-04-16 10:26:02','2021-04-16 10:26:02','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('2b2af2135e6bca3744f717a7c92aa987',NULL,'0:0:0:0:0:0:0:1','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-18 21:03:58','2021-03-18 21:03:58','Windows','Chrome-88.0.4324.190',NULL),('2c3530d1d0cf7e519c024e03efbbaeb1',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:55:31','2021-03-18 20:55:31','Windows','Chrome-88.0.4324.190',NULL),('2d340352420b1d5f8b298239cfe608a1',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-12 00:00:00','2021-09-12 00:00:00','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('2e21c0faccd0a6fbffdc811860e20f80',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:58:43','2021-03-18 20:58:43','Windows','Chrome-88.0.4324.190',NULL),('2e66d9d7cec5419599bb17561dbf3d9f',NULL,'103.228.209.39','visit_sort',NULL,'2020年10月',1,'2021-05-04 00:08:51','2021-05-04 00:08:51','Windows','Chrome-88.0.4324.190','中国|广西|南宁市|广西广电'),('2e8a8356f893d32af8e22cc5f5ab35be','6795d72d4b27b24e02acb38723ccc5d6','116.1.3.233','publish_comment',NULL,'测试评论~',1,'2020-12-11 21:01:23','2020-12-11 21:01:23','Windows','Chrome-86.0.4240.75','中国|广西|桂林市|电信'),('319d57b8133a8d547c1f906ac6c7c7ff',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-12 14:46:42','2021-03-12 14:46:42','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('34025389fafa6a2ffc09e53ede0191d0',NULL,'183.218.57.87','visit_page',NULL,'INDEX',1,'2021-01-23 10:17:52','2021-01-23 10:17:52','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('352435223212ac130e2e759ba9196fd6',NULL,'103.228.209.39','visit_page',NULL,'INDEX',1,'2021-05-03 20:38:04','2021-05-03 20:38:04','Windows','Chrome-88.0.4324.190','中国|广西|南宁市|广西广电'),('35a823fe984f20bb842e3b9f84fb6d56',NULL,'183.218.58.4','visit_page',NULL,'INDEX',1,'2021-02-28 21:09:04','2021-02-28 21:09:04','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('3d01dd23080ee4f2836022aca39bb3dc',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'关于我',1,'2021-03-13 15:45:35','2021-03-13 15:45:35','Windows','Chrome-88.0.4324.190',NULL),('408942f1e265964ae21d1735d433a24e',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:01:03','2021-03-18 21:01:03','Windows','Chrome-88.0.4324.190',NULL),('40f70c7717b92f360b9e941655213380','6795d72d4b27b24e02acb38723ccc5d6','116.1.3.233','visit_page',NULL,'INDEX',1,'2020-12-11 21:01:36','2020-12-11 21:01:36','Windows','Chrome-86.0.4240.75','中国|广西|桂林市|电信'),('428b81c938f2c8c848ac344c64f6371d',NULL,'183.218.58.132','visit_page',NULL,'INDEX',1,'2021-02-05 15:43:39','2021-02-05 15:43:39','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('44624592aa25e7100e3741df8ccfd149',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-18 21:03:54','2021-03-18 21:03:54','Windows','Chrome-88.0.4324.190',NULL),('44a8e35320b8684dfc702302a67756c9',NULL,'116.1.3.198','visit_page',NULL,'关于我',1,'2021-03-03 09:19:09','2021-03-03 09:19:09','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('4512052ae3f77df903c8406db92195f8',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'关于我',1,'2021-03-18 21:03:57','2021-03-18 21:03:57','Windows','Chrome-88.0.4324.190',NULL),('46967eb89765cbb6772a1862533caa96',NULL,'183.218.58.132','visit_page',NULL,'INDEX',1,'2021-02-05 15:29:18','2021-02-05 15:29:18','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('487fcc5b15b5e710cebd3a70050ef85c',NULL,'183.218.58.131','visit_page',NULL,'INDEX',1,'2021-03-01 08:04:34','2021-03-01 08:04:34','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('48e0516e78a969161884f453d289a29a',NULL,'103.228.209.39','visit_page',NULL,'关于我',1,'2021-05-04 00:08:50','2021-05-04 00:08:50','Windows','Chrome-88.0.4324.190','中国|广西|南宁市|广西广电'),('48ec8b2a3d08981796ef0f37b4c67dc6',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-04-16 10:26:02','2021-04-16 10:26:02','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('4ac8a5ae6d500faea57cab9b2101ddc0',NULL,'116.1.3.198','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-03 09:20:08','2021-03-03 09:20:08','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('4be691620e335b0b33dd3046374d590f',NULL,'27.115.124.101','visit_page',NULL,'INDEX',1,'2021-03-13 10:05:02','2021-03-13 10:05:02','Android','Safari-4.0','中国|上海|上海市|联通'),('4c2facef6b8498f64876a0f5979426de',NULL,'183.218.57.87','visit_sort',NULL,'2020年10月',1,'2021-01-23 10:18:09','2021-01-23 10:18:09','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('4cb528aa5e7aef93dd13c20da38491c3',NULL,'183.218.58.132','visit_sort',NULL,'2020年10月',1,'2021-02-05 16:27:24','2021-02-05 16:27:24','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('4dc841636ad93b82610a60e9afa1d8c2',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-11 23:58:01','2021-09-11 23:58:01','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('4e17e1d35cd6c51a94d9a85800961a61',NULL,'183.218.58.4','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-02-28 21:09:00','2021-02-28 21:09:00','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('4fd96aeea4172ebf8595ec0a8cbfdcc0',NULL,'116.1.3.198','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-03 09:19:14','2021-03-03 09:19:14','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('505c13289f3b8485b4db3fbf578fe5c3',NULL,'27.115.124.101','visit_page',NULL,'INDEX',1,'2021-03-03 09:22:38','2021-03-03 09:22:38','Android','Safari-4.0','中国|上海|上海市|联通'),('5181faaf48754ad26c0bf44c0806d01c',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-13 15:44:29','2021-03-13 15:44:29','Windows','Chrome-88.0.4324.190',NULL),('52fd1e8dd03fe0f025235e5f7a5962a9',NULL,'183.218.57.87','visit_page',NULL,'INDEX',1,'2021-01-23 10:17:49','2021-01-23 10:17:49','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('581b9213332f922d8c58b8197a460c2e',NULL,'183.218.57.87','visit_page',NULL,'INDEX',1,'2021-01-23 09:50:02','2021-01-23 09:50:02','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('5981d5199e73de6bddbfffa1245030dd',NULL,'27.115.124.38','visit_page',NULL,'INDEX',1,'2021-01-30 19:46:01','2021-01-30 19:46:01','Android','Safari-4.0','中国|上海|上海市|联通'),('5b11253e8d9e587672493ed841f07472',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-12 00:00:05','2021-09-12 00:00:05','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('5c339a68c21729e8399fd605d7d30ca6',NULL,'110.152.33.218','visit_page',NULL,'INDEX',1,'2021-03-02 09:22:08','2021-03-02 09:22:08','Windows','Chrome-70.0.3538.25','中国|新疆|乌鲁木齐市|电信'),('5e15a58a11895f9a632ef29f31e0d28e',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:02:34','2021-03-18 21:02:34','Windows','Chrome-88.0.4324.190',NULL),('5e998e287fd11d55a7661a7e12248575',NULL,'183.218.57.194','visit_page',NULL,'INDEX',1,'2021-01-24 20:44:40','2021-01-24 20:44:40','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('5f73d6d4b53ea7ff6628c4ae097d5261',NULL,'183.216.232.14','visit_page',NULL,'INDEX',1,'2021-02-20 20:55:12','2021-02-20 20:55:12','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('6067ad5692cc9c4e17a159d03c1ad61a',NULL,'183.218.58.4','visit_sort',NULL,'2020年10月',1,'2021-02-28 21:08:56','2021-02-28 21:08:56','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('60d3d75b424694199c71083840efedcc',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'关于我',1,'2021-03-18 21:04:54','2021-03-18 21:04:54','Windows','Chrome-88.0.4324.190',NULL),('628c65714a6097f9a732bfc6404f8ff3',NULL,'183.218.57.87','visit_page',NULL,'INDEX',1,'2021-01-23 09:48:22','2021-01-23 09:48:22','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('65d1393a322a549504e311625a6df65d',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:54:46','2021-03-18 20:54:46','Windows','Chrome-88.0.4324.190',NULL),('673d8e91bfcaa18c1bf4b7fa48ef91e9',NULL,'0:0:0:0:0:0:0:1','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-18 21:03:54','2021-03-18 21:03:54','Windows','Chrome-88.0.4324.190',NULL),('684f33ff275f2115936cc072f80f5db9',NULL,'183.216.232.40','visit_sort',NULL,'2020年10月',1,'2021-02-17 16:04:50','2021-02-17 16:04:50','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('689ef0435f0cdc57678c6b62d60b9935',NULL,'183.218.58.131','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-01 08:04:03','2021-03-01 08:04:03','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('68bc595ddebeb74f1eb2966aeb8c5887',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-12 14:48:00','2021-03-12 14:48:00','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('6a7c53225a5fb34a20f140f1ae98c441',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-11 23:59:10','2021-09-11 23:59:10','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('6aae2323c4d1b68147801d318ec0e3d2',NULL,'183.218.57.87','visit_page',NULL,'INDEX',1,'2021-01-23 10:17:58','2021-01-23 10:17:58','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('6c68792c45d45af2b4b8116ef7220d83',NULL,'183.218.57.87','visit_page',NULL,'INDEX',1,'2021-01-23 10:17:33','2021-01-23 10:17:33','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('6cb345a580adbc6429c8394293b51608',NULL,'27.115.124.101','visit_page',NULL,'INDEX',1,'2021-03-12 19:27:48','2021-03-12 19:27:48','Android','Safari-4.0','中国|上海|上海市|联通'),('6d0d6cbcf431d90937abdf5f68f135bd',NULL,'0:0:0:0:0:0:0:1','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-13 15:45:36','2021-03-13 15:45:36','Windows','Chrome-88.0.4324.190',NULL),('715180e9c7e4391962e40e1ffa319211',NULL,'183.216.232.40','visit_page',NULL,'关于我',1,'2021-02-17 16:04:53','2021-02-17 16:04:53','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('72a767425dfc8b9c3c5f1058a3e359d0',NULL,'116.1.3.198','visit_page',NULL,'关于我',1,'2021-03-12 14:48:07','2021-03-12 14:48:07','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('73f43db119a5e6c140eb6dbb4f3cf6ec',NULL,'183.216.232.40','visit_page',NULL,'INDEX',1,'2021-02-17 16:03:59','2021-02-17 16:03:59','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('762b09b3d3f7ca75cc29d70189f7dba6',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-18 21:03:59','2021-03-18 21:03:59','Windows','Chrome-88.0.4324.190',NULL),('79b648416e4cc4ac90b916955b1e8548',NULL,'183.218.58.131','visit_sort',NULL,'2020年10月',1,'2021-03-01 08:04:01','2021-03-01 08:04:01','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('7c666eabde4299eaccf4f82b304b682d',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:01:20','2021-03-18 21:01:20','Windows','Chrome-88.0.4324.190',NULL),('7d9367f3488fe5b6064e69aa96500304',NULL,'116.1.3.199','visit_page',NULL,'INDEX',1,'2021-03-27 08:57:39','2021-03-27 08:57:39','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('7d97654f1c98e04add8e50a4b019a42b',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-13 10:02:21','2021-03-13 10:02:21','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('7df6f9b07b897fd3ba5d32bd0b86a81a',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-11 23:54:21','2021-09-11 23:54:21','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('7e90587703be63eba475e9dad47952ed',NULL,'110.152.33.218','visit_sort',NULL,'2020年10月',1,'2021-03-02 09:31:35','2021-03-02 09:31:35','Windows','Chrome-70.0.3538.25','中国|新疆|乌鲁木齐市|电信'),('800185af93850e0c0b2e8f8302986d95',NULL,'183.218.58.132','visit_page',NULL,'INDEX',1,'2021-02-05 16:27:23','2021-02-05 16:27:23','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('815a14f3ffae44cd18d575654a9be838',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-11 23:54:50','2021-09-11 23:54:50','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('82c79e87274b3c6ef87e8ea563cdc580',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:49:52','2021-03-18 20:49:52','Windows','Chrome-88.0.4324.190',NULL),('82f8d4716a714483a090c495cb5d439a',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'关于我',1,'2021-03-18 21:03:55','2021-03-18 21:03:55','Windows','Chrome-88.0.4324.190',NULL),('837098f3501f1b4e67f028d4e488a544',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:08:27','2021-03-18 21:08:27','Windows','Chrome-88.0.4324.190',NULL),('84947d24943dfb1eb00c616d9cdc072e',NULL,'0:0:0:0:0:0:0:1','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-13 15:44:27','2021-03-13 15:44:27','Windows','Chrome-88.0.4324.190',NULL),('86155b188f37505a6579338d08dc036a',NULL,'0:0:0:0:0:0:0:1','visit_sort',NULL,'2020年10月',1,'2021-03-13 15:45:35','2021-03-13 15:45:35','Windows','Chrome-88.0.4324.190',NULL),('86cc55cb51a3c544c85f5426d0d3dcb4',NULL,'183.218.57.87','visit_page',NULL,'INDEX',1,'2021-01-23 10:18:04','2021-01-23 10:18:04','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('8707f6a2d428999c8fd21da63f801662',NULL,'183.218.58.132','visit_page',NULL,'INDEX',1,'2021-02-05 15:29:18','2021-02-05 15:29:18','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('8aeddd24ba351d6adaa734e7a7bd31b8',NULL,'116.1.3.198','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-03 09:19:14','2021-03-03 09:19:14','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('8b55bb0b71abb8391d3ee551d50bc88b',NULL,'0:0:0:0:0:0:0:1','visit_sort',NULL,'2020年10月',1,'2021-03-13 15:44:27','2021-03-13 15:44:27','Windows','Chrome-88.0.4324.190',NULL),('8ca75b9de465b312cb4ddd02aa80357c',NULL,'0:0:0:0:0:0:0:1','visit_sort',NULL,'2020年10月',1,'2021-03-18 21:03:55','2021-03-18 21:03:55','Windows','Chrome-88.0.4324.190',NULL),('8e2b9a18330152216ac25aede7d5526e',NULL,'175.11.171.110','visit_page',NULL,'INDEX',1,'2021-02-18 11:02:10','2021-02-18 11:02:10','Windows','Chrome-87.0.4280.88','中国|湖南省|长沙市|电信'),('8e33d2ca8e4f7b45ed9ffeb75f7d62cb',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-13 10:02:09','2021-03-13 10:02:09','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('8e3afccd23d7a95a30c68ec006da838d',NULL,'183.218.57.87','visit_page',NULL,'INDEX',1,'2021-01-23 10:21:45','2021-01-23 10:21:45','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('8f26cbcd7770268c0c508090237c9da3',NULL,'183.216.232.40','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-02-17 16:04:50','2021-02-17 16:04:50','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('8f5421b9014454abb7b5231bf969a69f',NULL,'192.168.177.1','visit_page',NULL,'INDEX',1,'2021-09-11 23:58:02','2021-09-11 23:58:02','Windows','Chrome-92.0.4515.107','内网IP|内网IP'),('909905c2789aad714e8f5b385c3066c1',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-13 15:45:25','2021-03-13 15:45:25','Windows','Chrome-88.0.4324.190',NULL),('926e29909501087d7b91db1ca32a1735',NULL,'116.1.3.198','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-03 09:19:47','2021-03-03 09:19:47','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('92a2d8a21a31e538e9c99757898968b2',NULL,'116.1.3.198','visit_sort',NULL,'2020年10月',1,'2021-03-03 09:19:11','2021-03-03 09:19:11','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('935f71140f1b8573775fcc7b04a7e12e',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-10 18:41:56','2021-03-10 18:41:56','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('9432a948c318b3c2378e9c9038733248',NULL,'103.228.209.39','visit_page',NULL,'关于我',1,'2021-05-04 00:08:52','2021-05-04 00:08:52','Windows','Chrome-88.0.4324.190','中国|广西|南宁市|广西广电'),('94eddeaa363fa870053b6bd6d69795f9',NULL,'183.218.57.194','visit_page',NULL,'INDEX',1,'2021-01-24 20:45:44','2021-01-24 20:45:44','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('9786af242cf6a0bf0f973de154714d2b',NULL,'183.216.232.40','visit_page',NULL,'关于我',1,'2021-02-17 16:04:46','2021-02-17 16:04:46','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('984b677eab95c080c6226f21d7461b98',NULL,'0:0:0:0:0:0:0:1','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-13 15:44:29','2021-03-13 15:44:29','Windows','Chrome-88.0.4324.190',NULL),('995714d7f2b864123f232888f4615e1a',NULL,'103.228.209.39','visit_page',NULL,'INDEX',1,'2021-05-03 23:25:19','2021-05-03 23:25:19','Windows','Chrome-88.0.4324.190','中国|广西|南宁市|广西广电'),('9964eca7a6e2cb073b855eb13ce04113',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-04-16 14:31:36','2021-04-16 14:31:36','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('9b27a69b1b268bb001fa77cc0209f560',NULL,'116.1.3.198','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-03 09:19:47','2021-03-03 09:19:47','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('9ca6967ec715bf4e3cb366150cdaa2e5',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-03 09:19:57','2021-03-03 09:19:57','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('9fa8ecf1f262de7a16e36000a92122a2',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:09:46','2021-03-18 21:09:46','Windows','Chrome-88.0.4324.190',NULL),('a5aecdc6f094e22916423cac1d39ed54',NULL,'183.216.232.40','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-02-17 16:04:56','2021-02-17 16:04:56','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('a6534ff57e2bbee6c1069190d8255c54','6795d72d4b27b24e02acb38723ccc5d6','116.1.3.233','visit_tag','5626932d452c2ad863d9b3cb0b69d22d',NULL,1,'2020-12-11 21:01:40','2020-12-11 21:01:40','Windows','Chrome-86.0.4240.75','中国|广西|桂林市|电信'),('a78c520c3738a7b1f68f90dfd8be629f',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:57:49','2021-03-18 20:57:49','Windows','Chrome-88.0.4324.190',NULL),('a82fb4b589eacde6b2368beeaf369604',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-03 09:19:27','2021-03-03 09:19:27','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('a9cd74ceba61bb04263e8b4b24f19c5c',NULL,'183.218.58.4','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-02-28 21:09:00','2021-02-28 21:09:00','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('aa4c84f1c9d3ecdda446d78038b40bbc',NULL,'183.218.58.113','visit_page',NULL,'INDEX',1,'2021-01-30 19:43:41','2021-01-30 19:43:41','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('aaf18faeb57d2202c5d06db15d20c35c',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:55:08','2021-03-18 20:55:08','Windows','Chrome-88.0.4324.190',NULL),('ab00b4617e4e90e93ef1922d9b442c17',NULL,'183.218.58.131','visit_page',NULL,'关于我',1,'2021-03-01 08:04:03','2021-03-01 08:04:03','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('ab6806f0be60da4ac458090a8d949e8d',NULL,'183.218.57.87','visit_sort',NULL,'2020年10月',1,'2021-01-23 10:18:02','2021-01-23 10:18:02','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('ab90501d0cb8eea574c192447b3ec710',NULL,'111.7.96.174','visit_page',NULL,'INDEX',1,'2021-03-05 16:09:54','2021-03-05 16:09:54','Mac','Chrome-87.0.4280.88','中国|河南省|驻马店市|移动'),('af6ced596795cf2319859b4cea153f70',NULL,'116.1.3.198','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-03 09:19:13','2021-03-03 09:19:13','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('b14ebf80a8686ea17e8720393cf17f57',NULL,'42.236.10.117','visit_page',NULL,'INDEX',1,'2021-02-17 16:06:54','2021-02-17 16:06:54','Android','Safari-4.0','中国|河南省|郑州市|联通'),('b351c9bb101817904d09c7ddcd8b6a2d',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:58:16','2021-03-18 20:58:16','Windows','Chrome-88.0.4324.190',NULL),('b42a7f60ed2e40b79f3709874c05cfcc',NULL,'183.218.58.4','visit_page',NULL,'关于我',1,'2021-02-28 21:08:54','2021-02-28 21:08:54','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('b4d23ce91ff565abd32da0abf81c39d1',NULL,'183.218.58.4','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-02-28 21:08:59','2021-02-28 21:08:59','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('b7b69df5d310645e5f941d088a4bac89',NULL,'183.218.57.194','visit_page',NULL,'INDEX',1,'2021-01-24 20:42:44','2021-01-24 20:42:44','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('b8c909f9c0546fa8284e95f705673212',NULL,'183.218.58.131','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-01 08:04:16','2021-03-01 08:04:16','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('b9c53298f840f79e189e44c2ab777073',NULL,'0:0:0:0:0:0:0:1','visit_sort',NULL,'2020年10月',1,'2021-03-18 21:03:57','2021-03-18 21:03:57','Windows','Chrome-88.0.4324.190',NULL),('bb4f017d7ef3e06a184e67acba38ca62',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'关于我',1,'2021-03-18 21:10:11','2021-03-18 21:10:11','Windows','Chrome-88.0.4324.190',NULL),('bb76120c5ffecdb9a80452d0a8a578da',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-04-16 10:36:19','2021-04-16 10:36:19','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('bd237f9e10870b6deb501fd43baf154a',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:03:56','2021-03-18 21:03:56','Windows','Chrome-88.0.4324.190',NULL),('be681d8cec5714f3cd8427a6ddaf38bd',NULL,'116.1.3.198','visit_page',NULL,'关于我',1,'2021-03-03 09:19:59','2021-03-03 09:19:59','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('be76b1ad564d8b8f3d305100ccd044e9',NULL,'116.1.3.198','visit_sort',NULL,'2020年10月',1,'2021-03-03 09:20:06','2021-03-03 09:20:06','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('bec1f6b9362bca9207089973b6eca77a',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-12 14:48:04','2021-03-12 14:48:04','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('c0e6ec0b9139e567237778f48149c752',NULL,'183.218.58.131','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-01 08:04:17','2021-03-01 08:04:17','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('c101c462dbbdd4a7e1ab44ef5c074547',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-12 14:46:26','2021-03-12 14:46:26','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('c1aa61f8e64008a3e6f996f160c7dd78',NULL,'183.218.58.131','visit_page',NULL,'INDEX',1,'2021-03-02 09:45:40','2021-03-02 09:45:40','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('c3e95bb456d2edc08a1f533e719cb17b',NULL,'27.115.124.70','visit_page',NULL,'INDEX',1,'2021-02-20 20:55:51','2021-02-20 20:55:51','Android','Safari-4.0','中国|上海|上海市|联通'),('c3ec42c9122e9d03fe7a1add3bf3fc84',NULL,'183.218.58.131','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-01 08:04:17','2021-03-01 08:04:17','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('c490308c998353f60bdb08d69d274c06',NULL,'180.163.220.67','visit_page',NULL,'INDEX',1,'2021-02-05 15:30:02','2021-02-05 15:30:02','Android','Safari-4.0','中国|上海|上海市|电信'),('c91731a315731f356218c2fbdaf465e3',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-04-16 14:31:36','2021-04-16 14:31:36','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('c93c5e2223ba03dae3a1e2759aef09a8',NULL,'103.228.209.39','visit_page',NULL,'INDEX',1,'2021-05-04 00:08:39','2021-05-04 00:08:39','Windows','Chrome-88.0.4324.190','中国|广西|南宁市|广西广电'),('ca2bea1223a70bf92566e23feecf64fe',NULL,'0:0:0:0:0:0:0:1','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-18 21:04:56','2021-03-18 21:04:56','Windows','Chrome-88.0.4324.190',NULL),('ca82471d1c809fccac5fdb310c77843c',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:50:17','2021-03-18 20:50:17','Windows','Chrome-88.0.4324.190',NULL),('cc7bc24f4f805b073642828ad4aee5a2',NULL,'110.152.33.218','visit_page',NULL,'INDEX',1,'2021-03-02 09:22:02','2021-03-02 09:22:02','Windows','Chrome-70.0.3538.25','中国|新疆|乌鲁木齐市|电信'),('cd9aafcee3bf366557db6252f4e22fa2',NULL,'116.1.3.198','visit_sort',NULL,'2020年10月',1,'2021-03-12 14:48:12','2021-03-12 14:48:12','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('cdf16089a933ae46e0195beeba5abde8',NULL,'183.218.57.87','visit_tag','5626932d452c2ad863d9b3cb0b69d22d',NULL,1,'2021-01-23 10:18:03','2021-01-23 10:18:03','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('d1a5221a9961b44a16c53d4680ddeb22',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'关于我',1,'2021-03-13 15:44:24','2021-03-13 15:44:24','Windows','Chrome-88.0.4324.190',NULL),('d30d34f7f03ff71a64cd964ea9031ea1',NULL,'116.1.3.198','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-03 09:19:47','2021-03-03 09:19:47','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('d5d30cc4b4382657f6190a637ecd7598',NULL,'116.1.3.198','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-12 14:48:14','2021-03-12 14:48:14','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('d6d2b1c982137b9e57ddbbcbbc97f224',NULL,'175.11.171.110','blog_content',NULL,'9',1,'2021-02-18 11:02:33','2021-02-18 11:02:33','Windows','Chrome-87.0.4280.88','中国|湖南省|长沙市|电信'),('d7a44643dcfb5b039c6fe5a4481c5539',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:56:34','2021-03-18 20:56:34','Windows','Chrome-88.0.4324.190',NULL),('d7ffe651024cdfcd54c7acab333e02de',NULL,'183.218.58.131','visit_page',NULL,'INDEX',1,'2021-03-01 07:59:45','2021-03-01 07:59:45','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('d8ed2292591a8a057c3fd26187b62a0d',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-13 10:01:57','2021-03-13 10:01:57','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('d957016e6dd752cdf3bcea36828b97e8',NULL,'183.218.57.87','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-01-23 10:18:11','2021-01-23 10:18:11','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('dd60231252a9fe4a454444f8debb8077',NULL,'183.216.232.40','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-02-17 16:04:49','2021-02-17 16:04:49','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('ddaa1275f8e7d8613e4697500fd65049',NULL,'183.218.58.132','visit_page',NULL,'INDEX',1,'2021-02-05 15:51:17','2021-02-05 15:51:17','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('ddf3912d602954441a2aa2abc08ed0e4',NULL,'183.218.57.87','visit_tag','5626932d452c2ad863d9b3cb0b69d22d',NULL,1,'2021-01-23 10:18:11','2021-01-23 10:18:11','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('e009d41dec46815cfdf7cb7d6ac7095c',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-03 09:18:53','2021-03-03 09:18:53','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('e0f1ea84187a62c36ff96dd009fb5fe2',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:56:32','2021-03-18 20:56:32','Windows','Chrome-88.0.4324.190',NULL),('e0fe64cf4d53fe95226679a00536392c',NULL,'0:0:0:0:0:0:0:1','visit_sort',NULL,'2020年10月',1,'2021-03-18 21:10:12','2021-03-18 21:10:12','Windows','Chrome-88.0.4324.190',NULL),('e18de7ec25aa7f6aa5eb82ea2f5b88ea',NULL,'183.218.58.131','visit_sort',NULL,'2020年10月',1,'2021-03-01 08:04:15','2021-03-01 08:04:15','Windows','Chrome-88.0.4324.190','中国|江西省|赣州市|移动'),('e1ea3a1fda49644dcbdd83b75a2ae527',NULL,'183.218.57.87','visit_page',NULL,'关于我',1,'2021-01-23 10:18:08','2021-01-23 10:18:08','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('e35a0f6a076992d699648d055ca9c64d',NULL,'103.228.209.39','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-05-04 00:08:55','2021-05-04 00:08:55','Windows','Chrome-88.0.4324.190','中国|广西|南宁市|广西广电'),('e3952ed3e2e092e66550558b76c5540d',NULL,'110.152.33.218','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-03-02 09:31:50','2021-03-02 09:31:50','Windows','Chrome-70.0.3538.25','中国|新疆|乌鲁木齐市|电信'),('e3c5839eadb63f04a4bd4c0415ec5f61',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:08:56','2021-03-18 21:08:56','Windows','Chrome-88.0.4324.190',NULL),('e7b7cf2651d094d871d1436ef1ead3f3',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:05:01','2021-03-18 21:05:01','Windows','Chrome-88.0.4324.190',NULL),('ee49bcc9bb80aa8e45816ec5a7d88b24',NULL,'0:0:0:0:0:0:0:1','visit_sort',NULL,'2020年10月',1,'2021-03-18 21:04:56','2021-03-18 21:04:56','Windows','Chrome-88.0.4324.190',NULL),('ef838e59199be6d1590f26db8f4ecfbe',NULL,'116.1.3.198','visit_page',NULL,'INDEX',1,'2021-03-12 14:48:19','2021-03-12 14:48:19','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('efd6f8bf9f773badcdd709cccf87e6a0',NULL,'116.1.3.198','visit_page',NULL,'关于我',1,'2021-03-03 09:19:45','2021-03-03 09:19:45','Windows','Chrome-88.0.4324.190','中国|广西|桂林市|电信'),('f0e528e3c4c2693c377f12c392781f10',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 20:59:47','2021-03-18 20:59:47','Windows','Chrome-88.0.4324.190',NULL),('f573156a10eaf2980c9df3fe872c2a7e',NULL,'0:0:0:0:0:0:0:1','visit_classify','a03d7290b1c04b6eaf46659661b47032',NULL,1,'2021-03-18 21:10:13','2021-03-18 21:10:13','Windows','Chrome-88.0.4324.190',NULL),('f62ac58e0adfd1b5509bca6c8497a0ae',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:01:12','2021-03-18 21:01:12','Windows','Chrome-88.0.4324.190',NULL),('f63f4192aad59e55234cbd0f379006a9',NULL,'183.216.232.40','visit_sort',NULL,'2020年10月',1,'2021-02-17 16:04:48','2021-02-17 16:04:48','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('f68136d9636889134ed245d44dcee51c',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:03:48','2021-03-18 21:03:48','Windows','Chrome-88.0.4324.190',NULL),('f76817adde167e735a1f56e53a8d149e',NULL,'103.228.209.39','visit_tag','7e0e93ea6cdb44ae92e58f48e6496ed7',NULL,1,'2021-05-04 00:08:55','2021-05-04 00:08:55','Windows','Chrome-88.0.4324.190','中国|广西|南宁市|广西广电'),('f79a272901db94a4af21986e192b6964',NULL,'183.218.58.132','visit_page',NULL,'关于我',1,'2021-02-05 16:27:16','2021-02-05 16:27:16','Windows','Chrome-87.0.4280.88','中国|江西省|赣州市|移动'),('f8dc229993f7f4680b4df18a46c77694',NULL,'0:0:0:0:0:0:0:1','visit_page',NULL,'INDEX',1,'2021-03-18 21:10:16','2021-03-18 21:10:16','Windows','Chrome-88.0.4324.190',NULL),('fc12d08a60b08c32687b224a3c035d44',NULL,'110.152.33.218','visit_page',NULL,'关于我',1,'2021-03-02 09:22:21','2021-03-02 09:22:21','Windows','Chrome-70.0.3538.25','中国|新疆|乌鲁木齐市|电信'),('fc842689957091e1bcf3802623d49b44',NULL,'111.7.96.170','visit_page',NULL,'INDEX',1,'2021-02-10 11:41:35','2021-02-10 11:41:35','Mac','Chrome-87.0.4280.88','中国|河南省|驻马店市|移动');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
